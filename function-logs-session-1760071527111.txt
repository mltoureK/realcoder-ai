=== FUNCTION EXTRACTION & QUESTION GENERATION LOG ===
Session ID: session-1760071527111
Started: 2025-10-10T04:45:27.111Z


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T04:45:27.113Z
File: if missing
Functions Extracted: 4


Function 1: validate_url
Language: Python
Lines: 8
Full Code:
--------------------------------------------------------------------------------
def validate_url(self, value):
        # Use Django's built-in URLValidator for validation
        url_validator = URLValidator()
        try:
            url_validator(value)
        except ValidationError:
            raise serializers.ValidationError({"error": "Invalid URL format."})

        return value
--------------------------------------------------------------------------------


Function 2: create
Language: Python
Lines: 6
Full Code:
--------------------------------------------------------------------------------
def create(self, validated_data):
        if IssueLink.objects.filter(url=validated_data.get("url"), issue_id=validated_data.get("issue_id")).exists():
            raise serializers.ValidationError({"error": "URL already exists for this Issue"})
        return IssueLink.objects.create(**validated_data)
--------------------------------------------------------------------------------


Function 3: update
Language: Python
Lines: 8
Full Code:
--------------------------------------------------------------------------------
def update(self, instance, validated_data):
        if (
            IssueLink.objects.filter(url=validated_data.get("url"), issue_id=instance.issue_id)
            .exclude(pk=instance.id)
            .exists()
        ):
            raise serializers.ValidationError({"error": "URL already exists for this Issue"})

        return super().update(instance, validated_data)
--------------------------------------------------------------------------------


Function 4: to_representation
Language: Python
Lines: 41
Full Code:
--------------------------------------------------------------------------------
def to_representation(self, instance):
        data = {
            "id": instance.id,
            "name": instance.name,
            "state_id": instance.state_id,
            "sort_order": instance.sort_order,
            "completed_at": instance.completed_at,
            "estimate_point": instance.estimate_point,
            "priority": instance.priority,
            "start_date": instance.start_date,
            "target_date": instance.target_date,
            "sequence_id": instance.sequence_id,
            "project_id": instance.project_id,
            "parent_id": instance.parent_id,
            "created_at": instance.created_at,
            "updated_at": instance.updated_at,
            "created_by": instance.created_by_id,
            "updated_by": instance.updated_by_id,
            "is_draft": instance.is_draft,
            "archived_at": instance.archived_at,
            "cycle_id": instance.cycle_id,
            "module_ids": self.get_module_ids(instance),
            "label_ids": self.get_label_ids(instance),
            "assignee_ids": self.get_assignee_ids(instance),
            "sub_issues_count": instance.sub_issues_count,
            "attachment_count": instance.attachment_count,
            "link_count": instance.link_count,
        }

        if self.expand:
            if "issue_relation" in self.expand:
                relations = []
                for relation in instance.issue_relation.all():
                    related_issue = relation.related_issue
                    if not related_issue:
                        continue
                    relations.append(
                        {
                            "id": related_issue.id,
                            "project_id": related_issue.project_id,
                            "sequence_id": related_issue.sequence_id,
                            "name": related_issue.name,
                            "relation_type": relation.relation_type,
                            "state_id": related_issue.state_id,
                            "priority": related_issue.priority,
                            "created_by": related_issue.created_by_id,
                            "created_at": related_issue.created_at,
                            "updated_at": related_issue.updated_at,
                            "updated_by": related_issue.updated_by_id,
                        }
                    )
                data["issue_relation"] = relations

            if "issue_related" in self.expand:
                related = []
                for relation in instance.issue_related.all():
                    issue = relation.issue
                    if not issue:
                        continue
                    related.append(
                        {
                            "id": issue.id,
                            "project_id": issue.project_id,
                            "sequence_id": issue.sequence_id,
                            "name": issue.name,
                            "relation_type": relation.relation_type,
                            "state_id": issue.state_id,
                            "priority": issue.priority,
                            "created_by": issue.created_by_id,
                            "created_at": issue.created_at,
                            "updated_at": issue.updated_at,
                            "updated_by": issue.updated_by_id,
                        }
                    )
                data["issue_related"] = related

        return data
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T04:45:55.516Z
File: makeplane-plane-71ec9fa/apps/api/plane/app/serializers/issue.py
Functions Extracted: 3


Function 1: validate
Language: Python
Lines: 38
Full Code:
--------------------------------------------------------------------------------
def validate(self, attrs):
        if (
            attrs.get("start_date", None) is not None
            and attrs.get("target_date", None) is not None
            and attrs.get("start_date", None) > attrs.get("target_date", None)
        ):
            raise serializers.ValidationError("Start date cannot exceed target date")

        # Validate description content for security
        if "description_html" in attrs and attrs["description_html"]:
            is_valid, error_msg, sanitized_html = validate_html_content(attrs["description_html"])
            if not is_valid:
                raise serializers.ValidationError({"error": "html content is not valid"})
            # Update the attrs with sanitized HTML if available
            if sanitized_html is not None:
                attrs["description_html"] = sanitized_html

        if "description_binary" in attrs and attrs["description_binary"]:
            is_valid, error_msg = validate_binary_data(attrs["description_binary"])
            if not is_valid:
                raise serializers.ValidationError({"description_binary": "Invalid binary data"})

        # Validate assignees are from project
        if attrs.get("assignee_ids", []):
            attrs["assignee_ids"] = ProjectMember.objects.filter(
                project_id=self.context["project_id"],
                role__gte=15,
                is_active=True,
                member_id__in=attrs["assignee_ids"],
            ).values_list("member_id", flat=True)

        # Validate labels are from project
        if attrs.get("label_ids"):
            label_ids = [label.id for label in attrs["label_ids"]]
            attrs["label_ids"] = list(
                Label.objects.filter(
                    project_id=self.context.get("project_id"),
                    id__in=label_ids,
                ).values_list("id", flat=True)
            )

        # Check state is from the project only else raise validation error
        if (
            attrs.get("state")
            and not State.objects.filter(
                project_id=self.context.get("project_id"),
                pk=attrs.get("state").id,
            ).exists()
        ):
            raise serializers.ValidationError("State is not valid please pass a valid state_id")

        # Check parent issue is from workspace as it can be cross workspace
        if (
            attrs.get("parent")
            and not Issue.objects.filter(
                project_id=self.context.get("project_id"),
                pk=attrs.get("parent").id,
            ).exists()
        ):
            raise serializers.ValidationError("Parent is not valid issue_id please pass a valid issue_id")

        if (
            attrs.get("estimate_point")
            and not EstimatePoint.objects.filter(
                project_id=self.context.get("project_id"),
                pk=attrs.get("estimate_point").id,
            ).exists()
        ):
            raise serializers.ValidationError("Estimate point is not valid please pass a valid estimate_point_id")

        return attrs
--------------------------------------------------------------------------------


Function 2: create
Language: Python
Lines: 41
Full Code:
--------------------------------------------------------------------------------
def create(self, validated_data):
        assignees = validated_data.pop("assignee_ids", None)
        labels = validated_data.pop("label_ids", None)

        project_id = self.context["project_id"]
        workspace_id = self.context["workspace_id"]
        default_assignee_id = self.context["default_assignee_id"]

        # Create Issue
        issue = Issue.objects.create(**validated_data, project_id=project_id)

        # Issue Audit Users
        created_by_id = issue.created_by_id
        updated_by_id = issue.updated_by_id

        if assignees is not None and len(assignees):
            try:
                IssueAssignee.objects.bulk_create(
                    [
                        IssueAssignee(
                            assignee_id=assignee_id,
                            issue=issue,
                            project_id=project_id,
                            workspace_id=workspace_id,
                            created_by_id=created_by_id,
                            updated_by_id=updated_by_id,
                        )
                        for assignee_id in assignees
                    ],
                    batch_size=10,
                )
            except IntegrityError:
                pass
        else:
            # Then assign it to default assignee, if it is a valid assignee
            if (
                default_assignee_id is not None
                and ProjectMember.objects.filter(
                    member_id=default_assignee_id,
                    project_id=project_id,
                    role__gte=15,
                    is_active=True,
                ).exists()
            ):
                try:
                    IssueAssignee.objects.create(
                        assignee_id=default_assignee_id,
                        issue=issue,
                        project_id=project_id,
                        workspace_id=workspace_id,
                        created_by_id=created_by_id,
                        updated_by_id=updated_by_id,
                    )
                except IntegrityError:
                    pass

        if labels is not None and len(labels):
            try:
                IssueLabel.objects.bulk_create(
                    [
                        IssueLabel(
                            label_id=label_id,
                            issue=issue,
                            project_id=project_id,
                            workspace_id=workspace_id,
                            created_by_id=created_by_id,
                            updated_by_id=updated_by_id,
                        )
                        for label_id in labels
                    ],
                    batch_size=10,
                )
            except IntegrityError:
                pass

        return issue
--------------------------------------------------------------------------------


Function 3: update
Language: Python
Lines: 38
Full Code:
--------------------------------------------------------------------------------
def update(self, instance, validated_data):
        assignees = validated_data.pop("assignee_ids", None)
        labels = validated_data.pop("label_ids", None)

        # Related models
        project_id = instance.project_id
        workspace_id = instance.workspace_id
        created_by_id = instance.created_by_id
        updated_by_id = instance.updated_by_id

        if assignees is not None:
            IssueAssignee.objects.filter(issue=instance).delete()
            try:
                IssueAssignee.objects.bulk_create(
                    [
                        IssueAssignee(
                            assignee_id=assignee_id,
                            issue=instance,
                            project_id=project_id,
                            workspace_id=workspace_id,
                            created_by_id=created_by_id,
                            updated_by_id=updated_by_id,
                        )
                        for assignee_id in assignees
                    ],
                    batch_size=10,
                    ignore_conflicts=True,
                )
            except IntegrityError:
                pass

        if labels is not None:
            IssueLabel.objects.filter(issue=instance).delete()
            try:
                IssueLabel.objects.bulk_create(
                    [
                        IssueLabel(
                            label_id=label_id,
                            issue=instance,
                            project_id=project_id,
                            workspace_id=workspace_id,
                            created_by_id=created_by_id,
                            updated_by_id=updated_by_id,
                        )
                        for label_id in labels
                    ],
                    batch_size=10,
                    ignore_conflicts=True,
                )
            except IntegrityError:
                pass

        # Time updation occues even when other related models are updated
        instance.updated_at = timezone.now()
        return super().update(instance, validated_data)
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T04:46:32.507Z
File: makeplane-plane-71ec9fa/apps/api/plane/app/serializers/workspace.py
Functions Extracted: 7


Function 1: validate_slug
Language: Python
Lines: 8
Full Code:
--------------------------------------------------------------------------------
def validate_slug(self, value):
        # Check if the slug is restricted
        if value in RESTRICTED_WORKSPACE_SLUGS:
            raise serializers.ValidationError("Slug is not valid")
        # Slug should only contain alphanumeric characters, hyphens, and underscores
        if not re.match(r"^[a-zA-Z0-9_-]+$", value):
            raise serializers.ValidationError(
                "Slug can only contain letters, numbers, hyphens (-), and underscores (_)")
        return value
--------------------------------------------------------------------------------


Function 2: to_internal_value
Language: Python
Lines: 7
Full Code:
--------------------------------------------------------------------------------
def to_internal_value(self, data):
        url = data.get("url", "")
        if url and not url.startswith(("http://", "https://")):
            data["url"] = "http://" + url

        return super().to_internal_value(data)
--------------------------------------------------------------------------------


Function 3: validate_url
Language: Python
Lines: 7
Full Code:
--------------------------------------------------------------------------------
def validate_url(self, value):
        url_validator = URLValidator()
        try:
            url_validator(value)
        except ValidationError:
            raise serializers.ValidationError({"error": "Invalid URL format."})

        return value
--------------------------------------------------------------------------------


Function 4: create
Language: Python
Lines: 12
Full Code:
--------------------------------------------------------------------------------
def create(self, validated_data):
        # Filtering the WorkspaceUserLink with the given url to check if the link already exists.

        url = validated_data.get("url")

        workspace_user_link = WorkspaceUserLink.objects.filter(
            url=url,
            workspace_id=validated_data.get("workspace_id"),
            owner_id=validated_data.get("owner_id"),
        )

        if workspace_user_link.exists():
            raise serializers.ValidationError({"error": "URL already exists for this workspace and owner"})

        return super().create(validated_data)
--------------------------------------------------------------------------------


Function 5: update
Language: Python
Lines: 12
Full Code:
--------------------------------------------------------------------------------
def update(self, instance, validated_data):
        # Filtering the WorkspaceUserLink with the given url to check if the link already exists.

        url = validated_data.get("url")

        workspace_user_link = WorkspaceUserLink.objects.filter(
            url=url, workspace_id=instance.workspace_id, owner=instance.owner
        )

        if workspace_user_link.exclude(pk=instance.id).exists():
            raise serializers.ValidationError({"error": "URL already exists for this workspace and owner"})

        return super().update(instance, validated_data)
--------------------------------------------------------------------------------


Function 6: get_entity_data
Language: Python
Lines: 15
Full Code:
--------------------------------------------------------------------------------
def get_entity_data(self, obj):
        entity_name = obj.entity_name
        entity_identifier = obj.entity_identifier

        entity_model, entity_serializer = get_entity_model_and_serializer(entity_name)

        if entity_model and entity_serializer:
            try:
                entity = entity_model.objects.get(pk=entity_identifier)

                return entity_serializer(entity).data
            except entity_model.DoesNotExist:
                return None
        return None
--------------------------------------------------------------------------------


Function 7: validate
Language: Python
Lines: 15
Full Code:
--------------------------------------------------------------------------------
def validate(self, data):
        # Validate description content for security
        if "description_html" in data and data["description_html"]:
            is_valid, error_msg, sanitized_html = validate_html_content(data["description_html"])
            if not is_valid:
                raise serializers.ValidationError({"error": "html content is not valid"})
            # Update the data with sanitized HTML if available
            if sanitized_html is not None:
                data["description_html"] = sanitized_html

        if "description_binary" in data and data["description_binary"]:
            is_valid, error_msg = validate_binary_data(data["description_binary"])
            if not is_valid:
                raise serializers.ValidationError({"description_binary": "Invalid binary data"})

        return data
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T04:47:04.277Z
File: makeplane-plane-71ec9fa/apps/api/plane/api/serializers/issue.py
Functions Extracted: 8


Function 1: validate
Language: Python
Lines: 40
Full Code:
--------------------------------------------------------------------------------
def validate(self, data):
        if (
            data.get("start_date", None) is not None
            and data.get("target_date", None) is not None
            and data.get("start_date", None) > data.get("target_date", None)
        ):
            raise serializers.ValidationError("Start date cannot exceed target date")

        try:
            if data.get("description_html", None) is not None:
                parsed = html.fromstring(data["description_html"])
                parsed_str = html.tostring(parsed, encoding="unicode")
                data["description_html"] = parsed_str

        except Exception:
            raise serializers.ValidationError("Invalid HTML passed")

        # Validate description content for security
        if data.get("description_html"):
            is_valid, error_msg, sanitized_html = validate_html_content(data["description_html"])
            if not is_valid:
                raise serializers.ValidationError({"error": "html content is not valid"})
            # Update the data with sanitized HTML if available
            if sanitized_html is not None:
                data["description_html"] = sanitized_html

        if data.get("description_binary"):
            is_valid, error_msg = validate_binary_data(data["description_binary"])
            if not is_valid:
                raise serializers.ValidationError({"description_binary": "Invalid binary data"})

        # Validate assignees are from project
        if data.get("assignees", []):
            data["assignees"] = ProjectMember.objects.filter(
                project_id=self.context.get("project_id"),
                is_active=True,
                role__gte=15,
                member_id__in=data["assignees"],
            ).values_list("member_id", flat=True)

        # Validate labels are from project
        if data.get("labels", []):
            data["labels"] = Label.objects.filter(
                project_id=self.context.get("project_id"), id__in=data["labels"]
            ).values_list("id", flat=True)

        # Check state is from the project only else raise validation error
        if (
            data.get("state")
            and not State.objects.filter(project_id=self.context.get("project_id"), pk=data.get("state").id).exists()
        ):
            raise serializers.ValidationError("State is not valid please pass a valid state_id")

        # Check parent issue is from workspace as it can be cross workspace
        if (
            data.get("parent")
            and not Issue.objects.filter(
                workspace_id=self.context.get("workspace_id"),
                project_id=self.context.get("project_id"),
                pk=data.get("parent").id,
            ).exists()
        ):
            raise serializers.ValidationError("Parent is not valid issue_id please pass a valid issue_id")

        if (
            data.get("estimate_point")
            and not EstimatePoint.objects.filter(
                workspace_id=self.context.get("workspace_id"),
                project_id=self.context.get("project_id"),
                pk=data.get("estimate_point").id,
            ).exists()
        ):
            raise serializers.ValidationError("Estimate point is not valid please pass a valid estimate_point_id")

        return data
--------------------------------------------------------------------------------


Function 2: create
Language: Python
Lines: 39
Full Code:
--------------------------------------------------------------------------------
def create(self, validated_data):
        assignees = validated_data.pop("assignees", None)
        labels = validated_data.pop("labels", None)

        project_id = self.context["project_id"]
        workspace_id = self.context["workspace_id"]
        default_assignee_id = self.context["default_assignee_id"]

        issue_type = validated_data.pop("type", None)

        if not issue_type:
            # Get default issue type
            issue_type = IssueType.objects.filter(project_issue_types__project_id=project_id, is_default=True).first()
            issue_type = issue_type

        issue = Issue.objects.create(**validated_data, project_id=project_id, type=issue_type)

        # Issue Audit Users
        created_by_id = issue.created_by_id
        updated_by_id = issue.updated_by_id

        if assignees is not None and len(assignees):
            try:
                IssueAssignee.objects.bulk_create(
                    [
                        IssueAssignee(
                            assignee_id=assignee_id,
                            issue=issue,
                            project_id=project_id,
                            workspace_id=workspace_id,
                            created_by_id=created_by_id,
                            updated_by_id=updated_by_id,
                        )
                        for assignee_id in assignees
                    ],
                    batch_size=10,
                )
            except IntegrityError:
                pass
        else:
            try:
                # Then assign it to default assignee, if it is a valid assignee
                if (
                    default_assignee_id is not None
                    and ProjectMember.objects.filter(
                        member_id=default_assignee_id,
                        project_id=project_id,
                        role__gte=15,
                        is_active=True,
                    ).exists()
                ):
                    IssueAssignee.objects.create(
                        assignee_id=default_assignee_id,
                        issue=issue,
                        project_id=project_id,
                        workspace_id=workspace_id,
                        created_by_id=created_by_id,
                        updated_by_id=updated_by_id,
                    )
            except IntegrityError:
                pass

        if labels is not None and len(labels):
            try:
                IssueLabel.objects.bulk_create(
                    [
                        IssueLabel(
                            label_id=label_id,
                            issue=issue,
                            project_id=project_id,
                            workspace_id=workspace_id,
                            created_by_id=created_by_id,
                            updated_by_id=updated_by_id,
                        )
                        for label_id in labels
                    ],
                    batch_size=10,
                )
            except IntegrityError:
                pass

        return issue
--------------------------------------------------------------------------------


Function 3: update
Language: Python
Lines: 37
Full Code:
--------------------------------------------------------------------------------
def update(self, instance, validated_data):
        assignees = validated_data.pop("assignees", None)
        labels = validated_data.pop("labels", None)

        # Related models
        project_id = instance.project_id
        workspace_id = instance.workspace_id
        created_by_id = instance.created_by_id
        updated_by_id = instance.updated_by_id

        if assignees is not None:
            IssueAssignee.objects.filter(issue=instance).delete()
            try:
                IssueAssignee.objects.bulk_create(
                    [
                        IssueAssignee(
                            assignee_id=assignee_id,
                            issue=instance,
                            project_id=project_id,
                            workspace_id=workspace_id,
                            created_by_id=created_by_id,
                            updated_by_id=updated_by_id,
                        )
                        for assignee_id in assignees
                    ],
                    batch_size=10,
                    ignore_conflicts=True,
                )
            except IntegrityError:
                pass

        if labels is not None:
            IssueLabel.objects.filter(issue=instance).delete()
            try:
                IssueLabel.objects.bulk_create(
                    [
                        IssueLabel(
                            label_id=label_id,
                            issue=instance,
                            project_id=project_id,
                            workspace_id=workspace_id,
                            created_by_id=created_by_id,
                            updated_by_id=updated_by_id,
                        )
                        for label_id in labels
                    ],
                    batch_size=10,
                    ignore_conflicts=True,
                )
            except IntegrityError:
                pass

        # Time updation occues even when other related models are updated
        instance.updated_at = timezone.now()
        return super().update(instance, validated_data)
--------------------------------------------------------------------------------


Function 4: to_representation
Language: Python
Lines: 34
Full Code:
--------------------------------------------------------------------------------
def to_representation(self, instance):
        data = super().to_representation(instance)
        if "assignees" in self.fields:
            if "assignees" in self.expand:
                from .user import UserLiteSerializer

                data["assignees"] = UserLiteSerializer(
                    User.objects.filter(
                        pk__in=IssueAssignee.objects.filter(issue=instance).values_list("assignee_id", flat=True)
                    ),
                    many=True,
                ).data
            else:
                data["assignees"] = [
                    str(assignee)
                    for assignee in IssueAssignee.objects.filter(issue=instance).values_list("assignee_id", flat=True)
                ]
        if "labels" in self.fields:
            if "labels" in self.expand:
                data["labels"] = LabelSerializer(
                    Label.objects.filter(
                        pk__in=IssueLabel.objects.filter(issue=instance).values_list("label_id", flat=True)
                    ),
                    many=True,
                ).data
            else:
                data["labels"] = [
                    str(label) for label in IssueLabel.objects.filter(issue=instance).values_list("label_id", flat=True)
                ]

        return data
--------------------------------------------------------------------------------


Function 5: validate_url
Language: Python
Lines: 15
Full Code:
--------------------------------------------------------------------------------
def validate_url(self, value):
        # Check URL format
        validate_url = URLValidator()
        try:
            validate_url(value)
        except ValidationError:
            raise serializers.ValidationError("Invalid URL format.")

        # Check URL scheme
        if not value.startswith(("http://", "https://")):
            raise serializers.ValidationError("Invalid URL scheme.")

        return value
--------------------------------------------------------------------------------


Function 6: create
Language: Python
Lines: 9
Full Code:
--------------------------------------------------------------------------------
def create(self, validated_data):
        if IssueLink.objects.filter(url=validated_data.get("url"), issue_id=validated_data.get("issue_id")).exists():
            raise serializers.ValidationError({"error": "URL already exists for this Issue"})
        return IssueLink.objects.create(**validated_data)
--------------------------------------------------------------------------------


Function 7: update
Language: Python
Lines: 12
Full Code:
--------------------------------------------------------------------------------
def update(self, instance, validated_data):
        if (
            IssueLink.objects.filter(url=validated_data.get("url"), issue_id=instance.issue_id)
            .exclude(pk=instance.id)
            .exists()
        ):
            raise serializers.ValidationError({"error": "URL already exists for this Issue"})

        return super().update(instance, validated_data)
--------------------------------------------------------------------------------


Function 8: validate
Language: Python
Lines: 15
Full Code:
--------------------------------------------------------------------------------
def validate(self, data):
        try:
            if data.get("comment_html", None) is not None:
                parsed = html.fromstring(data["comment_html"])
                parsed_str = html.tostring(parsed, encoding="unicode")
                data["comment_html"] = parsed_str

        except Exception:
            raise serializers.ValidationError("Invalid HTML passed")
        return data
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T04:47:17.438Z
File: makeplane-plane-71ec9fa/apps/api/plane/app/serializers/project.py
Functions Extracted: 5


Function 1: validate_name
Language: Python
Lines: 12
Full Code:
--------------------------------------------------------------------------------
def validate_name(self, name):
        project_id = self.instance.id if self.instance else None
        workspace_id = self.context["workspace_id"]

        project = Project.objects.filter(name=name, workspace_id=workspace_id)

        if project_id:
            project = project.exclude(id=project_id)

        if project.exists():
            raise serializers.ValidationError(
                detail="PROJECT_NAME_ALREADY_EXIST",
            )

        return name
--------------------------------------------------------------------------------


Function 2: validate_identifier
Language: Python
Lines: 12
Full Code:
--------------------------------------------------------------------------------
def validate_identifier(self, identifier):
        project_id = self.instance.id if self.instance else None
        workspace_id = self.context["workspace_id"]

        project = Project.objects.filter(identifier=identifier, workspace_id=workspace_id)

        if project_id:
            project = project.exclude(id=project_id)

        if project.exists():
            raise serializers.ValidationError(
                detail="PROJECT_IDENTIFIER_ALREADY_EXIST",
            )

        return identifier
--------------------------------------------------------------------------------


Function 3: validate
Language: Python
Lines: 12
Full Code:
--------------------------------------------------------------------------------
def validate(self, data):
        # Validate description content for security
        if "description_html" in data and data["description_html"]:
            is_valid, error_msg, sanitized_html = validate_html_content(str(data["description_html"]))
            # Update the data with sanitized HTML if available
            if sanitized_html is not None:
                data["description_html"] = sanitized_html

            if not is_valid:
                raise serializers.ValidationError({"error": "html content is not valid"})

        return data
--------------------------------------------------------------------------------


Function 4: create
Language: Python
Lines: 10
Full Code:
--------------------------------------------------------------------------------
def create(self, validated_data):
        workspace_id = self.context["workspace_id"]

        project = Project.objects.create(**validated_data, workspace_id=workspace_id)

        ProjectIdentifier.objects.create(name=project.identifier, project=project, workspace_id=workspace_id)

        return project
--------------------------------------------------------------------------------


Function 5: get_members
Language: Python
Lines: 9
Full Code:
--------------------------------------------------------------------------------
def get_members(self, obj):
        project_members = getattr(obj, "members_list", None)
        if project_members is not None:
            # Filter members by the project ID
            return [member.member_id for member in project_members if member.is_active and not member.member.is_bot]
        return []
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:47:23.994Z
Question Type: multiple-choice
Function: validate
Function Size: 482 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: validate (Python)\n// Validates and sanitizes the comment HTML content.\n\ndef validate(self, data):\n        try:\n            if data.get("comment_html", None) is not None:\n                parsed = html.fromstring(data["comment_html"])\n                parsed_str = html.tostring(parsed, enc
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:47:26.029Z
Question Type: multiple-choice
Function: create
Function Size: 398 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: create (Python)\n// Creates a new project and its identifier in the database.\n\ndef create(self, validated_data):\n        workspace_id = self.context["workspace_id"]\n\n        project = Project.objects.create(**validated_data, workspace_id=workspace_id)\n\n        ProjectIdentifier.objects.c
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:47:26.117Z
Question Type: multiple-choice
Function: create
Function Size: 2902 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: create (Python)\n// Creates a new issue and assigns assignees and labels.\n\ndef create(self, validated_data):\n        assignees = validated_data.pop("assignee_ids", None)\n        labels = validated_data.pop("label_ids", None)\n\n        project_id = self.context["project_id"]\n        worksp
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:47:27.307Z
Question Type: multiple-choice
Function: create
Function Size: 3229 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: create (Python)\n// Creates a new issue, handling assignees and labels, and assigns default if none provided.\n\ndef create(self, validated_data):\n        assignees = validated_data.pop("assignees", None)\n        labels = validated_data.pop("labels", None)\n\n        project_id = self.contex
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:47:37.981Z
Question Type: select-all
Function: validate_identifier
Function Size: 621 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: validate_identifier (Python)\n// Validates that the project identifier is unique within the workspace.\n\ndef validate_identifier(self, identifier):\n        project_id = self.instance.id if self.instance else None\n        workspace_id = self.context["workspace_id"]\n\n        project = Proje
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:47:41.192Z
Question Type: true-false
Function: update
Function Size: 662 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: update (Python)\n// Updates a WorkspaceUserLink after checking for existing links.\n\ndef update(self, instance, validated_data):\n        # Filtering the WorkspaceUserLink with the given url to check if the link already exists.\n\n        url = validated_data.get("url")\n\n        workspace_us
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:47:45.205Z
Question Type: true-false
Function: validate
Function Size: 922 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: validate (Python)\n// Validates the content of description fields for security.\n\ndef validate(self, data):\n        # Validate description content for security\n        if "description_html" in data and data["description_html"]:\n            is_valid, error_msg, sanitized_html = validate_ht
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:47:47.042Z
Question Type: multiple-choice
Function: validate
Function Size: 666 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: validate (Python)\n// Validates the project data, specifically the HTML content of the description.\n\ndef validate(self, data):\n        # Validate description content for security\n        if "description_html" in data and data["description_html"]:\n            is_valid, error_msg, sanitize
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:47:48.900Z
Question Type: function-variant
Function: validate_url
Function Size: 402 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: validate_url (Python)\n// Validates the URL format using Django's URLValidator.\n\ndef validate_url(self, value):\n        # Use Django's built-in URLValidator for validation\n        url_validator = URLValidator()\n        try:\n            url_validator(value)\n        except ValidationError:
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:47:54.408Z
Question Type: multiple-choice
Function: create
Function Size: 415 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: create (Python)\n// Creates a new IssueLink if the URL does not already exist for the given issue.\n\ndef create(self, validated_data):\n        if IssueLink.objects.filter(url=validated_data.get("url"), issue_id=validated_data.get("issue_id")).exists():\n            raise serializers.Valida
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760071527111
Repository: Unknown
Total Questions Generated: 16
Total Chunks Processed: 27
Ended: 2025-10-10T04:47:56.765Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T05:05:10.291Z
File: laravel-laravel-b45fe69/database/factories/UserFactory.php
Functions Extracted: 2


Function 1: definition
Language: PHP
Lines: 10
Full Code:
--------------------------------------------------------------------------------
public function definition(): array {
        return [
            'name' => fake()->name(),
            'email' => fake()->unique()->safeEmail(),
            'email_verified_at' => now(),
            'password' => static::$password ??= Hash::make('password'),
            'remember_token' => Str::random(10),
        ];
    }
--------------------------------------------------------------------------------


Function 2: unverified
Language: PHP
Lines: 6
Full Code:
--------------------------------------------------------------------------------
public function unverified(): static {
        return $this->state(fn (array $attributes) => [
            'email_verified_at' => null,
        ]);
    }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T05:05:18.232Z
File: laravel-laravel-b45fe69/database/migrations/0001_01_01_000000_create_users_table.php
Functions Extracted: 2


Function 1: up
Language: PHP
Lines: 22
Full Code:
--------------------------------------------------------------------------------
public function up(): void {
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->rememberToken();
            $table->timestamps();
        });

        Schema::create('password_reset_tokens', function (Blueprint $table) {
            $table->string('email')->primary();
            $table->string('token');
            $table->timestamp('created_at')->nullable();
        });

        Schema::create('sessions', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->foreignId('user_id')->nullable()->index();
            $table->string('ip_address', 45)->nullable();
            $table->text('user_agent')->nullable();
            $table->longText('payload');
            $table->integer('last_activity')->index();
        });
    }
--------------------------------------------------------------------------------


Function 2: down
Language: PHP
Lines: 6
Full Code:
--------------------------------------------------------------------------------
public function down(): void {
        Schema::dropIfExists('users');
        Schema::dropIfExists('password_reset_tokens');
        Schema::dropIfExists('sessions');
    }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T05:05:23.505Z
File: laravel-laravel-b45fe69/database/migrations/0001_01_01_000001_create_cache_table.php
Functions Extracted: 2


Function 1: up
Language: PHP
Lines: 12
Full Code:
--------------------------------------------------------------------------------
public function up(): void {
        Schema::create('cache', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->mediumText('value');
            $table->integer('expiration');
        });

        Schema::create('cache_locks', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->string('owner');
            $table->integer('expiration');
        });
    }
--------------------------------------------------------------------------------


Function 2: down
Language: PHP
Lines: 6
Full Code:
--------------------------------------------------------------------------------
public function down(): void {
        Schema::dropIfExists('cache');
        Schema::dropIfExists('cache_locks');
    }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T05:05:32.766Z
File: laravel-laravel-b45fe69/database/migrations/0001_01_01_000002_create_jobs_table.php
Functions Extracted: 2


Function 1: up
Language: PHP
Lines: 24
Full Code:
--------------------------------------------------------------------------------
public function up(): void {
        Schema::create('jobs', function (Blueprint $table) {
            $table->id();
            $table->string('queue')->index();
            $table->longText('payload');
            $table->unsignedTinyInteger('attempts');
            $table->unsignedInteger('reserved_at')->nullable();
            $table->unsignedInteger('available_at');
            $table->unsignedInteger('created_at');
        });

        Schema::create('job_batches', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->string('name');
            $table->integer('total_jobs');
            $table->integer('pending_jobs');
            $table->integer('failed_jobs');
            $table->longText('failed_job_ids');
            $table->mediumText('options')->nullable();
            $table->integer('cancelled_at')->nullable();
            $table->integer('created_at');
            $table->integer('finished_at')->nullable();
        });

        Schema::create('failed_jobs', function (Blueprint $table) {
            $table->id();
            $table->string('uuid')->unique();
            $table->text('connection');
            $table->text('queue');
            $table->longText('payload');
            $table->longText('exception');
            $table->timestamp('failed_at')->useCurrent();
        });
    }
--------------------------------------------------------------------------------


Function 2: down
Language: PHP
Lines: 6
Full Code:
--------------------------------------------------------------------------------
public function down(): void {
        Schema::dropIfExists('jobs');
        Schema::dropIfExists('job_batches');
        Schema::dropIfExists('failed_jobs');
    }
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T05:05:39.569Z
Question Type: true-false
Function: down
Function Size: 279 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: down (PHP)\n// Drops the users, password reset tokens, and sessions tables from the database.\n\npublic function down(): void {\n        Schema::dropIfExists('users');\n        Schema::dropIfExists('password_reset_tokens');\n        Schema::dropIfExists('sessions');\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T05:05:43.414Z
Question Type: multiple-choice
Function: down
Function Size: 279 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: down (PHP)\n// Drops the users, password reset tokens, and sessions tables from the database.\n\npublic function down(): void {\n        Schema::dropIfExists('users');\n        Schema::dropIfExists('password_reset_tokens');\n        Schema::dropIfExists('sessions');\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T05:05:43.757Z
Question Type: function-variant
Function: down
Function Size: 206 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: down (PHP)\n// Drops the cache and cache_locks tables from the database.\n\npublic function down(): void {\n        Schema::dropIfExists('cache');\n        Schema::dropIfExists('cache_locks');\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T05:05:44.730Z
Question Type: multiple-choice
Function: up
Function Size: 1122 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: up (PHP)\n// Creates the users, password reset tokens, and sessions tables in the database.\n\npublic function up(): void {\n        Schema::create('users', function (Blueprint $table) {\n            $table->id();\n            $table->string('name');\n            $table->string('email')->uniqu
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T05:05:51.763Z
Question Type: multiple-choice
Function: up
Function Size: 529 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: up (PHP)\n// Creates the cache and cache_locks tables in the database.\n\npublic function up(): void {\n        Schema::create('cache', function (Blueprint $table) {\n            $table->string('key')->primary();\n            $table->mediumText('value');\n            $table->integer('expiratio
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T05:05:57.335Z
Question Type: multiple-choice
Function: definition
Function Size: 406 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: definition (PHP)\n// Defines the default state for the User model.\n\npublic function definition(): array {\n        return [\n            'name' => fake()->name(),\n            'email' => fake()->unique()->safeEmail(),\n            'email_verified_at' => now(),\n            'password' => stati
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T05:05:57.899Z
Question Type: order-sequence
Function: down
Function Size: 263 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: down (PHP)\n// Drops the jobs, job_batches, and failed_jobs tables from the database.\n\npublic function down(): void {\n        Schema::dropIfExists('jobs');\n        Schema::dropIfExists('job_batches');\n        Schema::dropIfExists('failed_jobs');\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T05:05:59.952Z
Question Type: multiple-choice
Function: definition
Function Size: 406 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: definition (PHP)\n// Defines the default state for the User model.\n\npublic function definition(): array {\n        return [\n            'name' => fake()->name(),\n            'email' => fake()->unique()->safeEmail(),\n            'email_verified_at' => now(),\n            'password' => stati
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760071527111
Repository: Unknown
Total Questions Generated: 16
Total Chunks Processed: 8
Ended: 2025-10-10T05:06:04.946Z
================================================================================

