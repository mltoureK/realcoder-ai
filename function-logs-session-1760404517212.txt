=== FUNCTION EXTRACTION & QUESTION GENERATION LOG ===
Session ID: session-1760404517212
Started: 2025-10-14T01:15:17.212Z


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-14T01:15:17.213Z
File: [8 files: ViewEmployeeComponent.jsx, UpdateEmployeeComponent.jsx, App.js, setupTests.js, Service worker found. Proceed as normal., Execute callback, serviceWorker.js, ResourceNotFoundException.java]
Functions Extracted: 5


Function 1: componentDidMount
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
componentDidMount(){
        EmployeeService.getEmployeeById(this.state.id).then( res => {
            this.setState({employee: res.data});
        })
    }
--------------------------------------------------------------------------------


Function 2: componentDidMount
Language: JavaScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
componentDidMount(){
        EmployeeService.getEmployeeById(this.state.id).then( (res) =>{
            let employee = res.data;
            this.setState({firstName: employee.firstName,
                lastName: employee.lastName,
                emailId : employee.emailId
            });
        });
    }
--------------------------------------------------------------------------------


Function 3: updateEmployee
Language: JavaScript
Lines: 9
Full Code:
--------------------------------------------------------------------------------
updateEmployee = (e) => {
        e.preventDefault();
        let employee = {firstName: this.state.firstName, lastName: this.state.lastName, emailId: this.state.emailId};
        console.log('employee => ' + JSON.stringify(employee));
        console.log('id => ' + JSON.stringify(this.state.id));
        EmployeeService.updateEmployee(employee, this.state.id).then( res => {
            this.props.history.push('/employees');
        });
    }
--------------------------------------------------------------------------------


Function 4: render
Language: JavaScript
Lines: 28
Full Code:
--------------------------------------------------------------------------------
render() {
        return (
            <div>
                <br></br>
                   <div className = "container">
                        <div className = "row">
                            <div className = "card col-md-6 offset-md-3 offset-md-3">
                                <h3 className="text-center">Update Employee</h3>
                                <div className = "card-body">
                                    <form>
                                        <div className = "form-group">
                                            <label> First Name: </label>
                                            <input placeholder="First Name" name="firstName" className="form-control" 
                                                value={this.state.firstName} onChange={this.changeFirstNameHandler}/>
                                        </div>
                                        <div className = "form-group">
                                            <label> Last Name: </label>
                                            <input placeholder="Last Name" name="lastName" className="form-control" 
                                                value={this.state.lastName} onChange={this.changeLastNameHandler}/>
                                        </div>
                                        <div className = "form-group">
                                            <label> Email Id: </label>
                                            <input placeholder="Email Address" name="emailId" className="form-control" 
                                                value={this.state.emailId} onChange={this.changeEmailHandler}/>
                                        </div>

                                        <button className="btn btn-success" onClick={this.updateEmployee}>Save</button>
                                        <button className="btn btn-danger" onClick={this.cancel.bind(this)} style={{marginLeft: "10px"}}>Cancel</button>
                                    </form>
                                </div>
                            </div>
                        </div>

                   </div>
            </div>
        )
    }
--------------------------------------------------------------------------------


Function 5: App
Language: JavaScript
Lines: 17
Full Code:
--------------------------------------------------------------------------------
function App() {
  return (
    <div>
        <Router>
              <HeaderComponent />
                <div className="container">
                    <Switch> 
                          <Route path = "/" exact component = {ListEmployeeComponent}></Route>
                          <Route path = "/employees" component = {ListEmployeeComponent}></Route>
                          <Route path = "/add-employee/:id" component = {CreateEmployeeComponent}></Route>
                          <Route path = "/view-employee/:id" component = {ViewEmployeeComponent}></Route>
                          {/* <Route path = "/update-employee/:id" component = {UpdateEmployeeComponent}></Route> */}
                    </Switch>
                </div>
              <FooterComponent />
        </Router>
    </div>
  );
}
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T01:15:24.105Z
Question Type: true-false
Function: App
Function Size: 924 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: App (JavaScript)\n// Main application component that sets up routing for the employee management app.\n\nfunction App() {\n  return (\n    <div>\n        <Router>\n              <HeaderComponent />\n                <div className="container">\n                    <Switch> \n                      
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T01:15:24.623Z
Question Type: true-false
Function: updateEmployee
Function Size: 563 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: updateEmployee (JavaScript)\n// Handles the employee update process and redirects to the employee list.\n\nupdateEmployee = (e) => {\n        e.preventDefault();\n        let employee = {firstName: this.state.firstName, lastName: this.state.lastName, emailId: this.state.emailId};\n        con
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T01:15:25.609Z
Question Type: select-all
Function: componentDidMount
Function Size: 259 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches employee data by ID when the component mounts.\n\ncomponentDidMount(){\n        EmployeeService.getEmployeeById(this.state.id).then( res => {\n            this.setState({employee: res.data});\n        })\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T01:15:29.561Z
Question Type: function-variant
Function: componentDidMount
Function Size: 416 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches employee data by ID and sets state for update form.\n\ncomponentDidMount(){\n        EmployeeService.getEmployeeById(this.state.id).then( (res) =>{\n            let employee = res.data;\n            this.setState({firstName: employee.firstName,\n     
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T01:15:31.943Z
Question Type: multiple-choice
Function: componentDidMount
Function Size: 259 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches employee data by ID when the component mounts.\n\ncomponentDidMount(){\n        EmployeeService.getEmployeeById(this.state.id).then( res => {\n            this.setState({employee: res.data});\n        })\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T01:15:35.114Z
Question Type: select-all
Function: updateEmployee
Function Size: 563 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: updateEmployee (JavaScript)\n// Handles the employee update process and redirects to the employee list.\n\nupdateEmployee = (e) => {\n        e.preventDefault();\n        let employee = {firstName: this.state.firstName, lastName: this.state.lastName, emailId: this.state.emailId};\n        con
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T01:15:36.574Z
Question Type: select-all
Function: componentDidMount
Function Size: 416 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches employee data by ID and sets state for update form.\n\ncomponentDidMount(){\n        EmployeeService.getEmployeeById(this.state.id).then( (res) =>{\n            let employee = res.data;\n            this.setState({firstName: employee.firstName,\n     
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T01:15:45.557Z
Question Type: order-sequence
Function: componentDidMount
Function Size: 416 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches employee data by ID and sets state for update form.\n\ncomponentDidMount(){\n        EmployeeService.getEmployeeById(this.state.id).then( (res) =>{\n            let employee = res.data;\n            this.setState({firstName: employee.firstName,\n     
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760404517212
Repository: Unknown
Total Questions Generated: 10
Total Chunks Processed: 5
Ended: 2025-10-14T01:15:45.601Z
================================================================================


--- QUESTION GENERATION ---
Timestamp: 2025-10-14T01:15:52.743Z
Question Type: true-false
Function: App
Function Size: 924 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: App (JavaScript)\n// Main application component that sets up routing for the employee management app.\n\nfunction App() {\n  return (\n    <div>\n        <Router>\n              <HeaderComponent />\n                <div className="container">\n                    <Switch> \n                      
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T01:15:52.838Z
Question Type: select-all
Function: updateEmployee
Function Size: 563 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: updateEmployee (JavaScript)\n// Handles the employee update process and redirects to the employee list.\n\nupdateEmployee = (e) => {\n        e.preventDefault();\n        let employee = {firstName: this.state.firstName, lastName: this.state.lastName, emailId: this.state.emailId};\n        con
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T01:15:57.746Z
Question Type: function-variant
Function: componentDidMount
Function Size: 259 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches employee data by ID when the component mounts.\n\ncomponentDidMount(){\n        EmployeeService.getEmployeeById(this.state.id).then( res => {\n            this.setState({employee: res.data});\n        })\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T01:16:03.491Z
Question Type: select-all
Function: App
Function Size: 924 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: App (JavaScript)\n// Main application component that sets up routing for the employee management app.\n\nfunction App() {\n  return (\n    <div>\n        <Router>\n              <HeaderComponent />\n                <div className="container">\n                    <Switch> \n                      
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T01:16:08.287Z
Question Type: select-all
Function: componentDidMount
Function Size: 259 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches employee data by ID when the component mounts.\n\ncomponentDidMount(){\n        EmployeeService.getEmployeeById(this.state.id).then( res => {\n            this.setState({employee: res.data});\n        })\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T01:16:08.293Z
Question Type: function-variant
Function: updateEmployee
Function Size: 563 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: updateEmployee (JavaScript)\n// Handles the employee update process and redirects to the employee list.\n\nupdateEmployee = (e) => {\n        e.preventDefault();\n        let employee = {firstName: this.state.firstName, lastName: this.state.lastName, emailId: this.state.emailId};\n        con
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T01:16:15.553Z
Question Type: true-false
Function: componentDidMount
Function Size: 416 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches employee data by ID and sets state for update form.\n\ncomponentDidMount(){\n        EmployeeService.getEmployeeById(this.state.id).then( (res) =>{\n            let employee = res.data;\n            this.setState({firstName: employee.firstName,\n     
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760404517212
Repository: Unknown
Total Questions Generated: 7
Total Chunks Processed: 5
Ended: 2025-10-14T01:16:15.582Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-14T01:36:19.758Z
File: [8 files: ResourceNotFoundException.java, setupTests.js, serviceWorker.js, CreateEmployeeComponent.jsx, ListEmployeeComponent.jsx, SpringbootBackendApplicationTests.java, Is not localhost. Just register service worker, FooterComponent.jsx]
Functions Extracted: 2


Function 1: deleteEmployee
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
deleteEmployee(id){
        EmployeeService.deleteEmployee(id).then( res => {
            this.setState({employees: this.state.employees.filter(employee => employee.id !== id)});
        });
    }
--------------------------------------------------------------------------------


Function 2: componentDidMount
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
componentDidMount(){
        EmployeeService.getEmployees().then((res) => {
            this.setState({ employees: res.data});
        });
    }
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T01:36:23.776Z
Question Type: true-false
Function: deleteEmployee
Function Size: 290 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: deleteEmployee (JavaScript)\n// Deletes an employee by id and updates the state.\n\ndeleteEmployee(id){\n        EmployeeService.deleteEmployee(id).then( res => {\n            this.setState({employees: this.state.employees.filter(employee => employee.id !== id)});\n        });\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T01:36:24.146Z
Question Type: true-false
Function: componentDidMount
Function Size: 249 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches the list of employees when the component mounts.\n\ncomponentDidMount(){\n        EmployeeService.getEmployees().then((res) => {\n            this.setState({ employees: res.data});\n        });\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T01:36:29.049Z
Question Type: select-all
Function: deleteEmployee
Function Size: 290 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: deleteEmployee (JavaScript)\n// Deletes an employee by id and updates the state.\n\ndeleteEmployee(id){\n        EmployeeService.deleteEmployee(id).then( res => {\n            this.setState({employees: this.state.employees.filter(employee => employee.id !== id)});\n        });\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T01:36:31.544Z
Question Type: order-sequence
Function: deleteEmployee
Function Size: 290 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: deleteEmployee (JavaScript)\n// Deletes an employee by id and updates the state.\n\ndeleteEmployee(id){\n        EmployeeService.deleteEmployee(id).then( res => {\n            this.setState({employees: this.state.employees.filter(employee => employee.id !== id)});\n        });\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T01:36:32.537Z
Question Type: select-all
Function: deleteEmployee
Function Size: 290 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: deleteEmployee (JavaScript)\n// Deletes an employee by id and updates the state.\n\ndeleteEmployee(id){\n        EmployeeService.deleteEmployee(id).then( res => {\n            this.setState({employees: this.state.employees.filter(employee => employee.id !== id)});\n        });\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T01:36:32.862Z
Question Type: select-all
Function: componentDidMount
Function Size: 249 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches the list of employees when the component mounts.\n\ncomponentDidMount(){\n        EmployeeService.getEmployees().then((res) => {\n            this.setState({ employees: res.data});\n        });\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T01:36:40.013Z
Question Type: function-variant
Function: componentDidMount
Function Size: 249 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches the list of employees when the component mounts.\n\ncomponentDidMount(){\n        EmployeeService.getEmployees().then((res) => {\n            this.setState({ employees: res.data});\n        });\n    }
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760404517212
Repository: Unknown
Total Questions Generated: 7
Total Chunks Processed: 2
Ended: 2025-10-14T01:36:40.052Z
================================================================================


--- QUESTION GENERATION ---
Timestamp: 2025-10-14T01:36:45.518Z
Question Type: true-false
Function: deleteEmployee
Function Size: 290 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: deleteEmployee (JavaScript)\n// Deletes an employee by id and updates the state.\n\ndeleteEmployee(id){\n        EmployeeService.deleteEmployee(id).then( res => {\n            this.setState({employees: this.state.employees.filter(employee => employee.id !== id)});\n        });\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T01:36:49.176Z
Question Type: select-all
Function: deleteEmployee
Function Size: 290 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: deleteEmployee (JavaScript)\n// Deletes an employee by id and updates the state.\n\ndeleteEmployee(id){\n        EmployeeService.deleteEmployee(id).then( res => {\n            this.setState({employees: this.state.employees.filter(employee => employee.id !== id)});\n        });\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T01:36:50.441Z
Question Type: function-variant
Function: deleteEmployee
Function Size: 290 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: deleteEmployee (JavaScript)\n// Deletes an employee by id and updates the state.\n\ndeleteEmployee(id){\n        EmployeeService.deleteEmployee(id).then( res => {\n            this.setState({employees: this.state.employees.filter(employee => employee.id !== id)});\n        });\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T01:36:52.983Z
Question Type: order-sequence
Function: componentDidMount
Function Size: 249 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches the list of employees when the component mounts.\n\ncomponentDidMount(){\n        EmployeeService.getEmployees().then((res) => {\n            this.setState({ employees: res.data});\n        });\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T01:36:56.520Z
Question Type: select-all
Function: componentDidMount
Function Size: 249 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches the list of employees when the component mounts.\n\ncomponentDidMount(){\n        EmployeeService.getEmployees().then((res) => {\n            this.setState({ employees: res.data});\n        });\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T01:36:57.644Z
Question Type: function-variant
Function: componentDidMount
Function Size: 249 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches the list of employees when the component mounts.\n\ncomponentDidMount(){\n        EmployeeService.getEmployees().then((res) => {\n            this.setState({ employees: res.data});\n        });\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T01:37:00.501Z
Question Type: multiple-choice
Function: componentDidMount
Function Size: 249 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches the list of employees when the component mounts.\n\ncomponentDidMount(){\n        EmployeeService.getEmployees().then((res) => {\n            this.setState({ employees: res.data});\n        });\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T01:37:00.697Z
Question Type: function-variant
Function: deleteEmployee
Function Size: 290 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: deleteEmployee (JavaScript)\n// Deletes an employee by id and updates the state.\n\ndeleteEmployee(id){\n        EmployeeService.deleteEmployee(id).then( res => {\n            this.setState({employees: this.state.employees.filter(employee => employee.id !== id)});\n        });\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T01:37:05.823Z
Question Type: select-all
Function: componentDidMount
Function Size: 249 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches the list of employees when the component mounts.\n\ncomponentDidMount(){\n        EmployeeService.getEmployees().then((res) => {\n            this.setState({ employees: res.data});\n        });\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T01:37:09.176Z
Question Type: select-all
Function: deleteEmployee
Function Size: 290 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: deleteEmployee (JavaScript)\n// Deletes an employee by id and updates the state.\n\ndeleteEmployee(id){\n        EmployeeService.deleteEmployee(id).then( res => {\n            this.setState({employees: this.state.employees.filter(employee => employee.id !== id)});\n        });\n    }
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760404517212
Repository: Unknown
Total Questions Generated: 9
Total Chunks Processed: 2
Ended: 2025-10-14T01:37:09.189Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-14T02:29:43.156Z
File: microsoft-TypeScript-0b6a241/src/testRunner/unittests/helpers/tsserver.ts
Functions Extracted: 2


Function 1: patchHostTimeouts
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export function patchHostTimeouts(
    inputHost: TestServerHostTrackingWrittenFiles,
    session: TestSession | undefined,
    logger: LoggerWithInMemoryLogs,
): TestSessionAndServiceHost {
    const host = inputHost as TestSessionAndServiceHost;
    host.service = session?.getProjectService();
    if (session) patchServiceForStateBaseline(session.getProjectService());
    if (host.patched) return host;
    host.patched = true;
    if (!logger.hasLevel(ts.server.LogLevel.verbose)) {
        host.baselineHost = ts.notImplemented;
        return host;
    }

    host.switchToBaseliningInvoke(logger, SerializeOutputOrder.None);
    host.baselineHost = baselineHost;
    host.patched = true;
    return host;

    function baselineHost(title: string) {
        logger.log(title);
        host.serializeState(logger.logs, SerializeOutputOrder.None);
    }
}
--------------------------------------------------------------------------------


Function 2: patchSessionToHandleWatchEvents
Language: TypeScript
Lines: 54
Full Code:
--------------------------------------------------------------------------------
function patchSessionToHandleWatchEvents(session: TestSession) {
    const event = session.event;
    const idToClose = new Map<number, () => void>();
    session.event = (data, eventName) => {
        event.call(session, data, eventName);
        switch (eventName) {
            case ts.server.CreateFileWatcherEvent:
                watchFile(data as ts.server.protocol.CreateFileWatcherEventBody);
                break;
            case ts.server.CreateDirectoryWatcherEvent:
                watchDirectory(data as ts.server.protocol.CreateDirectoryWatcherEventBody);
                break;
            case ts.server.CloseFileWatcherEvent:
                closeWatcher(data as ts.server.protocol.CloseFileWatcherEventBody);
                break;
            default:
                break;
        }
    };

    function watchFile(event: ts.server.protocol.CreateFileWatcherEventBody) {
        createWatcher(
            "watchFile",
            event,
            recordChange =>
                session.host.watchUtils.pollingWatch(
                    session.host.toNormalizedAbsolutePath(event.path),
                    {
                        cb: (fileName, eventKind) =>
                            recordChange(
                                event.id,
                                session.host.windowsStyleRoot ?
                                    path.win32.resolve(fileName) :
                                    path.posix.resolve(fileName),
                                eventKind === ts.FileWatcherEventKind.Created ?
                                    "created" :
                                    eventKind === ts.FileWatcherEventKind.Deleted ? "deleted" : "updated",
                                /*ignoreUpdate*/ false,
                            ),
                        pollingInterval: undefined!,
                        event,
                    },
                ),
        );
    }

    function watchDirectory(event: ts.server.protocol.CreateDirectoryWatcherEventBody) {
        createWatcher(
            "watchDirectory",
            event,
            recordChange =>
                session.host.watchUtils.fsWatch(
                    session.host.toNormalizedAbsolutePath(event.path),
                    event.recursive,
                    {
                        cb: (eventName, relativeFileName) => {
                            if (!relativeFileName) return;
                            const fileName = session.host.windowsStyleRoot ?
                                path.win32.join(event.path, relativeFileName) :
                                path.posix.join(event.path, relativeFileName);
                            if (eventName === "change") {
                                recordChange(
                                    event.id,
                                    fileName,
                                    "updated",
                                    !!event.ignoreUpdate,
                                );
                            }
                            else {
                                recordChange(
                                    event.id,
                                    fileName,
                                    session.host.fileExists(fileName) || session.host.directoryExists(fileName) ?
                                        "created" :
                                        "deleted",
                                    !!event.ignoreUpdate,
                                );
                            }
                        },
                        inode: undefined,
                        event,
                    },
                ),
        );
    }

    function createWatcher(
        watchType: string,
        event: ts.server.protocol.CreateFileWatcherEventBody | ts.server.protocol.CreateDirectoryWatcherEventBody,
        create: (
            recordChange: (
                id: number,
                file: string,
                eventType: "created" | "deleted" | "updated",
                ignoreUpdate: boolean,
            ) => void,
        ) => ts.FileWatcher,
    ) {
        session.logger.log(`Custom ${watchType}:: Added:: ${JSON.stringify(event)}`);
        ts.Debug.assert(!idToClose.has(event.id));
        const result = create((id, file, eventType, ignoreUpdate) => {
            const ignored = eventType === "updated" && ignoreUpdate;
            session.logger.log(`Custom ${watchType}:: Triggered${ignoreUpdate ? " Ignored" : ""}:: ${JSON.stringify(event)}:: ${file} ${eventType}`);
            if (!ignored) {
                let watchChange = session.watchChanges.get(id);
                if (!watchChange) session.watchChanges.set(id, watchChange = { id });
                (watchChange[eventType] ??= []).push(file);
            }
        });
        idToClose.set(event.id, () => {
            session.logger.log(`Custom ${watchType}:: Close:: ${JSON.stringify(event)}`);
            result.close();
        });
    }

    function closeWatcher(data: ts.server.protocol.CloseFileWatcherEventBody) {
        const close = idToClose.get(data.id);
        if (close) {
            idToClose.delete(data.id);
            close();
        }
    }
}
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T02:29:54.023Z
Question Type: order-sequence
Function: patchSessionToHandleWatchEvents
Function Size: 5353 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: patchSessionToHandleWatchEvents (TypeScript)\n// Patches the session to handle file and directory watch events.\n\nfunction patchSessionToHandleWatchEvents(session: TestSession) {\n    const event = session.event;\n    const idToClose = new Map<number, () => void>();\n    session.event = (dat
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T02:29:54.142Z
Question Type: true-false
Function: patchHostTimeouts
Function Size: 953 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: patchHostTimeouts (TypeScript)\n// Patches host timeouts for the test session.\n\nexport function patchHostTimeouts(\n    inputHost: TestServerHostTrackingWrittenFiles,\n    session: TestSession | undefined,\n    logger: LoggerWithInMemoryLogs,\n): TestSessionAndServiceHost {\n    const host = 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T02:29:56.162Z
Question Type: select-all
Function: patchHostTimeouts
Function Size: 953 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: patchHostTimeouts (TypeScript)\n// Patches host timeouts for the test session.\n\nexport function patchHostTimeouts(\n    inputHost: TestServerHostTrackingWrittenFiles,\n    session: TestSession | undefined,\n    logger: LoggerWithInMemoryLogs,\n): TestSessionAndServiceHost {\n    const host = 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T02:29:56.977Z
Question Type: order-sequence
Function: patchHostTimeouts
Function Size: 953 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: patchHostTimeouts (TypeScript)\n// Patches host timeouts for the test session.\n\nexport function patchHostTimeouts(\n    inputHost: TestServerHostTrackingWrittenFiles,\n    session: TestSession | undefined,\n    logger: LoggerWithInMemoryLogs,\n): TestSessionAndServiceHost {\n    const host = 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T02:30:07.642Z
Question Type: select-all
Function: patchHostTimeouts
Function Size: 953 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: patchHostTimeouts (TypeScript)\n// Patches host timeouts for the test session.\n\nexport function patchHostTimeouts(\n    inputHost: TestServerHostTrackingWrittenFiles,\n    session: TestSession | undefined,\n    logger: LoggerWithInMemoryLogs,\n): TestSessionAndServiceHost {\n    const host = 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T02:30:24.161Z
Question Type: function-variant
Function: patchHostTimeouts
Function Size: 953 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: patchHostTimeouts (TypeScript)\n// Patches host timeouts for the test session.\n\nexport function patchHostTimeouts(\n    inputHost: TestServerHostTrackingWrittenFiles,\n    session: TestSession | undefined,\n    logger: LoggerWithInMemoryLogs,\n): TestSessionAndServiceHost {\n    const host = 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T02:30:25.252Z
Question Type: select-all
Function: patchSessionToHandleWatchEvents
Function Size: 5353 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: patchSessionToHandleWatchEvents (TypeScript)\n// Patches the session to handle file and directory watch events.\n\nfunction patchSessionToHandleWatchEvents(session: TestSession) {\n    const event = session.event;\n    const idToClose = new Map<number, () => void>();\n    session.event = (dat
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T02:30:31.798Z
Question Type: select-all
Function: patchSessionToHandleWatchEvents
Function Size: 5353 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: patchSessionToHandleWatchEvents (TypeScript)\n// Patches the session to handle file and directory watch events.\n\nfunction patchSessionToHandleWatchEvents(session: TestSession) {\n    const event = session.event;\n    const idToClose = new Map<number, () => void>();\n    session.event = (dat
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T02:30:34.152Z
Question Type: multiple-choice
Function: patchSessionToHandleWatchEvents
Function Size: 5353 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: patchSessionToHandleWatchEvents (TypeScript)\n// Patches the session to handle file and directory watch events.\n\nfunction patchSessionToHandleWatchEvents(session: TestSession) {\n    const event = session.event;\n    const idToClose = new Map<number, () => void>();\n    session.event = (dat
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T02:30:37.692Z
Question Type: function-variant
Function: patchSessionToHandleWatchEvents
Function Size: 5353 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: patchSessionToHandleWatchEvents (TypeScript)\n// Patches the session to handle file and directory watch events.\n\nfunction patchSessionToHandleWatchEvents(session: TestSession) {\n    const event = session.event;\n    const idToClose = new Map<number, () => void>();\n    session.event = (dat
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T02:30:42.342Z
Question Type: true-false
Function: patchSessionToHandleWatchEvents
Function Size: 5353 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: patchSessionToHandleWatchEvents (TypeScript)\n// Patches the session to handle file and directory watch events.\n\nfunction patchSessionToHandleWatchEvents(session: TestSession) {\n    const event = session.event;\n    const idToClose = new Map<number, () => void>();\n    session.event = (dat
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T02:30:54.172Z
Question Type: function-variant
Function: patchHostTimeouts
Function Size: 953 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: patchHostTimeouts (TypeScript)\n// Patches host timeouts for the test session.\n\nexport function patchHostTimeouts(\n    inputHost: TestServerHostTrackingWrittenFiles,\n    session: TestSession | undefined,\n    logger: LoggerWithInMemoryLogs,\n): TestSessionAndServiceHost {\n    const host = 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T02:31:07.702Z
Question Type: function-variant
Function: patchHostTimeouts
Function Size: 953 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: patchHostTimeouts (TypeScript)\n// Patches host timeouts for the test session.\n\nexport function patchHostTimeouts(\n    inputHost: TestServerHostTrackingWrittenFiles,\n    session: TestSession | undefined,\n    logger: LoggerWithInMemoryLogs,\n): TestSessionAndServiceHost {\n    const host = 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T02:31:07.753Z
Question Type: select-all
Function: patchSessionToHandleWatchEvents
Function Size: 5353 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: patchSessionToHandleWatchEvents (TypeScript)\n// Patches the session to handle file and directory watch events.\n\nfunction patchSessionToHandleWatchEvents(session: TestSession) {\n    const event = session.event;\n    const idToClose = new Map<number, () => void>();\n    session.event = (dat
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T02:31:12.352Z
Question Type: function-variant
Function: patchSessionToHandleWatchEvents
Function Size: 5353 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: patchSessionToHandleWatchEvents (TypeScript)\n// Patches the session to handle file and directory watch events.\n\nfunction patchSessionToHandleWatchEvents(session: TestSession) {\n    const event = session.event;\n    const idToClose = new Map<number, () => void>();\n    session.event = (dat
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760404517212
Repository: Unknown
Total Questions Generated: 12
Total Chunks Processed: 2
Ended: 2025-10-14T02:31:12.353Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-14T02:31:47.673Z
File: <reference path="a1.ts"/>`);
Functions Extracted: 2


Function 1: createRedirectProgram
Language: TypeScript
Lines: 19
Full Code:
--------------------------------------------------------------------------------
function createRedirectProgram(useGetSourceFileByPath: boolean, options?: { bText: string; bVersion: string; }): ProgramWithSourceTexts {
            const files: NamedSourceText[] = [
                {
                    name: "/home/src/workspaces/project/node_modules/a/index.d.ts",
                    text: SourceText.New("", 'import X from "x";', "export function a(x: X): void;"),
                },
                {
                    name: axIndex,
                    text: SourceText.New("", "", "export default class X { private x: number; }"),
                },
                {
                    name: axPackage,
                    text: SourceText.New("", "", jsonToReadableText({ name: "x", version: "1.2.3" })),
                },
                {
                    name: "/home/src/workspaces/project/node_modules/b/index.d.ts",
                    text: SourceText.New("", 'import X from "x";', "export const b: X;"),
                },
                {
                    name: bxIndex,
                    text: SourceText.New("", "", options ? options.bText : "export default class X { private x: number; }"),
                },
                {
                    name: bxPackage,
                    text: SourceText.New("", "", jsonToReadableText({ name: "x", version: options ? options.bVersion : "1.2.3" })),
                },
                {
                    name: root,
                    text: SourceText.New("", 'import { a } from "a"; import { b } from "b";', "a(b)")
                },
            ];

            return newProgram(files, [root], compilerOptions, useGetSourceFileByPath);
        }
--------------------------------------------------------------------------------


Function 2: verifyRedirects
Language: TypeScript
Lines: 41
Full Code:
--------------------------------------------------------------------------------
function verifyRedirects(useGetSourceFileByPath: boolean) {
            it("No changes -> redirect not broken", () => {
                const program1 = createRedirectProgram(useGetSourceFileByPath);
                const baselines: string[] = [];
                baselineProgram(baselines, program1);

                const program2 = updateRedirectProgram(program1, files => {
                    updateProgramText(files, root, "const x = 1;");
                }, useGetSourceFileByPath);
                baselineProgram(baselines, program2);
                runRedirectsBaseline("no change", useGetSourceFileByPath, baselines);
            });

            it("Target changes -> redirect broken", () => {
                const program1 = createRedirectProgram(useGetSourceFileByPath);
                const baselines: string[] = [];
                baselineProgram(baselines, program1);

                const program2 = updateRedirectProgram(program1, files => {
                    updateProgramText(files, axIndex, "export default class X { private x: number; private y: number; };");
                    updateProgramText(files, axPackage, jsonToReadableText('{ name: "x", version: "1.2.4" }'));
                }, useGetSourceFileByPath);
                baselineProgram(baselines, program2);
                runRedirectsBaseline("target changes", useGetSourceFileByPath, baselines);
            });

            it("Underlying changes -> redirect broken", () => {
                const program1 = createRedirectProgram(useGetSourceFileByPath);
                const baselines: string[] = [];
                baselineProgram(baselines, program1);

                const program2 = updateRedirectProgram(program1, files => {
                    updateProgramText(files, bxIndex, "export default class X { private x: number; private y: number; };");
                    updateProgramText(files, bxPackage, jsonToReadableText({ name: "x", version: "1.2.4" }));
                }, useGetSourceFileByPath);
                baselineProgram(baselines, program2);
                runRedirectsBaseline("underlying changes", useGetSourceFileByPath, baselines);
            });

            it("Previously duplicate packages -> program structure not reused", () => {
                const program1 = createRedirectProgram(useGetSourceFileByPath, { bVersion: "1.2.4", bText: "export = class X { private x: number; }" });
                const baselines: string[] = [];
                baselineProgram(baselines, program1);

                const program2 = updateRedirectProgram(program1, files => {
                    updateProgramText(files, bxIndex, "export default class X { private x: number; };");
                    updateProgramText(files, bxPackage, jsonToReadableText({ name: "x", version: "1.2.3" }));
                }, useGetSourceFileByPath);
                baselineProgram(baselines, program2);
                runRedirectsBaseline(`previous duplicate packages`, useGetSourceFileByPath, baselines);
            });
        }
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T02:31:55.421Z
Question Type: multiple-choice
Function: verifyRedirects
Function Size: 3159 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: verifyRedirects (TypeScript)\n// Verifies the redirects based on whether the host implements getSourceFile.\n\nfunction verifyRedirects(useGetSourceFileByPath: boolean) {\n            it("No changes -> redirect not broken", () => {\n                const program1 = createRedirectProgram(useG
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T02:32:02.763Z
Question Type: order-sequence
Function: createRedirectProgram
Function Size: 1773 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: createRedirectProgram (TypeScript)\n// Creates a redirect program with specified options and source texts.\n\nfunction createRedirectProgram(useGetSourceFileByPath: boolean, options?: { bText: string; bVersion: string; }): ProgramWithSourceTexts {\n            const files: NamedSourceText[]
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T02:32:04.548Z
Question Type: select-all
Function: createRedirectProgram
Function Size: 1773 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: createRedirectProgram (TypeScript)\n// Creates a redirect program with specified options and source texts.\n\nfunction createRedirectProgram(useGetSourceFileByPath: boolean, options?: { bText: string; bVersion: string; }): ProgramWithSourceTexts {\n            const files: NamedSourceText[]
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T02:32:11.684Z
Question Type: select-all
Function: verifyRedirects
Function Size: 3159 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: verifyRedirects (TypeScript)\n// Verifies the redirects based on whether the host implements getSourceFile.\n\nfunction verifyRedirects(useGetSourceFileByPath: boolean) {\n            it("No changes -> redirect not broken", () => {\n                const program1 = createRedirectProgram(useG
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T02:32:20.743Z
Question Type: order-sequence
Function: verifyRedirects
Function Size: 3159 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: verifyRedirects (TypeScript)\n// Verifies the redirects based on whether the host implements getSourceFile.\n\nfunction verifyRedirects(useGetSourceFileByPath: boolean) {\n            it("No changes -> redirect not broken", () => {\n                const program1 = createRedirectProgram(useG
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T02:32:25.271Z
Question Type: true-false
Function: createRedirectProgram
Function Size: 1773 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: createRedirectProgram (TypeScript)\n// Creates a redirect program with specified options and source texts.\n\nfunction createRedirectProgram(useGetSourceFileByPath: boolean, options?: { bText: string; bVersion: string; }): ProgramWithSourceTexts {\n            const files: NamedSourceText[]
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T02:32:25.438Z
Question Type: function-variant
Function: createRedirectProgram
Function Size: 1773 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: createRedirectProgram (TypeScript)\n// Creates a redirect program with specified options and source texts.\n\nfunction createRedirectProgram(useGetSourceFileByPath: boolean, options?: { bText: string; bVersion: string; }): ProgramWithSourceTexts {\n            const files: NamedSourceText[]
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T02:32:32.775Z
Question Type: function-variant
Function: verifyRedirects
Function Size: 3159 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: verifyRedirects (TypeScript)\n// Verifies the redirects based on whether the host implements getSourceFile.\n\nfunction verifyRedirects(useGetSourceFileByPath: boolean) {\n            it("No changes -> redirect not broken", () => {\n                const program1 = createRedirectProgram(useG
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T02:32:47.172Z
Question Type: select-all
Function: verifyRedirects
Function Size: 3159 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: verifyRedirects (TypeScript)\n// Verifies the redirects based on whether the host implements getSourceFile.\n\nfunction verifyRedirects(useGetSourceFileByPath: boolean) {\n            it("No changes -> redirect not broken", () => {\n                const program1 = createRedirectProgram(useG
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T02:32:48.131Z
Question Type: function-variant
Function: createRedirectProgram
Function Size: 1773 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: createRedirectProgram (TypeScript)\n// Creates a redirect program with specified options and source texts.\n\nfunction createRedirectProgram(useGetSourceFileByPath: boolean, options?: { bText: string; bVersion: string; }): ProgramWithSourceTexts {\n            const files: NamedSourceText[]
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T02:32:49.316Z
Question Type: select-all
Function: verifyRedirects
Function Size: 3159 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: verifyRedirects (TypeScript)\n// Verifies the redirects based on whether the host implements getSourceFile.\n\nfunction verifyRedirects(useGetSourceFileByPath: boolean) {\n            it("No changes -> redirect not broken", () => {\n                const program1 = createRedirectProgram(useG
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T02:32:56.907Z
Question Type: true-false
Function: verifyRedirects
Function Size: 3159 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: verifyRedirects (TypeScript)\n// Verifies the redirects based on whether the host implements getSourceFile.\n\nfunction verifyRedirects(useGetSourceFileByPath: boolean) {\n            it("No changes -> redirect not broken", () => {\n                const program1 = createRedirectProgram(useG
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T02:33:09.202Z
Question Type: select-all
Function: createRedirectProgram
Function Size: 1773 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: createRedirectProgram (TypeScript)\n// Creates a redirect program with specified options and source texts.\n\nfunction createRedirectProgram(useGetSourceFileByPath: boolean, options?: { bText: string; bVersion: string; }): ProgramWithSourceTexts {\n            const files: NamedSourceText[]
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T02:33:17.195Z
Question Type: function-variant
Function: verifyRedirects
Function Size: 3159 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: verifyRedirects (TypeScript)\n// Verifies the redirects based on whether the host implements getSourceFile.\n\nfunction verifyRedirects(useGetSourceFileByPath: boolean) {\n            it("No changes -> redirect not broken", () => {\n                const program1 = createRedirectProgram(useG
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T02:33:18.142Z
Question Type: function-variant
Function: createRedirectProgram
Function Size: 1773 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: createRedirectProgram (TypeScript)\n// Creates a redirect program with specified options and source texts.\n\nfunction createRedirectProgram(useGetSourceFileByPath: boolean, options?: { bText: string; bVersion: string; }): ProgramWithSourceTexts {\n            const files: NamedSourceText[]
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760404517212
Repository: Unknown
Total Questions Generated: 12
Total Chunks Processed: 2
Ended: 2025-10-14T02:33:18.143Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-14T03:11:51.172Z
File: [2 files: tracker.d.ts, Separate out this functionality for testing]
Functions Extracted: 3


Function 1: onResetPasswordLink
Language: JavaScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
onResetPasswordLink(callback) {
    if (this._accountsCallbacks["reset-password"]) {
      Meteor._debug("Accounts.onResetPasswordLink was called more than once. " +
        "Only one callback added will be executed.");
    }

    this._accountsCallbacks["reset-password"] = callback;
  }
--------------------------------------------------------------------------------


Function 2: onEmailVerificationLink
Language: JavaScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
onEmailVerificationLink(callback) {
    if (this._accountsCallbacks["verify-email"]) {
      Meteor._debug("Accounts.onEmailVerificationLink was called more than once. " +
        "Only one callback added will be executed.");
    }

    this._accountsCallbacks["verify-email"] = callback;
  }
--------------------------------------------------------------------------------


Function 3: onEnrollmentLink
Language: JavaScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
onEnrollmentLink(callback) {
    if (this._accountsCallbacks["enroll-account"]) {
      Meteor._debug("Accounts.onEnrollmentLink was called more than once. " +
        "Only one callback added will be executed.");
    }

    this._accountsCallbacks["enroll-account"] = callback;
  }
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T03:11:57.627Z
Question Type: true-false
Function: onEmailVerificationLink
Function Size: 415 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: onEmailVerificationLink (JavaScript)\n// Registers a callback for when an email verification link is clicked.\n\nonEmailVerificationLink(callback) {\n    if (this._accountsCallbacks["verify-email"]) {\n      Meteor._debug("Accounts.onEmailVerificationLink was called more than once. " +\n     
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T03:12:01.698Z
Question Type: select-all
Function: onResetPasswordLink
Function Size: 402 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: onResetPasswordLink (JavaScript)\n// Registers a callback for when a reset password link is clicked.\n\nonResetPasswordLink(callback) {\n    if (this._accountsCallbacks["reset-password"]) {\n      Meteor._debug("Accounts.onResetPasswordLink was called more than once. " +\n        "Only one ca
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T03:12:01.759Z
Question Type: select-all
Function: onEmailVerificationLink
Function Size: 415 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: onEmailVerificationLink (JavaScript)\n// Registers a callback for when an email verification link is clicked.\n\nonEmailVerificationLink(callback) {\n    if (this._accountsCallbacks["verify-email"]) {\n      Meteor._debug("Accounts.onEmailVerificationLink was called more than once. " +\n     
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T03:12:03.667Z
Question Type: true-false
Function: onEnrollmentLink
Function Size: 398 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: onEnrollmentLink (JavaScript)\n// Registers a callback for when an account enrollment link is clicked.\n\nonEnrollmentLink(callback) {\n    if (this._accountsCallbacks["enroll-account"]) {\n      Meteor._debug("Accounts.onEnrollmentLink was called more than once. " +\n        "Only one callba
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T03:12:09.201Z
Question Type: function-variant
Function: onEmailVerificationLink
Function Size: 415 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: onEmailVerificationLink (JavaScript)\n// Registers a callback for when an email verification link is clicked.\n\nonEmailVerificationLink(callback) {\n    if (this._accountsCallbacks["verify-email"]) {\n      Meteor._debug("Accounts.onEmailVerificationLink was called more than once. " +\n     
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T03:12:10.583Z
Question Type: select-all
Function: onEnrollmentLink
Function Size: 398 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: onEnrollmentLink (JavaScript)\n// Registers a callback for when an account enrollment link is clicked.\n\nonEnrollmentLink(callback) {\n    if (this._accountsCallbacks["enroll-account"]) {\n      Meteor._debug("Accounts.onEnrollmentLink was called more than once. " +\n        "Only one callba
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760404517212
Repository: Unknown
Total Questions Generated: 6
Total Chunks Processed: 3
Ended: 2025-10-14T03:12:10.606Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-14T03:12:25.299Z
File: => `true` if user roles have been loaded
Functions Extracted: 11


Function 1: addUsersToRoles
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function addUsersToRoles(
    users: string | string[] | Meteor.User | Meteor.User[],
    roles: string | string[],
    options?: string | { scope?: string; ifExists?: boolean }
  ): void {
    // logic to add users to roles
}
--------------------------------------------------------------------------------


Function 2: createRole
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function createRole(
    roleName: string,
    options?: { unlessExists: boolean }
  ): string {
    // logic to create a new role
}
--------------------------------------------------------------------------------


Function 3: addRolesToParent
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function addRolesToParent(
    rolesNames: string | string[],
    parentName: string
  ): void {
    // logic to add role parent to roles
}
--------------------------------------------------------------------------------


Function 4: removeRolesFromParent
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function removeRolesFromParent(
    rolesNames: string | string[],
    parentName: string
  ): void {
    // logic to remove role parent from roles
}
--------------------------------------------------------------------------------


Function 5: getGroupsForUser
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function getGroupsForUser(
    user: string | Meteor.User,
    role?: string
  ): string[] {
    // logic to retrieve users groups
}
--------------------------------------------------------------------------------


Function 6: getScopesForUser
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function getScopesForUser(
    user: string | Meteor.User,
    roles?: string | string[]
  ): string[] {
    // logic to retrieve users scopes
}
--------------------------------------------------------------------------------


Function 7: getRolesForUser
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function getRolesForUser(
    user: string | Meteor.User,
    options?:
      | string
      | {
          scope?: string;
          anyScope?: boolean;
          onlyScoped?: boolean;
          onlyAssigned?: boolean;
          fullObjects?: boolean;
        }
  ): string[] {
    // logic to retrieve user's roles
}
--------------------------------------------------------------------------------


Function 8: getUserAssignmentsForRole
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function getUserAssignmentsForRole(
    roles: string | string[],
    options?:
      | string
      | {
          scope?: string;
          anyScope?: boolean;
          queryOptions?: QueryOptions;
        }
  ): Mongo.Cursor<RoleAssignment> {
    // logic to retrieve all assignments of a user for the target role
}
--------------------------------------------------------------------------------


Function 9: getUsersInRole
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function getUsersInRole(
    roles: string | string[],
    options?:
      | string
      | {
          scope?: string;
          anyScope?: boolean;
          onlyScoped?: boolean;
          queryOptions?: QueryOptions;
        },
    queryOptions?: QueryOptions
  ): Mongo.Cursor<Meteor.User> {
    // logic to retrieve all users who are in target role
}
--------------------------------------------------------------------------------


Function 10: removeUsersFromRoles
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function removeUsersFromRoles(
    users: string | string[] | Meteor.User | Meteor.User[],
    roles?: string | string[],
    options?: string | { scope?: string; anyScope?: boolean }
  ): void {
    // logic to remove users from assigned roles
}
--------------------------------------------------------------------------------


Function 11: setUserRoles
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function setUserRoles(
    users: string | string[] | Meteor.User | Meteor.User[],
    roles: string | string[],
    options?:
      | string
      | { scope?: string; anyScope?: boolean; ifExists?: boolean }
  ): void {
    // logic to set users' roles
}
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T03:12:33.382Z
Question Type: select-all
Function: createRole
Function Size: 193 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: createRole (TypeScript)\n// Creates a new role.\n\nfunction createRole(\n    roleName: string,\n    options?: { unlessExists: boolean }\n  ): string {\n    // logic to create a new role\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T03:12:37.359Z
Question Type: order-sequence
Function: createRole
Function Size: 193 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: createRole (TypeScript)\n// Creates a new role.\n\nfunction createRole(\n    roleName: string,\n    options?: { unlessExists: boolean }\n  ): string {\n    // logic to create a new role\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T03:12:39.988Z
Question Type: function-variant
Function: getRolesForUser
Function Size: 387 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getRolesForUser (TypeScript)\n// Retrieves user's roles.\n\nfunction getRolesForUser(\n    user: string | Meteor.User,\n    options?:\n      | string\n      | {\n          scope?: string;\n          anyScope?: boolean;\n          onlyScoped?: boolean;\n          onlyAssigned?: boolean;\n          f
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T03:12:40.335Z
Question Type: order-sequence
Function: addUsersToRoles
Function Size: 316 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: addUsersToRoles (TypeScript)\n// Adds roles to existing roles for each user.\n\nfunction addUsersToRoles(\n    users: string | string[] | Meteor.User | Meteor.User[],\n    roles: string | string[],\n    options?: string | { scope?: string; ifExists?: boolean }\n  ): void {\n    // logic to add 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T03:12:44.012Z
Question Type: select-all
Function: getUsersInRole
Function Size: 445 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getUsersInRole (TypeScript)\n// Retrieves all users who are in target role.\n\nfunction getUsersInRole(\n    roles: string | string[],\n    options?:\n      | string\n      | {\n          scope?: string;\n          anyScope?: boolean;\n          onlyScoped?: boolean;\n          queryOptions?: Quer
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T03:12:47.290Z
Question Type: function-variant
Function: getGroupsForUser
Function Size: 203 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getGroupsForUser (TypeScript)\n// Retrieves users groups.\n\nfunction getGroupsForUser(\n    user: string | Meteor.User,\n    role?: string\n  ): string[] {\n    // logic to retrieve users groups\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T03:12:49.196Z
Question Type: true-false
Function: addRolesToParent
Function Size: 213 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: addRolesToParent (TypeScript)\n// Adds role parent to roles.\n\nfunction addRolesToParent(\n    rolesNames: string | string[],\n    parentName: string\n  ): void {\n    // logic to add role parent to roles\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T03:12:49.522Z
Question Type: multiple-choice
Function: getUsersInRole
Function Size: 445 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: getUsersInRole (TypeScript)\n// Retrieves all users who are in target role.\n\nfunction getUsersInRole(\n    roles: string | string[],\n    options?:\n      | string\n      | {\n          scope?: string;\n          anyScope?: boolean;\n          onlyScoped?: boolean;\n          queryOptions?: Quer
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760404517212
Repository: Unknown
Total Questions Generated: 10
Total Chunks Processed: 11
Ended: 2025-10-14T03:12:49.541Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-14T03:13:26.243Z
File: [2 files: WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE., history.]
Functions Extracted: 9


Function 1: normalizeName
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function normalizeName(name) {
    if (typeof name !== 'string') {
        name = String(name)
    }
    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
        throw new TypeError('Invalid character in header field name')
    }
    return name.toLowerCase()
}
--------------------------------------------------------------------------------


Function 2: normalizeValue
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function normalizeValue(value) {
    if (typeof value !== 'string') {
        value = String(value)
    }
    return value
}
--------------------------------------------------------------------------------


Function 3: Headers
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function Headers(headers) {
    this.map = {}

    if (headers instanceof Headers) {
        headers.forEach(function(value, name) {
            this.append(name, value)
        }, this)

    } else if (headers) {
        Object.getOwnPropertyNames(headers).forEach(function(name) {
            this.append(name, headers[name])
        }, this)
    }
}
--------------------------------------------------------------------------------


Function 4: fileReaderReady
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function fileReaderReady(reader) {
    return new Promise(function(resolve, reject) {
        reader.onload = function() {
            resolve(reader.result)
        }
        reader.onerror = function() {
            reject(reader.error)
        }
    })
}
--------------------------------------------------------------------------------


Function 5: readBlobAsArrayBuffer
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader()
    reader.readAsArrayBuffer(blob)
    return fileReaderReady(reader)
}
--------------------------------------------------------------------------------


Function 6: readBlobAsText
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function readBlobAsText(blob) {
    var reader = new FileReader()
    reader.readAsText(blob)
    return fileReaderReady(reader)
}
--------------------------------------------------------------------------------


Function 7: Body
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function Body() {
    this.bodyUsed = false

    this._initBody = function(body) {
        this._bodyInit = body
        if (typeof body === 'string') {
            this._bodyText = body
        } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
            this._bodyBlob = body
        } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
            this._bodyFormData = body
        } else if (!body) {
            this._bodyText = ''
        } else if (support.arrayBuffer && ArrayBuffer.prototype.isPrototypeOf(body)) {
            // logic goes here
        }
    }
}
--------------------------------------------------------------------------------


Function 8: initializeHistory
Language: JavaScript
Lines: 20
Full Code:
--------------------------------------------------------------------------------
initializeHistory() {
    const repl = this.repl;
    const historyFile = getHistoryFile(this.shellDir);
    let historyFd = openSync(historyFile, "a+");
    const historyLines = readFileSync(historyFile, "utf8").split("\n");
    const seenLines = Object.create(null);

    if (! repl.history) {
        repl.history = [];
        repl.historyIndex = -1;
    }

    while (repl.history && historyLines.length > 0) {
        const line = historyLines.pop();
        if (line && /\S/.test(line) && ! seenLines[line]) {
            repl.history.push(line);
            seenLines[line] = true;
        }
    }

    repl.addListener("line", function(line) {
        if (historyFd >= 0 && /\S/.test(line)) {
            writeSync(historyFd, line + "\n");
        }
    });

    this.repl.on("exit", function() {
        closeSync(historyFd);
        historyFd = -1;
    });
}
--------------------------------------------------------------------------------


Function 9: readJSONFromStream
Language: JavaScript
Lines: 30
Full Code:
--------------------------------------------------------------------------------
function readJSONFromStream(inputStream, callback) {
    const outputStream = new PassThrough();
    let dataSoFar = "";

    function onData(buffer) {
        const lines = buffer.toString("utf8").split("\n");

        while (lines.length > 0) {
            dataSoFar += lines.shift();

            let json;
            try {
                json = JSON.parse(dataSoFar);
            } catch (error) {
                if (error instanceof SyntaxError) {
                    continue;
                }

                return finish(error);
            }

            if (lines.length > 0) {
                outputStream.write(lines.join("\n"));
            }

            inputStream.pipe(outputStream);

            return finish(null, json);
        }
    }

    function onClose() {
        finish(new Error("stream unexpectedly closed"));
    }

    let finished = false;
    function finish(error, json) {
        if (! finished) {
            finished = true;
            inputStream.removeListener("data", onData);
            inputStream.removeListener("error", finish);
            inputStream.removeListener("close", onClose);
            callback(error, json, outputStream);
        }
    }

    inputStream.on("data", onData);
    inputStream.on("error", finish);
    inputStream.on("close", onClose);
}
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T03:13:32.658Z
Question Type: select-all
Function: readBlobAsArrayBuffer
Function Size: 247 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: readBlobAsArrayBuffer (JavaScript)\n// Reads a Blob as an ArrayBuffer using a FileReader.\n\nfunction readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    reader.readAsArrayBuffer(blob)\n    return fileReaderReady(reader)\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T03:13:35.718Z
Question Type: select-all
Function: fileReaderReady
Function Size: 387 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: fileReaderReady (JavaScript)\n// Returns a promise that resolves when the FileReader has successfully read the data.\n\nfunction fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n        reader.onload = function() {\n            resolve(reader.result)\n        }\n  
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T03:13:38.750Z
Question Type: order-sequence
Function: readJSONFromStream
Function Size: 1425 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: readJSONFromStream (JavaScript)\n// Reads JSON data from a stream and handles parsing errors.\n\nfunction readJSONFromStream(inputStream, callback) {\n    const outputStream = new PassThrough();\n    let dataSoFar = "";\n\n    function onData(buffer) {\n        const lines = buffer.toString("ut
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T03:13:45.240Z
Question Type: function-variant
Function: Body
Function Size: 719 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: Body (JavaScript)\n// Constructs a Body object and initializes it with the provided body content.\n\nfunction Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n        this._bodyInit = body\n        if (typeof body === 'string') {\n            this._bodyText = body\n  
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T03:13:50.544Z
Question Type: function-variant
Function: normalizeName
Function Size: 385 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: normalizeName (JavaScript)\n// Normalizes the header field name by converting it to lowercase and validating it.\n\nfunction normalizeName(name) {\n    if (typeof name !== 'string') {\n        name = String(name)\n    }\n    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {\n        throw new Type
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T03:13:50.717Z
Question Type: select-all
Function: initializeHistory
Function Size: 994 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: initializeHistory (JavaScript)\n// Initializes the command history for the REPL by reading from a history file.\n\ninitializeHistory() {\n    const repl = this.repl;\n    const historyFile = getHistoryFile(this.shellDir);\n    let historyFd = openSync(historyFile, "a+");\n    const historyLine
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T03:13:52.613Z
Question Type: function-variant
Function: readBlobAsText
Function Size: 216 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: readBlobAsText (JavaScript)\n// Reads a Blob as text using a FileReader.\n\nfunction readBlobAsText(blob) {\n    var reader = new FileReader()\n    reader.readAsText(blob)\n    return fileReaderReady(reader)\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T03:13:57.843Z
Question Type: order-sequence
Function: Headers
Function Size: 470 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: Headers (JavaScript)\n// Constructs a Headers object, initializing it with existing headers if provided.\n\nfunction Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n        headers.forEach(function(value, name) {\n            this.append(name, value)\n        }, t
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T03:13:58.086Z
Question Type: true-false
Function: fileReaderReady
Function Size: 387 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: fileReaderReady (JavaScript)\n// Returns a promise that resolves when the FileReader has successfully read the data.\n\nfunction fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n        reader.onload = function() {\n            resolve(reader.result)\n        }\n  
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760404517212
Repository: Unknown
Total Questions Generated: 9
Total Chunks Processed: 9
Ended: 2025-10-14T03:13:58.101Z
================================================================================

