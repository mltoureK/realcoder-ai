=== FUNCTION EXTRACTION & QUESTION GENERATION LOG ===
Session ID: session-1760894090440
Started: 2025-10-19T17:14:50.440Z


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T17:14:50.442Z
File: [2 files: This function has to be called initially., index.d.ts]
Functions Extracted: 4


Function 1: init
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
export function init(opts: {
  ts: TypeScript
  info: tsModule.server.PluginCreateInfo
}) {
  const projectDir = opts.info.project.getCurrentDirectory()
  ts = opts.ts
  info = opts.info
  appDirRegExp = new RegExp(
    '^' + (projectDir + '(/src)?/app').replace(/[\\/]/g, '[\\/]')
  )

  log('Initialized Next.js TypeScript plugin: ' + projectDir)
}
--------------------------------------------------------------------------------


Function 2: getTypeChecker
Language: TypeScript
Lines: 11
Full Code:
--------------------------------------------------------------------------------
export function getTypeChecker() {
  const program = info.languageService.getProgram()
  if (!program) {
    log('Failed to get program while while running getTypeChecker.')
    return
  }
  const typeChecker = program.getTypeChecker()
  if (!typeChecker) {
    log('Failed to get type checker while running getTypeChecker.')
    return
  }
  return typeChecker
}
--------------------------------------------------------------------------------


Function 3: getSource
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
export function getSource(fileName: string) {
  const program = info.languageService.getProgram()
  if (!program) {
    log('Failed to get program while running getSource for: ' + fileName)
    return
  }

  const sourceFile = program.getSourceFile(fileName)
  if (!sourceFile) {
    log('Failed to get source file while running getSource for: ' + fileName)
    return
  }

  return sourceFile
}
--------------------------------------------------------------------------------


Function 4: isDefaultFunctionExport
Language: TypeScript
Lines: 14
Full Code:
--------------------------------------------------------------------------------
export const isDefaultFunctionExport = (
  node: tsModule.Node
): node is tsModule.FunctionDeclaration => {
  if (ts.isFunctionDeclaration(node)) {
    let hasExportKeyword = false
    let hasDefaultKeyword = false

    if (node.modifiers) {
      for (const modifier of node.modifiers) {
        if (modifier.kind === ts.SyntaxKind.ExportKeyword) {
          hasExportKeyword = true
        } else if (modifier.kind === ts.SyntaxKind.DefaultKeyword) {
          hasDefaultKeyword = true
        }
      }
    }
  }
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T17:14:50.548Z
File: [4 files: connection.ts, Any other update combination is invalid., >, If we end up here, there was no work store or work unit store present.]
Functions Extracted: 4


Function 1: connection
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export function connection(): Promise<void> {
  const callingExpression = 'connection';
  const workStore = workAsyncStorage.getStore();
  const workUnitStore = workUnitAsyncStorage.getStore();

  if (workStore) {
    if (
      workUnitStore &&
      workUnitStore.phase === 'after' &&
      !isRequestAPICallableInsideAfter()
    ) {
      throw new Error(
        `Route ${workStore.route} used \`connection()\` inside \`after()\`. The \`connection()\` function is used to indicate the subsequent code must only run when there is an actual Request, but \`after()\` executes after the request, so this function is not allowed in this scope. See more info here: https://nextjs.org/docs/canary/app/api-reference/functions/after`
      );
    }

    if (workStore.forceStatic) {
      // ...
    }
  }
  throwForMissingRequestStore(callingExpression);
}
--------------------------------------------------------------------------------


Function 2: handleIssues
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function handleIssues(msg: ServerMessage): boolean {
  const key = resourceKey(msg.resource);
  let hasCriticalIssues = false;

  for (const issue of msg.issues) {
    if (CRITICAL.includes(issue.severity)) {
      hasCriticalIssues = true;
    }
  }

  if (msg.issues.length > 0) {
    chunksWithIssues.set(key, msg.issues);
  } else if (chunksWithIssues.has(key)) {
    chunksWithIssues.delete(key);
  }

  emitIssues();

  return hasCriticalIssues;
}
--------------------------------------------------------------------------------


Function 3: sortIssues
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function sortIssues(issues: Issue[]) {
  issues.sort((a, b) => {
    const first = compareByList(SEVERITY_ORDER, a.severity, b.severity);
    if (first !== 0) return first;
    return compareByList(CATEGORY_ORDER, a.category, b.category);
  });
}
--------------------------------------------------------------------------------


Function 4: connect
Language: TypeScript
Lines: 40
Full Code:
--------------------------------------------------------------------------------
export function connect({
  addMessageListener,
  sendMessage,
  onUpdateError = console.error,
}: ClientOptions) {
  addMessageListener((msg) => {
    switch (msg.type) {
      case 'turbopack-connected':
        handleSocketConnected(sendMessage);
        break;
      default:
        try {
          if (Array.isArray(msg.data)) {
            for (let i = 0; i < msg.data.length; i++) {
              handleSocketMessage(msg.data[i] as ServerMessage);
            }
          } else {
            handleSocketMessage(msg.data as ServerMessage);
          }
          applyAggregatedUpdates();
        } catch (e: unknown) {
          console.warn(
            '[Fast Refresh] performing full reload\n\n' +
              "Fast Refresh will perform a full reload when you edit a file that's imported by modules outside of the React rendering tree.\n" +
              'You might have a file which exports a React component but also exports a value that is imported by a non-React component file.\n' +
              'Consider migrating the non-React component export to a separate file and importing it into both files.\n\n' +
              'It is also possible the parent component of the component you edited is a class component, which disables Fast Refresh.\n' +
              'Fast Refresh requires at least one parent function component in your React tree.'
          );
          onUpdateError(e);
          location.reload();
        }
        break;
    }
  });

  const queued = globalThis.TURBOPACK_CHUNK_UPDATE_LISTENERS;
  if (queued != null && !Array.isArray(queued)) {
    throw new Error('A separate HMR handler was already registered');
  }
  globalThis.TURBOPACK_CHUNK_UPDATE_LISTENERS = {
    push: ([chunkPath, callback]: [ChunkListPath, UpdateCallback]) => {
      subscribeToChunkUpdate(chunkPath, sendMessage, callback);
    },
  };

  if (Array.isArray(queued)) {
    for (const [chunkPath, callback] of queued) {
      subscribeToChunkUpdate(chunkPath, sendMessage, callback);
    }
  }
}
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:14:53.202Z
Question Type: multiple-choice
Function: isDefaultFunctionExport
Function Size: 624 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: isDefaultFunctionExport (TypeScript)\n// Checks if a given node is a default function export.\n\nexport const isDefaultFunctionExport = (\n  node: tsModule.Node\n): node is tsModule.FunctionDeclaration => {\n  if (ts.isFunctionDeclaration(node)) {\n    let hasExportKeyword = false\n    let hasD
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:14:54.596Z
Question Type: true-false
Function: init
Function Size: 451 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: init (TypeScript)\n// Initializes the Next.js TypeScript plugin with the given options.\n\nexport function init(opts: {\n  ts: TypeScript\n  info: tsModule.server.PluginCreateInfo\n}) {\n  const projectDir = opts.info.project.getCurrentDirectory()\n  ts = opts.ts\n  info = opts.info\n  appDirRegE
================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T17:14:57.135Z
File: vercel-next.js-553f2b6/packages/next/src/server/load-manifest.external.ts
Functions Extracted: 1


Function 1: loadManifest
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export function loadManifest<T extends object>(
  path: string,
  shouldCache: boolean = true,
  cache = sharedCache,
  skipParse = false
): T {
  const cached = shouldCache && cache.get(path)
  if (cached) {
    return cached as T
  }

  let manifest: any = readFileSync(/* turbopackIgnore: true */ path, 'utf8')

  if (!skipParse) {
    manifest = JSON.parse(manifest)
  }
  const frozenManifest = deepFreeze(manifest)
  if (shouldCache) {
    cache.set(path, frozenManifest)
  }
  return frozenManifest
}
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:14:58.484Z
Question Type: order-sequence
Function: isDefaultFunctionExport
Function Size: 624 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: isDefaultFunctionExport (TypeScript)\n// Checks if a given node is a default function export.\n\nexport const isDefaultFunctionExport = (\n  node: tsModule.Node\n): node is tsModule.FunctionDeclaration => {\n  if (ts.isFunctionDeclaration(node)) {\n    let hasExportKeyword = false\n    let hasD
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:14:58.830Z
Question Type: order-sequence
Function: getSource
Function Size: 519 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getSource (TypeScript)\n// Fetches the source file from the TypeScript program based on the provided filename.\n\nexport function getSource(fileName: string) {\n  const program = info.languageService.getProgram()\n  if (!program) {\n    log('Failed to get program while running getSource for: 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:14:59.842Z
Question Type: select-all
Function: init
Function Size: 451 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: init (TypeScript)\n// Initializes the Next.js TypeScript plugin with the given options.\n\nexport function init(opts: {\n  ts: TypeScript\n  info: tsModule.server.PluginCreateInfo\n}) {\n  const projectDir = opts.info.project.getCurrentDirectory()\n  ts = opts.ts\n  info = opts.info\n  appDirRegE
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:15:03.006Z
Question Type: true-false
Function: getTypeChecker
Function Size: 473 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getTypeChecker (TypeScript)\n// Retrieves the TypeScript type checker from the language service.\n\nexport function getTypeChecker() {\n  const program = info.languageService.getProgram()\n  if (!program) {\n    log('Failed to get program while while running getTypeChecker.')\n    return\n  }\n 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:15:05.873Z
Question Type: function-variant
Function: init
Function Size: 451 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: init (TypeScript)\n// Initializes the Next.js TypeScript plugin with the given options.\n\nexport function init(opts: {\n  ts: TypeScript\n  info: tsModule.server.PluginCreateInfo\n}) {\n  const projectDir = opts.info.project.getCurrentDirectory()\n  ts = opts.ts\n  info = opts.info\n  appDirRegE
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:15:06.687Z
Question Type: select-all
Function: getTypeChecker
Function Size: 473 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getTypeChecker (TypeScript)\n// Retrieves the TypeScript type checker from the language service.\n\nexport function getTypeChecker() {\n  const program = info.languageService.getProgram()\n  if (!program) {\n    log('Failed to get program while while running getTypeChecker.')\n    return\n  }\n 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:15:09.321Z
Question Type: select-all
Function: getTypeChecker
Function Size: 473 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getTypeChecker (TypeScript)\n// Retrieves the TypeScript type checker from the language service.\n\nexport function getTypeChecker() {\n  const program = info.languageService.getProgram()\n  if (!program) {\n    log('Failed to get program while while running getTypeChecker.')\n    return\n  }\n 
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760894090440
Repository: Unknown
Total Questions Generated: 8
Total Chunks Processed: 4
Ended: 2025-10-19T17:15:09.404Z
================================================================================


--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:15:32.790Z
Question Type: order-sequence
Function: init
Function Size: 451 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: init (TypeScript)\n// Initializes the Next.js TypeScript plugin with the given options.\n\nexport function init(opts: {\n  ts: TypeScript\n  info: tsModule.server.PluginCreateInfo\n}) {\n  const projectDir = opts.info.project.getCurrentDirectory()\n  ts = opts.ts\n  info = opts.info\n  appDirRegE
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:15:36.853Z
Question Type: function-variant
Function: getSource
Function Size: 519 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getSource (TypeScript)\n// Fetches the source file from the TypeScript program based on the provided filename.\n\nexport function getSource(fileName: string) {\n  const program = info.languageService.getProgram()\n  if (!program) {\n    log('Failed to get program while running getSource for: 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:15:39.109Z
Question Type: function-variant
Function: getSource
Function Size: 519 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getSource (TypeScript)\n// Fetches the source file from the TypeScript program based on the provided filename.\n\nexport function getSource(fileName: string) {\n  const program = info.languageService.getProgram()\n  if (!program) {\n    log('Failed to get program while running getSource for: 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:15:40.029Z
Question Type: select-all
Function: isDefaultFunctionExport
Function Size: 624 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: isDefaultFunctionExport (TypeScript)\n// Checks if a given node is a default function export.\n\nexport const isDefaultFunctionExport = (\n  node: tsModule.Node\n): node is tsModule.FunctionDeclaration => {\n  if (ts.isFunctionDeclaration(node)) {\n    let hasExportKeyword = false\n    let hasD
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:15:45.514Z
Question Type: function-variant
Function: isDefaultFunctionExport
Function Size: 624 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: isDefaultFunctionExport (TypeScript)\n// Checks if a given node is a default function export.\n\nexport const isDefaultFunctionExport = (\n  node: tsModule.Node\n): node is tsModule.FunctionDeclaration => {\n  if (ts.isFunctionDeclaration(node)) {\n    let hasExportKeyword = false\n    let hasD
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:15:46.022Z
Question Type: select-all
Function: getSource
Function Size: 519 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getSource (TypeScript)\n// Fetches the source file from the TypeScript program based on the provided filename.\n\nexport function getSource(fileName: string) {\n  const program = info.languageService.getProgram()\n  if (!program) {\n    log('Failed to get program while running getSource for: 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:15:46.771Z
Question Type: select-all
Function: init
Function Size: 451 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: init (TypeScript)\n// Initializes the Next.js TypeScript plugin with the given options.\n\nexport function init(opts: {\n  ts: TypeScript\n  info: tsModule.server.PluginCreateInfo\n}) {\n  const projectDir = opts.info.project.getCurrentDirectory()\n  ts = opts.ts\n  info = opts.info\n  appDirRegE
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:15:47.743Z
Question Type: function-variant
Function: getTypeChecker
Function Size: 473 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getTypeChecker (TypeScript)\n// Retrieves the TypeScript type checker from the language service.\n\nexport function getTypeChecker() {\n  const program = info.languageService.getProgram()\n  if (!program) {\n    log('Failed to get program while while running getTypeChecker.')\n    return\n  }\n 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:15:48.341Z
Question Type: multiple-choice
Function: isDefaultFunctionExport
Function Size: 624 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: isDefaultFunctionExport (TypeScript)\n// Checks if a given node is a default function export.\n\nexport const isDefaultFunctionExport = (\n  node: tsModule.Node\n): node is tsModule.FunctionDeclaration => {\n  if (ts.isFunctionDeclaration(node)) {\n    let hasExportKeyword = false\n    let hasD
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:15:49.795Z
Question Type: true-false
Function: init
Function Size: 451 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: init (TypeScript)\n// Initializes the Next.js TypeScript plugin with the given options.\n\nexport function init(opts: {\n  ts: TypeScript\n  info: tsModule.server.PluginCreateInfo\n}) {\n  const projectDir = opts.info.project.getCurrentDirectory()\n  ts = opts.ts\n  info = opts.info\n  appDirRegE
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760894090440
Repository: Unknown
Total Questions Generated: 10
Total Chunks Processed: 4
Ended: 2025-10-19T17:15:49.823Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T17:20:13.360Z
File: [3 files: This function has to be called initially., load-manifest.external.ts, This keeps autocompletion working for static routes.]
Functions Extracted: 3


Function 1: init
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
export function init(opts: {
  ts: TypeScript
  info: tsModule.server.PluginCreateInfo
}) {
  const projectDir = opts.info.project.getCurrentDirectory()
  ts = opts.ts
  info = opts.info
  appDirRegExp = new RegExp(
    '^' + (projectDir + '(/src)?/app').replace(/[\/]/g, '[\/]')
  )

  log('Initialized Next.js TypeScript plugin: ' + projectDir)
}
--------------------------------------------------------------------------------


Function 2: loadManifest
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
export function loadManifest<T extends object>(
  path: string,
  shouldCache: boolean = true,
  cache = sharedCache,
  skipParse = false
): T {
  const cached = shouldCache && cache.get(path)
  if (cached) {
    return cached as T
  }

  let manifest: any = readFileSync(/* turbopackIgnore: true */ path, 'utf8')

  if (!skipParse) {
    manifest = JSON.parse(manifest)
  }
}
--------------------------------------------------------------------------------


Function 3: generateValidatorFile
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
export function generateValidatorFile(
  routesManifest: RouteTypesManifest
): string {
  const generateValidations = (
    paths: string[],
    type:
      | 'AppPageConfig'
      | 'PagesPageConfig'
      | 'LayoutConfig'
      | 'RouteHandlerConfig'
      | 'ApiRouteConfig',
    pathToRouteMap?: Map<string, string>
  ) =>
    paths
      .sort()
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T17:20:19.840Z
File: [3 files: inject.decorator.ts, app.module.ts, If module's name is well defined]
Functions Extracted: 2


Function 1: Inject
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
export function Inject(
  token?: InjectionToken | ForwardReference,
): PropertyDecorator & ParameterDecorator {
  const injectCallHasArguments = arguments.length > 0;

  return (target: object, key: string | symbol | undefined, index?: number) => {
    let type = token || Reflect.getMetadata('design:type', target, key!);
    // Additional logic here
  };
}
--------------------------------------------------------------------------------


Function 2: createClientOptions
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
createClientOptions(): Promise<ClientOptions> | ClientOptions {
    return {
      transport: this.configService.get('transport'),
      options: {
        tlsOptions: { ca: caCert },
      },
    };
  }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T17:20:21.681Z
File: [2 files: If we end up here, there was no work store or work unit store present., resolves.]
Functions Extracted: 6


Function 1: makeHangingHeaders
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function makeHangingHeaders(
  workStore: WorkStore,
  prerenderStore: PrerenderStoreModern
): Promise<ReadonlyHeaders> {
  const cachedHeaders = CachedHeaders.get(prerenderStore);
  if (cachedHeaders) {
    return cachedHeaders;
  }

  const promise = makeHangingPromise<ReadonlyHeaders>(
    prerenderStore.renderSignal,
    workStore.route,
    '`headers()`'
  );
  CachedHeaders.set(prerenderStore, promise);

  return promise;
}
--------------------------------------------------------------------------------


Function 2: makeUntrackedHeadersWithDevWarnings
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function makeUntrackedHeadersWithDevWarnings(
  underlyingHeaders: ReadonlyHeaders,
  route: string | undefined,
  requestStore: RequestStore
): Promise<ReadonlyHeaders> {
  if (requestStore.asyncApiPromises) {
    const promise = requestStore.asyncApiPromises.headers;
    return instrumentHeadersPromiseWithDevWarnings(promise, route);
  }

  const cachedHeaders = CachedHeaders.get(underlyingHeaders);
  if (cachedHeaders) {
    return cachedHeaders;
  }

  const promise = makeDevtoolsIOAwarePromise(
    underlyingHeaders,
    requestStore,
    RenderStage.Runtime
  );

  const proxiedPromise = instrumentHeadersPromiseWithDevWarnings(promise, route);

  CachedHeaders.set(underlyingHeaders, proxiedPromise);

  return proxiedPromise;
}
--------------------------------------------------------------------------------


Function 3: instrumentHeadersPromiseWithDevWarnings
Language: TypeScript
Lines: 14
Full Code:
--------------------------------------------------------------------------------
function instrumentHeadersPromiseWithDevWarnings(
  promise: Promise<ReadonlyHeaders>,
  route: string | undefined
) {
  Object.defineProperties(promise, {
    [Symbol.iterator]: replaceableWarningDescriptorForSymbolIterator(
      promise,
      route
    ),
    append: replaceableWarningDescriptor(promise, 'append', route),
    delete: replaceableWarningDescriptor(promise, 'delete', route),
    get: replaceableWarningDescriptor(promise, 'get', route),
    has: replaceableWarningDescriptor(promise, 'has', route),
    set: replaceableWarningDescriptor(promise, 'set', route),
    getSetCookie: replaceableWarningDescriptor(promise, 'getSetCookie', route),
    forEach: replaceableWarningDescriptor(promise, 'forEach', route),
    keys: replaceableWarningDescriptor(promise, 'keys', route),
    values: replaceableWarningDescriptor(promise, 'values', route),
    entries: replaceableWarningDescriptor(promise, 'entries', route),
  });
  return promise;
}
--------------------------------------------------------------------------------


Function 4: createRuntimePrerenderParams
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function createRuntimePrerenderParams(
  underlyingParams: Params,
  workUnitStore: PrerenderStoreModernRuntime
): Promise<Params> {
  return delayUntilRuntimeStage(
    workUnitStore,
    makeUntrackedParams(underlyingParams)
  );
}
--------------------------------------------------------------------------------


Function 5: createRenderParamsInDev
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function createRenderParamsInDev(
  underlyingParams: Params,
  devFallbackParams: OpaqueFallbackRouteParams | null | undefined,
  workStore: WorkStore,
  requestStore: RequestStore
): Promise<Params> {
  let hasFallbackParams = false;
  if (devFallbackParams) {
    for (let key in underlyingParams) {
      if (devFallbackParams.has(key)) {
        hasFallbackParams = true;
        break;
      }
    }
  }

  return makeDynamicallyTrackedParamsWithDevWarnings(
    underlyingParams,
    hasFallbackParams,
    workStore,
    requestStore
  );
}
--------------------------------------------------------------------------------


Function 6: makeHangingParams
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function makeHangingParams(
  underlyingParams: Params,
  workStore: WorkStore,
  prerenderStore: StaticPrerenderStoreModern
): Promise<Params> {
  const cachedParams = CachedParams.get(underlyingParams);
  if (cachedParams) {
    return cachedParams;
  }

  const promise = new Proxy(
    makeHangingPromise<Params>(
      prerenderStore.renderSignal,
      workStore.route,
      '`params`'
    ),
    fallbackParamsProxyHandler
  );

  CachedParams.set(underlyingParams, promise);

  return promise;
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T17:20:22.256Z
File: [3 files: nest-express-application.interface.ts, apply-decorators.spec.ts, nest-application-context.spec.ts]
Functions Extracted: 1


Function 1: testHelper
Language: TypeScript
Lines: 24
Full Code:
--------------------------------------------------------------------------------
async function testHelper(
  injectionKey: InjectionToken,
  scope: Scope,
  additionalProviders: Array<Provider> = [],
): Promise<NestApplicationContext> {
  const nestContainer = new NestContainer();
  const injector = new Injector();
  const instanceLoader = new InstanceLoader(
    nestContainer,
    injector,
    new GraphInspector(nestContainer),
  );
  const { moduleRef } = (await nestContainer.addModule(class T {}, []))!;

  nestContainer.addProvider(
    {
      provide: injectionKey,
      useClass: A,
      scope,
    },
    moduleRef.token,
  );

  for (const provider of additionalProviders) {
    nestContainer.addProvider(provider, moduleRef.token);
  }

  nestContainer.addInjectable(
    {
      provide: injectionKey,
      useClass: A,
      scope,
    },
    moduleRef.token,
    'interceptor',
  );

  const modules = nestContainer.getModules();
  await instanceLoader.createInstancesOfDependencies(modules);

  const applicationContext = new NestApplicationContext(nestContainer);
  return applicationContext;
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T17:20:24.379Z
File: [3 files: nest-express-application.interface.ts, app.module.ts, If module's name is well defined]
Functions Extracted: 1


Function 1: createClientOptions
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
createClientOptions(): Promise<ClientOptions> | ClientOptions {
    return {
      transport: this.configService.get('transport'),
      options: {
        tlsOptions: { ca: caCert },
      },
    };
  }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T17:20:24.699Z
File: [2 files: injectable.decorator.ts, reflector.service.ts]
Functions Extracted: 3


Function 1: Injectable
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
export function Injectable(options?: InjectableOptions): ClassDecorator {
  return (target: object) => {
    Reflect.defineMetadata(INJECTABLE_WATERMARK, true, target);
    Reflect.defineMetadata(SCOPE_OPTIONS_METADATA, options, target);
  };
}
--------------------------------------------------------------------------------


Function 2: createDecorator
Language: TypeScript
Lines: 13
Full Code:
--------------------------------------------------------------------------------
static createDecorator<TParam, TTransformed = TParam>(
    options: CreateDecoratorOptions<TParam, TTransformed> = {},
  ): ReflectableDecorator<TParam, TTransformed> {
    const metadataKey = options.key ?? uid(21);
    const decoratorFn =
      (metadataValue: TParam) =>
      (target: object | Function, key?: string | symbol, descriptor?: any) => {
        const value = options.transform
          ? options.transform(metadataValue)
          : metadataValue;
        SetMetadata(metadataKey, value ?? {})(target, key!, descriptor);
      };

    decoratorFn.KEY = metadataKey;
    return decoratorFn as ReflectableDecorator<TParam, TTransformed>;
  }
--------------------------------------------------------------------------------


Function 3: getAllAndMerge
Language: TypeScript
Lines: 20
Full Code:
--------------------------------------------------------------------------------
public getAllAndMerge<TResult extends any[] | object = any[], TKey = any>(
    metadataKeyOrDecorator: TKey,
    targets: (Type<any> | Function)[],
  ): TResult {
    const metadataCollection = this.getAll<any[], TKey>(
      metadataKeyOrDecorator,
      targets,
    ).filter(item => item !== undefined);

    if (isEmpty(metadataCollection)) {
      return metadataCollection as TResult;
    }
    if (metadataCollection.length === 1) {
      const value = metadataCollection[0];
      if (isObject(value)) {
        return value as TResult;
      }
      return metadataCollection as TResult;
    }
    return metadataCollection.reduce((a, b) => {
      if (Array.isArray(a)) {
        return a.concat(b);
      }
      if (isObject(a) && isObject(b)) {
        return {
          ...a,
          ...b,
        };
      }
      return [a, b];
    });
  }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T17:20:27.486Z
File: [2 files: reflector.service.ts, app.module.ts]
Functions Extracted: 3


Function 1: createDecorator
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
static createDecorator<TParam, TTransformed = TParam>(options: CreateDecoratorOptions<TParam, TTransformed> = {}): ReflectableDecorator<TParam, TTransformed> {
    const metadataKey = options.key ?? uid(21);
    const decoratorFn =
      (metadataValue: TParam) =>
      (target: object | Function, key?: string | symbol, descriptor?: any) => {
        const value = options.transform
          ? options.transform(metadataValue)
          : metadataValue;
        SetMetadata(metadataKey, value ?? {})(target, key!, descriptor);
      };

    decoratorFn.KEY = metadataKey;
    return decoratorFn as ReflectableDecorator<TParam, TTransformed>;
  }
--------------------------------------------------------------------------------


Function 2: getAllAndMerge
Language: TypeScript
Lines: 20
Full Code:
--------------------------------------------------------------------------------
public getAllAndMerge<TResult extends any[] | object = any[], TKey = any>(metadataKeyOrDecorator: TKey, targets: (Type<any> | Function)[]): TResult {
    const metadataCollection = this.getAll<any[], TKey>(
      metadataKeyOrDecorator,
      targets,
    ).filter(item => item !== undefined);

    if (isEmpty(metadataCollection)) {
      return metadataCollection as TResult;
    }
    if (metadataCollection.length === 1) {
      const value = metadataCollection[0];
      if (isObject(value)) {
        return value as TResult;
      }
      return metadataCollection as TResult;
    }
    return metadataCollection.reduce((a, b) => {
      if (Array.isArray(a)) {
        return a.concat(b);
      }
      if (isObject(a) && isObject(b)) {
        return {
          ...a,
          ...b,
        };
      }
      return [a, b];
    });
  }
--------------------------------------------------------------------------------


Function 3: createClientOptions
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
createClientOptions(): Promise<ClientOptions> | ClientOptions {
    return {
      transport: this.configService.get('transport'),
      options: {},
    };
  }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T17:20:27.834Z
File: [3 files: on-app-boostrap.spec.ts, apply-decorators.spec.ts, request-mapping.decorator.spec.ts]
Functions Extracted: 2


Function 1: testDecorator1
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function testDecorator1(param: number) {
    return (target: any) => {
      target.myParam = param;
    };
  }
--------------------------------------------------------------------------------


Function 2: testDecorator2
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function testDecorator2(param1: number, param2: number) {
    return (target: any) => {
      target.myParam = (target.myParam || 0) + param1;
      target.myParam2 = param2;
    };
  }
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:20:27.839Z
Question Type: true-false
Function: createClientOptions
Function Size: 330 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: createClientOptions (TypeScript)\n// Creates client options for the microservice using the configuration service.\n\ncreateClientOptions(): Promise<ClientOptions> | ClientOptions {\n    return {\n      transport: this.configService.get('transport'),\n      options: {\n        tlsOptions: { ca:
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:20:31.421Z
Question Type: select-all
Function: createClientOptions
Function Size: 330 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: createClientOptions (TypeScript)\n// Creates client options for the microservice using the configuration service.\n\ncreateClientOptions(): Promise<ClientOptions> | ClientOptions {\n    return {\n      transport: this.configService.get('transport'),\n      options: {\n        tlsOptions: { ca:
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:20:31.474Z
Question Type: select-all
Function: createClientOptions
Function Size: 330 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: createClientOptions (TypeScript)\n// Creates client options for the microservice using the configuration service.\n\ncreateClientOptions(): Promise<ClientOptions> | ClientOptions {\n    return {\n      transport: this.configService.get('transport'),\n      options: {\n        tlsOptions: { ca:
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:20:34.100Z
Question Type: select-all
Function: createClientOptions
Function Size: 330 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: createClientOptions (TypeScript)\n// Creates client options for the microservice using the configuration service.\n\ncreateClientOptions(): Promise<ClientOptions> | ClientOptions {\n    return {\n      transport: this.configService.get('transport'),\n      options: {\n        tlsOptions: { ca:
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:20:34.934Z
Question Type: function-variant
Function: createClientOptions
Function Size: 330 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: createClientOptions (TypeScript)\n// Creates client options for the microservice using the configuration service.\n\ncreateClientOptions(): Promise<ClientOptions> | ClientOptions {\n    return {\n      transport: this.configService.get('transport'),\n      options: {\n        tlsOptions: { ca:
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760894090440
Repository: Unknown
Total Questions Generated: 4
Total Chunks Processed: 1
Ended: 2025-10-19T17:20:34.969Z
================================================================================


--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:20:41.048Z
Question Type: function-variant
Function: createClientOptions
Function Size: 295 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: createClientOptions (TypeScript)\n// Creates client options for the microservices client using the configuration service.\n\ncreateClientOptions(): Promise<ClientOptions> | ClientOptions {\n    return {\n      transport: this.configService.get('transport'),\n      options: {},\n    };\n  }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:20:42.204Z
Question Type: order-sequence
Function: createClientOptions
Function Size: 295 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: createClientOptions (TypeScript)\n// Creates client options for the microservices client using the configuration service.\n\ncreateClientOptions(): Promise<ClientOptions> | ClientOptions {\n    return {\n      transport: this.configService.get('transport'),\n      options: {},\n    };\n  }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:20:43.922Z
Question Type: select-all
Function: getAllAndMerge
Function Size: 991 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getAllAndMerge (TypeScript)\n// Retrieve metadata for a specified key or decorator for a specified set of targets and merge results.\n\npublic getAllAndMerge<TResult extends any[] | object = any[], TKey = any>(metadataKeyOrDecorator: TKey, targets: (Type<any> | Function)[]): TResult {\n    
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:20:48.209Z
Question Type: select-all
Function: createClientOptions
Function Size: 295 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: createClientOptions (TypeScript)\n// Creates client options for the microservices client using the configuration service.\n\ncreateClientOptions(): Promise<ClientOptions> | ClientOptions {\n    return {\n      transport: this.configService.get('transport'),\n      options: {},\n    };\n  }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:20:48.419Z
Question Type: select-all
Function: createDecorator
Function Size: 778 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: createDecorator (TypeScript)\n// Creates a decorator that can be used to decorate classes and methods with metadata.\n\nstatic createDecorator<TParam, TTransformed = TParam>(options: CreateDecoratorOptions<TParam, TTransformed> = {}): ReflectableDecorator<TParam, TTransformed> {\n    const 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:20:53.752Z
Question Type: true-false
Function: createDecorator
Function Size: 778 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: createDecorator (TypeScript)\n// Creates a decorator that can be used to decorate classes and methods with metadata.\n\nstatic createDecorator<TParam, TTransformed = TParam>(options: CreateDecoratorOptions<TParam, TTransformed> = {}): ReflectableDecorator<TParam, TTransformed> {\n    const 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:20:53.763Z
Question Type: order-sequence
Function: createDecorator
Function Size: 778 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: createDecorator (TypeScript)\n// Creates a decorator that can be used to decorate classes and methods with metadata.\n\nstatic createDecorator<TParam, TTransformed = TParam>(options: CreateDecoratorOptions<TParam, TTransformed> = {}): ReflectableDecorator<TParam, TTransformed> {\n    const 
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760894090440
Repository: Unknown
Total Questions Generated: 6
Total Chunks Processed: 3
Ended: 2025-10-19T17:20:53.796Z
================================================================================


--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:20:59.690Z
Question Type: select-all
Function: testDecorator2
Function Size: 333 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: testDecorator2 (TypeScript)\n// A decorator that modifies the target by adding param1 to 'myParam' and setting 'myParam2' with param2.\n\nfunction testDecorator2(param1: number, param2: number) {\n    return (target: any) => {\n      target.myParam = (target.myParam || 0) + param1;\n      tar
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:21:00.172Z
Question Type: select-all
Function: testDecorator2
Function Size: 333 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: testDecorator2 (TypeScript)\n// A decorator that modifies the target by adding param1 to 'myParam' and setting 'myParam2' with param2.\n\nfunction testDecorator2(param1: number, param2: number) {\n    return (target: any) => {\n      target.myParam = (target.myParam || 0) + param1;\n      tar
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:21:01.025Z
Question Type: order-sequence
Function: testDecorator2
Function Size: 333 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: testDecorator2 (TypeScript)\n// A decorator that modifies the target by adding param1 to 'myParam' and setting 'myParam2' with param2.\n\nfunction testDecorator2(param1: number, param2: number) {\n    return (target: any) => {\n      target.myParam = (target.myParam || 0) + param1;\n      tar
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:21:02.237Z
Question Type: function-variant
Function: testDecorator2
Function Size: 333 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: testDecorator2 (TypeScript)\n// A decorator that modifies the target by adding param1 to 'myParam' and setting 'myParam2' with param2.\n\nfunction testDecorator2(param1: number, param2: number) {\n    return (target: any) => {\n      target.myParam = (target.myParam || 0) + param1;\n      tar
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:21:05.164Z
Question Type: true-false
Function: testDecorator1
Function Size: 242 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: testDecorator1 (TypeScript)\n// A decorator that sets a property 'myParam' on the target with the provided parameter.\n\nfunction testDecorator1(param: number) {\n    return (target: any) => {\n      target.myParam = param;\n    };\n  }
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760894090440
Repository: Unknown
Total Questions Generated: 5
Total Chunks Processed: 2
Ended: 2025-10-19T17:21:05.198Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T17:21:35.457Z
File: pallets-flask-88a65bb/src/flask/sessions.py
Functions Extracted: 3


Function 1: __init__
Language: Python
Lines: 6
Full Code:
--------------------------------------------------------------------------------
def __init__(self, initial: c.Mapping[str, t.Any] | c.Iterable[tuple[str, t.Any]] | None = None) -> None:
        def on_update(self: te.Self) -> None:
            self.modified = True
            self.accessed = True

        super().__init__(initial, on_update)
--------------------------------------------------------------------------------


Function 2: open_session
Language: Python
Lines: 12
Full Code:
--------------------------------------------------------------------------------
def open_session(self, app: Flask, request: Request) -> SecureCookieSession | None:
        s = self.get_signing_serializer(app)
        if s is None:
            return None
        val = request.cookies.get(self.get_cookie_name(app))
        if not val:
            return self.session_class()
        max_age = int(app.permanent_session_lifetime.total_seconds())
        try:
            data = s.loads(val, max_age=max_age)
            return self.session_class(data)
        except BadSignature:
            return self.session_class()
--------------------------------------------------------------------------------


Function 3: save_session
Language: Python
Lines: 25
Full Code:
--------------------------------------------------------------------------------
def save_session(self, app: Flask, session: SessionMixin, response: Response) -> None:
        name = self.get_cookie_name(app)
        domain = self.get_cookie_domain(app)
        path = self.get_cookie_path(app)
        secure = self.get_cookie_secure(app)
        partitioned = self.get_cookie_partitioned(app)
        samesite = self.get_cookie_samesite(app)
        httponly = self.get_cookie_httponly(app)

        if session.accessed:
            response.vary.add("Cookie")

        if not session:
            if session.modified:
                response.delete_cookie(
                    name,
                    domain=domain,
                    path=path,
                    secure=secure,
                    partitioned=partitioned,
                    samesite=samesite,
                    httponly=httponly,
                )
                response.vary.add("Cookie")

            return

        if not self.should_set_cookie(app, session):
            return

        expires = self.get_expiration_time(app, session)
        val = self.get_signing_serializer(app).dumps(dict(session))
        response.set_cookie(
            name,
            val,
            expires=expires,
            httponly=httponly,
            domain=domain,
            path=path,
            secure=secure,
            partitioned=partitioned,
            samesite=samesite,
        )
        response.vary.add("Cookie")
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T17:21:39.226Z
File: pallets-flask-88a65bb/src/flask/config.py
Functions Extracted: 7


Function 1: from_envvar
Language: Python
Lines: 10
Full Code:
--------------------------------------------------------------------------------
def from_envvar(self, variable_name: str, silent: bool = False) -> bool:
        rv = os.environ.get(variable_name)
        if not rv:
            if silent:
                return False
            raise RuntimeError(
                f"The environment variable {variable_name!r} is not set"
                " and as such configuration could not be loaded. Set"
                " this variable and make it point to a configuration"
                " file"
            )
        return self.from_pyfile(rv, silent=silent)
--------------------------------------------------------------------------------


Function 2: from_prefixed_env
Language: Python
Lines: 20
Full Code:
--------------------------------------------------------------------------------
def from_prefixed_env(self, prefix: str = "FLASK", *, loads: t.Callable[[str], t.Any] = json.loads) -> bool:
        prefix = f"{prefix}_"

        for key in sorted(os.environ):
            if not key.startswith(prefix):
                continue

            value = os.environ[key]
            key = key.removeprefix(prefix)

            try:
                value = loads(value)
            except Exception:
                pass

            if "__" not in key:
                self[key] = value
                continue

            current = self
            *parts, tail = key.split("__")

            for part in parts:
                if part not in current:
                    current[part] = {}

                current = current[part]

            current[tail] = value

        return True
--------------------------------------------------------------------------------


Function 3: from_pyfile
Language: Python
Lines: 15
Full Code:
--------------------------------------------------------------------------------
def from_pyfile(self, filename: str | os.PathLike[str], silent: bool = False) -> bool:
        filename = os.path.join(self.root_path, filename)
        d = types.ModuleType("config")
        d.__file__ = filename
        try:
            with open(filename, mode="rb") as config_file:
                exec(compile(config_file.read(), filename, "exec"), d.__dict__)
        except OSError as e:
            if silent and e.errno in (errno.ENOENT, errno.EISDIR, errno.ENOTDIR):
                return False
            e.strerror = f"Unable to load configuration file ({e.strerror})"
            raise
        self.from_object(d)
        return True
--------------------------------------------------------------------------------


Function 4: from_object
Language: Python
Lines: 8
Full Code:
--------------------------------------------------------------------------------
def from_object(self, obj: object | str) -> None:
        if isinstance(obj, str):
            obj = import_string(obj)
        for key in dir(obj):
            if key.isupper():
                self[key] = getattr(obj, key)
--------------------------------------------------------------------------------


Function 5: from_file
Language: Python
Lines: 15
Full Code:
--------------------------------------------------------------------------------
def from_file(self, filename: str | os.PathLike[str], load: t.Callable[[t.IO[t.Any]], t.Mapping[str, t.Any]], silent: bool = False, text: bool = True) -> bool:
        filename = os.path.join(self.root_path, filename)

        try:
            with open(filename, "r" if text else "rb") as f:
                obj = load(f)
        except OSError as e:
            if silent and e.errno in (errno.ENOENT, errno.EISDIR):
                return False

            e.strerror = f"Unable to load configuration file ({e.strerror})"
            raise

        return self.from_mapping(obj)
--------------------------------------------------------------------------------


Function 6: from_mapping
Language: Python
Lines: 10
Full Code:
--------------------------------------------------------------------------------
def from_mapping(self, mapping: t.Mapping[str, t.Any] | None = None, **kwargs: t.Any) -> bool:
        mappings: dict[str, t.Any] = {}
        if mapping is not None:
            mappings.update(mapping)
        mappings.update(kwargs)
        for key, value in mappings.items():
            if key.isupper():
                self[key] = value
        return True
--------------------------------------------------------------------------------


Function 7: get_namespace
Language: Python
Lines: 12
Full Code:
--------------------------------------------------------------------------------
def get_namespace(self, namespace: str, lowercase: bool = True, trim_namespace: bool = True) -> dict[str, t.Any]:
        rv = {}
        for k, v in self.items():
            if not k.startswith(namespace):
                continue
            if trim_namespace:
                key = k[len(namespace):]
            else:
                key = k
            if lowercase:
                key = key.lower()
            rv[key] = v
        return rv
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T17:21:40.488Z
File: pallets-flask-88a65bb/tests/test_basic.py
Functions Extracted: 5


Function 1: test_options_work
Language: Python
Lines: 8
Full Code:
--------------------------------------------------------------------------------
def test_options_work(app, client):
    @app.route("/", methods=["GET", "POST"])
    def index():
        return "Hello World"

    rv = client.open("/", method="OPTIONS")
    assert sorted(rv.allow) == ["GET", "HEAD", "OPTIONS", "POST"]
    assert rv.data == b""
--------------------------------------------------------------------------------


Function 2: test_method_route
Language: Python
Lines: 10
Full Code:
--------------------------------------------------------------------------------
@pytest.mark.parametrize("method", ["get", "post", "put", "delete", "patch"])
def test_method_route(app, client, method):
    method_route = getattr(app, method)
    client_method = getattr(client, method)

    @method_route("/")
    def hello():
        return "Hello"

    assert client_method("/").data == b"Hello"
--------------------------------------------------------------------------------


Function 3: test_provide_automatic_options_kwarg
Language: Python
Lines: 20
Full Code:
--------------------------------------------------------------------------------
def test_provide_automatic_options_kwarg(app, client):
    def index():
        return flask.request.method

    def more():
        return flask.request.method

    app.add_url_rule("/", view_func=index, provide_automatic_options=False)
    app.add_url_rule(
        "/more",
        view_func=more,
        methods=["GET", "POST"],
        provide_automatic_options=False,
    )
    assert client.get("/").data == b"GET"

    rv = client.post("/")
    assert rv.status_code == 405
    assert sorted(rv.allow) == ["GET", "HEAD"]

    rv = client.open("/", method="OPTIONS")
    assert rv.status_code == 405

    rv = client.head("/")
    assert rv.status_code == 200
    assert not rv.data  # head truncates
    assert client.post("/more").data == b"POST"
    assert client.get("/more").data == b"GET"

    rv = client.delete("/more")
    assert rv.status_code == 405
    assert sorted(rv.allow) == ["GET", "HEAD", "POST"]

    rv = client.open("/more", method="OPTIONS")
    assert rv.status_code == 405
--------------------------------------------------------------------------------


Function 4: test_session
Language: Python
Lines: 20
Full Code:
--------------------------------------------------------------------------------
def test_session(app, client):
    @app.route("/set", methods=["POST"])
    def set():
        assert not flask.session.accessed
        assert not flask.session.modified
        flask.session["value"] = flask.request.form["value"]
        assert flask.session.accessed
        assert flask.session.modified
        return "value set"

    @app.route("/get")
    def get():
        assert not flask.session.accessed
        assert not flask.session.modified
        v = flask.session.get("value", "None")
        assert flask.session.accessed
        assert not flask.session.modified
        return v

    assert client.post("/set", data={"value": "42"}).data == b"value set"
    assert client.get("/get").data == b"42"
--------------------------------------------------------------------------------


Function 5: test_error_handling
Language: Python
Lines: 20
Full Code:
--------------------------------------------------------------------------------
def test_error_handling(app, client):
    app.testing = False

    @app.errorhandler(404)
    def not_found(e):
        return "not found", 404

    @app.errorhandler(500)
    def internal_server_error(e):
        return "internal server error", 500

    @app.route("/")
    def index():
        flask.abort(404)

    @app.route("/error")
    def error():
        raise ZeroDivisionError

    @app.route("/forbidden")
    def error2():
        flask.abort(403)

    rv = client.get("/")
    assert rv.status_code == 404
    assert rv.data == b"not found"
    rv = client.get("/error")
    assert rv.status_code == 500
    assert b"internal server error" == rv.data
    rv = client.get("/forbidden")
    assert rv.status_code == 403
    assert b"forbidden" == rv.data
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:21:45.106Z
Question Type: multiple-choice
Function: save_session
Function Size: 1548 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: save_session (Python)\n// Saves the session data to a cookie, handling various configurations and conditions.\n\ndef save_session(self, app: Flask, session: SessionMixin, response: Response) -> None:\n        name = self.get_cookie_name(app)\n        domain = self.get_cookie_domain(app)\n    
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:21:49.199Z
Question Type: function-variant
Function: open_session
Function Size: 647 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: open_session (Python)\n// Opens a session by retrieving and deserializing the session cookie.\n\ndef open_session(self, app: Flask, request: Request) -> SecureCookieSession | None:\n        s = self.get_signing_serializer(app)\n        if s is None:\n            return None\n        val = requ
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:21:49.532Z
Question Type: function-variant
Function: __init__
Function Size: 366 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: __init__ (Python)\n// Initializes the SecureCookieSession, setting up an update callback.\n\ndef __init__(self, initial: c.Mapping[str, t.Any] | c.Iterable[tuple[str, t.Any]] | None = None) -> None:\n        def on_update(self: te.Self) -> None:\n            self.modified = True\n            
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:21:50.829Z
Question Type: function-variant
Function: save_session
Function Size: 1548 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: save_session (Python)\n// Saves the session data to a cookie, handling various configurations and conditions.\n\ndef save_session(self, app: Flask, session: SessionMixin, response: Response) -> None:\n        name = self.get_cookie_name(app)\n        domain = self.get_cookie_domain(app)\n    
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:21:52.828Z
Question Type: select-all
Function: open_session
Function Size: 647 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: open_session (Python)\n// Opens a session by retrieving and deserializing the session cookie.\n\ndef open_session(self, app: Flask, request: Request) -> SecureCookieSession | None:\n        s = self.get_signing_serializer(app)\n        if s is None:\n            return None\n        val = requ
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:21:53.870Z
Question Type: true-false
Function: __init__
Function Size: 366 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: __init__ (Python)\n// Initializes the SecureCookieSession, setting up an update callback.\n\ndef __init__(self, initial: c.Mapping[str, t.Any] | c.Iterable[tuple[str, t.Any]] | None = None) -> None:\n        def on_update(self: te.Self) -> None:\n            self.modified = True\n            
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760894090440
Repository: Unknown
Total Questions Generated: 6
Total Chunks Processed: 3
Ended: 2025-10-19T17:21:53.909Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T17:21:59.173Z
File: pallets-flask-88a65bb/src/flask/app.py
Functions Extracted: 4


Function 1: __init__
Language: Python
Lines: 42
Full Code:
--------------------------------------------------------------------------------
def __init__(
        self,
        import_name: str,
        static_url_path: str | None = None,
        static_folder: str | os.PathLike[str] | None = "static",
        static_host: str | None = None,
        host_matching: bool = False,
        subdomain_matching: bool = False,
        template_folder: str | os.PathLike[str] | None = "templates",
        instance_path: str | None = None,
        instance_relative_config: bool = False,
        root_path: str | None = None,
    ):
        super().__init__(
            import_name=import_name,
            static_url_path=static_url_path,
            static_folder=static_folder,
            static_host=static_host,
            host_matching=host_matching,
            subdomain_matching=subdomain_matching,
            template_folder=template_folder,
            instance_path=instance_path,
            instance_relative_config=instance_relative_config,
            root_path=root_path,
        )

        self.cli = cli.AppGroup()
        self.cli.name = self.name

        if self.has_static_folder:
            assert bool(static_host) == host_matching, (
                "Invalid static_host/host_matching combination"
            )
            self_ref = weakref.ref(self)
            self.add_url_rule(
                f"{self.static_url_path}/<path:filename>",
                endpoint="static",
                host=static_host,
                view_func=lambda **kw: self_ref().send_static_file(**kw),  # type: ignore # noqa: B950
            )
--------------------------------------------------------------------------------


Function 2: full_dispatch_request
Language: Python
Lines: 15
Full Code:
--------------------------------------------------------------------------------
def full_dispatch_request(self) -> Response:
        self._got_first_request = True

        try:
            request_started.send(self, _async_wrapper=self.ensure_sync)
            rv = self.preprocess_request()
            if rv is None:
                rv = self.dispatch_request()
        except Exception as e:
            rv = self.handle_user_exception(e)
        return self.finalize_request(rv)
--------------------------------------------------------------------------------


Function 3: make_response
Language: Python
Lines: 42
Full Code:
--------------------------------------------------------------------------------
def make_response(self, rv: ft.ResponseReturnValue) -> Response:
        status: int | None = None
        headers: HeadersValue | None = None

        if isinstance(rv, tuple):
            len_rv = len(rv)

            if len_rv == 3:
                rv, status, headers = rv  # type: ignore[misc]
            elif len_rv == 2:
                if isinstance(rv[1], (Headers, dict, tuple, list)):
                    rv, headers = rv  # pyright: ignore
                else:
                    rv, status = rv  # type: ignore[assignment,misc]
            else:
                raise TypeError(
                    "The view function did not return a valid response tuple."
                )

        if rv is None:
            raise TypeError(
                f"The view function for {request.endpoint!r} did not"
                " return a valid response."
            )

        if not isinstance(rv, self.response_class):
            if isinstance(rv, (str, bytes, bytearray)) or isinstance(rv, cabc.Iterator):
                rv = self.response_class(
                    rv,
                    status=status,
                    headers=headers,
                )
                status = headers = None
            elif isinstance(rv, (dict, list)):
                rv = self.json.response(rv)
            elif isinstance(rv, BaseResponse) or callable(rv):
                try:
                    rv = self.response_class.force_type(
                        rv,
                        request.environ,
                    )
                except TypeError as e:
                    raise TypeError(
                        f"{e}
The view function did not return a valid"
                    ) from None
            else:
                raise TypeError(
                    "The view function did not return a valid"
                )

        rv = t.cast(Response, rv)
        if status is not None:
            if isinstance(status, (str, bytes, bytearray)):
                rv.status = status
            else:
                rv.status_code = status

        if headers:
            rv.headers.update(headers)

        return rv
--------------------------------------------------------------------------------


Function 4: handle_exception
Language: Python
Lines: 29
Full Code:
--------------------------------------------------------------------------------
def handle_exception(self, e: Exception) -> Response:
        exc_info = sys.exc_info()
        got_request_exception.send(self, _async_wrapper=self.ensure_sync, exception=e)
        propagate = self.config["PROPAGATE_EXCEPTIONS"]

        if propagate is None:
            propagate = self.testing or self.debug

        if propagate:
            if exc_info[1] is e:
                raise
            raise e

        self.log_exception(exc_info)
        server_error: InternalServerError | ft.ResponseReturnValue
        server_error = InternalServerError(original_exception=e)
        handler = self._find_error_handler(server_error, request.blueprints)

        if handler is not None:
            server_error = self.ensure_sync(handler)(server_error)

        return self.finalize_request(server_error, from_error_handler=True)
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T17:22:07.904Z
File: pallets-flask-88a65bb/src/flask/sansio/app.py
Functions Extracted: 4


Function 1: __init__
Language: Python
Lines: 46
Full Code:
--------------------------------------------------------------------------------
def __init__(
        self,
        import_name: str,
        static_url_path: str | None = None,
        static_folder: str | os.PathLike[str] | None = "static",
        static_host: str | None = None,
        host_matching: bool = False,
        subdomain_matching: bool = False,
        template_folder: str | os.PathLike[str] | None = "templates",
        instance_path: str | None = None,
        instance_relative_config: bool = False,
        root_path: str | None = None,
    ) -> None:
        super().__init__(
            import_name=import_name,
            static_folder=static_folder,
            static_url_path=static_url_path,
            template_folder=template_folder,
            root_path=root_path,
        )

        if instance_path is None:
            instance_path = self.auto_find_instance_path()
        elif not os.path.isabs(instance_path):
            raise ValueError(
                "If an instance path is provided it must be absolute."
                " A relative path was given instead."
            )

        self.instance_path = instance_path

        self.config = self.make_config(instance_relative_config)

        self.aborter = self.make_aborter()

        self.json: JSONProvider = self.json_provider_class(self)

        self.url_build_error_handlers: list[
            t.Callable[[Exception, str, dict[str, t.Any]], str]
        ] = []

        self.teardown_appcontext_funcs: list[ft.TeardownCallable] = []

        self.shell_context_processors: list[ft.ShellContextProcessorCallable] = []

        self.blueprints: dict[str, Blueprint] = {}

        self.extensions: dict[str, t.Any] = {}

        self.url_map = self.url_map_class(host_matching=host_matching)

        self.subdomain_matching = subdomain_matching

        self._got_first_request = False
--------------------------------------------------------------------------------


Function 2: make_config
Language: Python
Lines: 7
Full Code:
--------------------------------------------------------------------------------
def make_config(self, instance_relative: bool = False) -> Config:
        root_path = self.root_path
        if instance_relative:
            root_path = self.instance_path
        defaults = dict(self.default_config)
        defaults["DEBUG"] = get_debug_flag()
        return self.config_class(root_path, defaults)
--------------------------------------------------------------------------------


Function 3: redirect
Language: Python
Lines: 5
Full Code:
--------------------------------------------------------------------------------
def redirect(self, location: str, code: int = 302) -> BaseResponse:
        return _wz_redirect(
            location,
            code=code,
            Response=self.response_class,  # type: ignore[arg-type]
        )
--------------------------------------------------------------------------------


Function 4: handle_url_build_error
Language: Python
Lines: 13
Full Code:
--------------------------------------------------------------------------------
def handle_url_build_error(
        self, error: BuildError, endpoint: str, values: dict[str, t.Any]
    ) -> str:
        for handler in self.url_build_error_handlers:
            try:
                rv = handler(error, endpoint, values)
            except BuildError as e:
                error = e
            else:
                if rv is not None:
                    return rv

        if error is sys.exc_info()[1]:
            raise

        raise error
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T17:22:08.594Z
File: pallets-flask-88a65bb/src/flask/config.py
Functions Extracted: 7


Function 1: from_envvar
Language: Python
Lines: 10
Full Code:
--------------------------------------------------------------------------------
def from_envvar(self, variable_name: str, silent: bool = False) -> bool:
        rv = os.environ.get(variable_name)
        if not rv:
            if silent:
                return False
            raise RuntimeError(
                f"The environment variable {variable_name!r} is not set"
                " and as such configuration could not be loaded. Set"
                " this variable and make it point to a configuration"
                " file"
            )
        return self.from_pyfile(rv, silent=silent)
--------------------------------------------------------------------------------


Function 2: from_prefixed_env
Language: Python
Lines: 20
Full Code:
--------------------------------------------------------------------------------
def from_prefixed_env(self, prefix: str = "FLASK", *, loads: t.Callable[[str], t.Any] = json.loads) -> bool:
        prefix = f"{prefix}_"

        for key in sorted(os.environ):
            if not key.startswith(prefix):
                continue

            value = os.environ[key]
            key = key.removeprefix(prefix)

            try:
                value = loads(value)
            except Exception:
                pass

            if "__" not in key:
                self[key] = value
                continue

            current = self
            *parts, tail = key.split("__")

            for part in parts:
                if part not in current:
                    current[part] = {}

                current = current[part]

            current[tail] = value

        return True
--------------------------------------------------------------------------------


Function 3: from_pyfile
Language: Python
Lines: 15
Full Code:
--------------------------------------------------------------------------------
def from_pyfile(self, filename: str | os.PathLike[str], silent: bool = False) -> bool:
        filename = os.path.join(self.root_path, filename)
        d = types.ModuleType("config")
        d.__file__ = filename
        try:
            with open(filename, mode="rb") as config_file:
                exec(compile(config_file.read(), filename, "exec"), d.__dict__)
        except OSError as e:
            if silent and e.errno in (errno.ENOENT, errno.EISDIR, errno.ENOTDIR):
                return False
            e.strerror = f"Unable to load configuration file ({e.strerror})"
            raise
        self.from_object(d)
        return True
--------------------------------------------------------------------------------


Function 4: from_object
Language: Python
Lines: 8
Full Code:
--------------------------------------------------------------------------------
def from_object(self, obj: object | str) -> None:
        if isinstance(obj, str):
            obj = import_string(obj)
        for key in dir(obj):
            if key.isupper():
                self[key] = getattr(obj, key)
--------------------------------------------------------------------------------


Function 5: from_file
Language: Python
Lines: 15
Full Code:
--------------------------------------------------------------------------------
def from_file(self, filename: str | os.PathLike[str], load: t.Callable[[t.IO[t.Any]], t.Mapping[str, t.Any]], silent: bool = False, text: bool = True) -> bool:
        filename = os.path.join(self.root_path, filename)

        try:
            with open(filename, "r" if text else "rb") as f:
                obj = load(f)
        except OSError as e:
            if silent and e.errno in (errno.ENOENT, errno.EISDIR):
                return False

            e.strerror = f"Unable to load configuration file ({e.strerror})"
            raise

        return self.from_mapping(obj)
--------------------------------------------------------------------------------


Function 6: from_mapping
Language: Python
Lines: 10
Full Code:
--------------------------------------------------------------------------------
def from_mapping(self, mapping: t.Mapping[str, t.Any] | None = None, **kwargs: t.Any) -> bool:
        mappings: dict[str, t.Any] = {}
        if mapping is not None:
            mappings.update(mapping)
        mappings.update(kwargs)
        for key, value in mappings.items():
            if key.isupper():
                self[key] = value
        return True
--------------------------------------------------------------------------------


Function 7: get_namespace
Language: Python
Lines: 12
Full Code:
--------------------------------------------------------------------------------
def get_namespace(self, namespace: str, lowercase: bool = True, trim_namespace: bool = True) -> dict[str, t.Any]:
        rv = {}
        for k, v in self.items():
            if not k.startswith(namespace):
                continue
            if trim_namespace:
                key = k[len(namespace) :]
            else:
                key = k
            if lowercase:
                key = key.lower()
            rv[key] = v
        return rv
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T17:22:09.346Z
File: pallets-flask-88a65bb/src/flask/sansio/scaffold.py
Functions Extracted: 4


Function 1: setupmethod
Language: Python
Lines: 6
Full Code:
--------------------------------------------------------------------------------
def setupmethod(f: F) -> F:
    f_name = f.__name__

    def wrapper_func(self: Scaffold, *args: t.Any, **kwargs: t.Any) -> t.Any:
        self._check_setup_finished(f_name)
        return f(self, *args, **kwargs)

    return t.cast(F, update_wrapper(wrapper_func, f))
--------------------------------------------------------------------------------


Function 2: __init__
Language: Python
Lines: 17
Full Code:
--------------------------------------------------------------------------------
def __init__(self, import_name: str, static_folder: str | os.PathLike[str] | None = None, static_url_path: str | None = None, template_folder: str | os.PathLike[str] | None = None, root_path: str | None = None):
        self.import_name = import_name
        self.static_folder = static_folder
        self.static_url_path = static_url_path
        self.template_folder = template_folder
        if root_path is None:
            root_path = get_root_path(self.import_name)
        self.root_path = root_path
        self.view_functions: dict[str, ft.RouteCallable] = {}
        self.error_handler_spec: dict[ft.AppOrBlueprintKey, dict[int | None, dict[type[Exception], ft.ErrorHandlerCallable]]] = defaultdict(lambda: defaultdict(dict))
        self.before_request_funcs: dict[ft.AppOrBlueprintKey, list[ft.BeforeRequestCallable]] = defaultdict(list)
        self.after_request_funcs: dict[ft.AppOrBlueprintKey, list[ft.AfterRequestCallable[t.Any]]] = defaultdict(list)
        self.teardown_request_funcs: dict[ft.AppOrBlueprintKey, list[ft.TeardownCallable]] = defaultdict(list)
        self.template_context_processors: dict[ft.AppOrBlueprintKey, list[ft.TemplateContextProcessorCallable]] = defaultdict(list, {None: [_default_template_ctx_processor]})
        self.url_value_preprocessors: dict[ft.AppOrBlueprintKey, list[ft.URLValuePreprocessorCallable]] = defaultdict(list)
        self.url_default_functions: dict[ft.AppOrBlueprintKey, list[ft.URLDefaultCallable]] = defaultdict(list)
--------------------------------------------------------------------------------


Function 3: route
Language: Python
Lines: 6
Full Code:
--------------------------------------------------------------------------------
def route(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:
        def decorator(f: T_route) -> T_route:
            endpoint = options.pop("endpoint", None)
            self.add_url_rule(rule, endpoint, f, **options)
            return f

        return decorator
--------------------------------------------------------------------------------


Function 4: errorhandler
Language: Python
Lines: 6
Full Code:
--------------------------------------------------------------------------------
def errorhandler(self, code_or_exception: type[Exception] | int) -> t.Callable[[T_error_handler], T_error_handler]:
        def decorator(f: T_error_handler) -> T_error_handler:
            self.register_error_handler(code_or_exception, f)
            return f

        return decorator
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T17:22:11.810Z
File: pallets-flask-88a65bb/tests/test_helpers.py
Functions Extracted: 6


Function 1: test_send_file
Language: Python
Lines: 8
Full Code:
--------------------------------------------------------------------------------
def test_send_file(self, app, req_ctx):
        rv = flask.send_file("static/index.html")
        assert rv.direct_passthrough
        assert rv.mimetype == "text/html"

        with app.open_resource("static/index.html") as f:
            rv.direct_passthrough = False
            assert rv.data == f.read()

        rv.close()
--------------------------------------------------------------------------------


Function 2: test_static_file
Language: Python
Lines: 17
Full Code:
--------------------------------------------------------------------------------
def test_static_file(self, app, req_ctx):
        rv = app.send_static_file("index.html")
        assert rv.cache_control.max_age is None
        rv.close()

        rv = flask.send_file("static/index.html")
        assert rv.cache_control.max_age is None
        rv.close()

        app.config["SEND_FILE_MAX_AGE_DEFAULT"] = 3600

        rv = app.send_static_file("index.html")
        assert rv.cache_control.max_age == 3600
        rv.close()

        rv = flask.send_file("static/index.html")
        assert rv.cache_control.max_age == 3600
        rv.close()

        rv = app.send_static_file(FakePath("index.html"))
        assert rv.cache_control.max_age == 3600
        rv.close()
--------------------------------------------------------------------------------


Function 3: test_send_from_directory
Language: Python
Lines: 7
Full Code:
--------------------------------------------------------------------------------
def test_send_from_directory(self, app, req_ctx):
        app.root_path = os.path.join(
            os.path.dirname(__file__), "test_apps", "subdomaintestmodule"
        )
        rv = flask.send_from_directory("static", "hello.txt")
        rv.direct_passthrough = False
        assert rv.data.strip() == b"Hello Subdomain"
        rv.close()
--------------------------------------------------------------------------------


Function 4: test_streaming_with_context
Language: Python
Lines: 10
Full Code:
--------------------------------------------------------------------------------
def test_streaming_with_context(self, app, client):
        @app.route("/")
        def index():
            def generate():
                yield "Hello "
                yield flask.request.args["name"]
                yield "!"

            return flask.Response(flask.stream_with_context(generate()))

        rv = client.get("/?name=World")
        assert rv.data == b"Hello World!"
--------------------------------------------------------------------------------


Function 5: test_streaming_with_context_and_custom_close
Language: Python
Lines: 15
Full Code:
--------------------------------------------------------------------------------
def test_streaming_with_context_and_custom_close(self, app, client):
        called = []

        class Wrapper:
            def __init__(self, gen):
                self._gen = gen

            def __iter__(self):
                return self

            def close(self):
                called.append(42)

            def __next__(self):
                return next(self._gen)

            next = __next__

        @app.route("/")
        def index():
            def generate():
                yield "Hello "
                yield flask.request.args["name"]
                yield "!"

            return flask.Response(flask.stream_with_context(Wrapper(generate())))

        rv = client.get("/?name=World")
        assert rv.data == b"Hello World!"
        assert called == [42]
--------------------------------------------------------------------------------


Function 6: test_make_response
Language: Python
Lines: 10
Full Code:
--------------------------------------------------------------------------------
def test_make_response(self):
        app = flask.Flask(__name__)
        with app.test_request_context():
            rv = flask.helpers.make_response()
            assert rv.status_code == 200
            assert rv.mimetype == "text/html"

            rv = flask.helpers.make_response("Hello")
            assert rv.status_code == 200
            assert rv.data == b"Hello"
            assert rv.mimetype == "text/html"
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:22:13.691Z
Question Type: select-all
Function: from_mapping
Function Size: 469 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: from_mapping (Python)\n// Updates the config like update ignoring items with non-upper keys.\n\ndef from_mapping(self, mapping: t.Mapping[str, t.Any] | None = None, **kwargs: t.Any) -> bool:\n        mappings: dict[str, t.Any] = {}\n        if mapping is not None:\n            mappings.update
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:22:15.845Z
Question Type: select-all
Function: from_file
Function Size: 710 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: from_file (Python)\n// Update the values in the config from a file that is loaded using a specified load function.\n\ndef from_file(self, filename: str | os.PathLike[str], load: t.Callable[[t.IO[t.Any]], t.Mapping[str, t.Any]], silent: bool = False, text: bool = True) -> bool:\n        file
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:22:17.030Z
Question Type: select-all
Function: from_envvar
Function Size: 643 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: from_envvar (Python)\n// Loads a configuration from an environment variable pointing to a configuration file.\n\ndef from_envvar(self, variable_name: str, silent: bool = False) -> bool:\n        rv = os.environ.get(variable_name)\n        if not rv:\n            if silent:\n                ret
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:22:17.716Z
Question Type: multiple-choice
Function: from_mapping
Function Size: 469 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: from_mapping (Python)\n// Updates the config like update ignoring items with non-upper keys.\n\ndef from_mapping(self, mapping: t.Mapping[str, t.Any] | None = None, **kwargs: t.Any) -> bool:\n        mappings: dict[str, t.Any] = {}\n        if mapping is not None:\n            mappings.update
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:22:18.872Z
Question Type: true-false
Function: from_envvar
Function Size: 643 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: from_envvar (Python)\n// Loads a configuration from an environment variable pointing to a configuration file.\n\ndef from_envvar(self, variable_name: str, silent: bool = False) -> bool:\n        rv = os.environ.get(variable_name)\n        if not rv:\n            if silent:\n                ret
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:22:24.664Z
Question Type: function-variant
Function: from_pyfile
Function Size: 739 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: from_pyfile (Python)\n// Updates the values in the config from a Python file.\n\ndef from_pyfile(self, filename: str | os.PathLike[str], silent: bool = False) -> bool:\n        filename = os.path.join(self.root_path, filename)\n        d = types.ModuleType("config")\n        d.__file__ = file
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:22:27.477Z
Question Type: function-variant
Function: from_object
Function Size: 339 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: from_object (Python)\n// Updates the values from the given object, loading only uppercase attributes.\n\ndef from_object(self, obj: object | str) -> None:\n        if isinstance(obj, str):\n            obj = import_string(obj)\n        for key in dir(obj):\n            if key.isupper():\n      
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:22:28.361Z
Question Type: order-sequence
Function: from_mapping
Function Size: 469 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: from_mapping (Python)\n// Updates the config like update ignoring items with non-upper keys.\n\ndef from_mapping(self, mapping: t.Mapping[str, t.Any] | None = None, **kwargs: t.Any) -> bool:\n        mappings: dict[str, t.Any] = {}\n        if mapping is not None:\n            mappings.update
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-19T17:22:29.130Z
Question Type: function-variant
Function: get_namespace
Function Size: 591 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: get_namespace (Python)\n// Returns a dictionary containing a subset of configuration options that match the specified namespace.\n\ndef get_namespace(self, namespace: str, lowercase: bool = True, trim_namespace: bool = True) -> dict[str, t.Any]:\n        rv = {}\n        for k, v in self.ite
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760894090440
Repository: Unknown
Total Questions Generated: 9
Total Chunks Processed: 7
Ended: 2025-10-19T17:22:29.156Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T17:35:45.983Z
File: <reference path="../../runtime/base/dev-extensions.ts" />
Functions Extracted: 4


Function 1: connect
Language: TypeScript
Lines: 42
Full Code:
--------------------------------------------------------------------------------
export function connect({
  addMessageListener,
  sendMessage,
  onUpdateError = console.error,
}: ClientOptions) {
  addMessageListener((msg) => {
    switch (msg.type) {
      case 'turbopack-connected':
        handleSocketConnected(sendMessage)
        break
      default:
        try {
          if (Array.isArray(msg.data)) {
            for (let i = 0; i < msg.data.length; i++) {
              handleSocketMessage(msg.data[i] as ServerMessage)
            }
          } else {
            handleSocketMessage(msg.data as ServerMessage)
          }
          applyAggregatedUpdates()
        } catch (e: unknown) {
          console.warn(
            '[Fast Refresh] performing full reload\n\n' +
              "Fast Refresh will perform a full reload when you edit a file that's imported by modules outside of the React rendering tree.\n" +
              'You might have a file which exports a React component but also exports a value that is imported by a non-React component file.\n' +
              'Consider migrating the non-React component export to a separate file and importing it into both files.\n\n' +
              'It is also possible the parent component of the component you edited is a class component, which disables Fast Refresh.\n' +
              'Fast Refresh requires at least one parent function component in your React tree.'
          )
          onUpdateError(e)
          location.reload()
        }
        break
    }
  })

  const queued = globalThis.TURBOPACK_CHUNK_UPDATE_LISTENERS
  if (queued != null && !Array.isArray(queued)) {
    throw new Error('A separate HMR handler was already registered')
  }
  globalThis.TURBOPACK_CHUNK_UPDATE_LISTENERS = {
    push: ([chunkPath, callback]: [ChunkListPath, UpdateCallback]) => {
      subscribeToChunkUpdate(chunkPath, sendMessage, callback)
    },
  }

  if (Array.isArray(queued)) {
    for (const [chunkPath, callback] of queued) {
      subscribeToChunkUpdate(chunkPath, sendMessage, callback)
    }
  }
}
--------------------------------------------------------------------------------


Function 2: resourceKey
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function resourceKey(resource: ResourceIdentifier): ResourceKey {
  return JSON.stringify({
    path: resource.path,
    headers: resource.headers || null,
  })
}
--------------------------------------------------------------------------------


Function 3: subscribeToUpdates
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function subscribeToUpdates(
  sendMessage: SendMessage,
  resource: ResourceIdentifier
): () => void {
  sendJSON(sendMessage, {
    type: 'turbopack-subscribe',
    ...resource,
  })

  return () => {
    sendJSON(sendMessage, {
      type: 'turbopack-unsubscribe',
      ...resource,
    })
  }
}
--------------------------------------------------------------------------------


Function 4: handleSocketConnected
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function handleSocketConnected(sendMessage: SendMessage) {
  for (const key of updateCallbackSets.keys()) {
    subscribeToUpdates(sendMessage, JSON.parse(key))
  }
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T17:35:47.509Z
File: [3 files: Any other update combination is invalid., action-handler.ts, find-page-file.ts]
Functions Extracted: 5


Function 1: emitIssues
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function emitIssues() {
  const issues = []
  const deduplicationSet = new Set()

  for (const [_, chunkIssues] of chunksWithIssues) {
    for (const chunkIssue of chunkIssues) {
      if (deduplicationSet.has(chunkIssue.formatted)) continue

      issues.push(chunkIssue)
      deduplicationSet.add(chunkIssue.formatted)
    }
  }

  sortIssues(issues)

  hooks.issues(issues)
}
--------------------------------------------------------------------------------


Function 2: handleIssues
Language: TypeScript
Lines: 13
Full Code:
--------------------------------------------------------------------------------
function handleIssues(msg: ServerMessage): boolean {
  const key = resourceKey(msg.resource)
  let hasCriticalIssues = false

  for (const issue of msg.issues) {
    if (CRITICAL.includes(issue.severity)) {
      hasCriticalIssues = true
    }
  }

  if (msg.issues.length > 0) {
    chunksWithIssues.set(key, msg.issues)
  } else if (chunksWithIssues.has(key)) {
    chunksWithIssues.delete(key)
  }

  emitIssues()

  return hasCriticalIssues
}
--------------------------------------------------------------------------------


Function 3: sortIssues
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function sortIssues(issues: Issue[]) {
  issues.sort((a, b) => {
    const first = compareByList(SEVERITY_ORDER, a.severity, b.severity)
    if (first !== 0) return first
    return compareByList(CATEGORY_ORDER, a.category, b.category)
  })
}
--------------------------------------------------------------------------------


Function 4: findPageFile
Language: TypeScript
Lines: 28
Full Code:
--------------------------------------------------------------------------------
export async function findPageFile(
  pagesDir: string,
  normalizedPagePath: string,
  pageExtensions: PageExtensions,
  isAppDir: boolean
): Promise<string | null> {
  const pagePaths = getPagePaths(normalizedPagePath, pageExtensions, isAppDir)
  const [existingPath, ...others] = (
    await Promise.all(
      pagePaths.map(async (path) => {
        const filePath = join(pagesDir, path)
        try {
          return (await fileExists(filePath)) ? path : null
        } catch (err: any) {
          if (!err?.code?.includes('ENOTDIR')) throw err
        }
        return null
      })
    )
  ).filter(nonNullable)

  if (!existingPath) {
    return null
  }

  if (!(await isTrueCasePagePath(existingPath, pagesDir))) {
    return null
  }

  if (others.length > 0) {
    warn(
      `Duplicate page detected. ${cyan(join('pages', existingPath))} and ${cyan(
        join('pages', others[0])
      )} both resolve to ${cyan(normalizedPagePath)}.`
    )
  }

  return existingPath
}
--------------------------------------------------------------------------------


Function 5: createValidFileMatcher
Language: TypeScript
Lines: 35
Full Code:
--------------------------------------------------------------------------------
export function createValidFileMatcher(
  pageExtensions: PageExtensions,
  appDirPath: string | undefined
) {
  const getExtensionRegexString = (extensions: string[]) =>
    `(?:${extensions.join('|')})`

  const validExtensionFileRegex = new RegExp(
    '\.' + getExtensionRegexString(pageExtensions) + '$'
  )
  const leafOnlyPageFileRegex = new RegExp(
    `(^(page|route)|[\\/](page|route))\.${getExtensionRegexString(
      pageExtensions
    )}$`
  )

  const leafOnlyRouteFileRegex = new RegExp(
    `(^route|[\\/]route)\.${getExtensionRegexString(pageExtensions)}$`
  )
  const leafOnlyLayoutFileRegex = new RegExp(
    `(^(layout)|[\\/](layout))\.${getExtensionRegexString(pageExtensions)}$`
  )
  const rootNotFoundFileRegex = new RegExp(
    `^not-found\.${getExtensionRegexString(pageExtensions)}$`
  )
  const leafOnlyDefaultFileRegex = new RegExp(
    `(^(default)|[\\/](default))\.${getExtensionRegexString(pageExtensions)}$`
  )

  function isMetadataFile(filePath: string) {
    const appDirRelativePath = appDirPath
      ? filePath.replace(appDirPath, '')
      : filePath

    return isMetadataRouteFile(appDirRelativePath, pageExtensions, true)
  }
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T17:35:47.571Z
File: [3 files: stack trace., context.ts, This keeps autocompletion working for static routes.]
Functions Extracted: 6


Function 1: createPostponeReason
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function createPostponeReason(route: string, expression: string) {
  return (
    `Route ${route} needs to bail out of prerendering at this point because it used ${expression}. ` +
    `React throws this special object to indicate where. It should not be caught by ` +
    `your own try/catch. Learn more: https://nextjs.org/docs/messages/ppr-caught-error`
  )
}
--------------------------------------------------------------------------------


Function 2: isDynamicPostpone
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
export function isDynamicPostpone(err: unknown) {
  if (
    typeof err === 'object' &&
    err !== null &&
    typeof (err as any).message === 'string'
  ) {
    return isDynamicPostponeReason((err as any).message)
  }
  return false
}
--------------------------------------------------------------------------------


Function 3: isDynamicPostponeReason
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function isDynamicPostponeReason(reason: string) {
  return (
    reason.includes(
      'needs to bail out of prerendering at this point because it used'
    ) &&
    reason.includes(
      'Learn more: https://nextjs.org/docs/messages/ppr-caught-error'
    )
  )
}
--------------------------------------------------------------------------------


Function 4: createPrerenderInterruptedError
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function createPrerenderInterruptedError(message: string): Error {
  const error = new Error(message)
  ;(error as any).digest = NEXT_PRERENDER_INTERRUPTED
  return error
}
--------------------------------------------------------------------------------


Function 5: isPrerenderInterruptedError
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
export function isPrerenderInterruptedError(
  error: unknown
): error is DigestError {
  return (
    typeof error === 'object' &&
    error !== null &&
    (error as any).digest === NEXT_PRERENDER_INTERRUPTED &&
    'name' in error &&
    'message' in error &&
    error instanceof Error
  )
}
--------------------------------------------------------------------------------


Function 6: clearModuleContext
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
export async function clearModuleContext(path: string) {
  intervalsManager.removeAll()
  timeoutsManager.removeAll()

  const handleContext = (
    key: string,
    cache: ReturnType<(typeof moduleContexts)['get']>,
    context: typeof moduleContexts | typeof pendingModuleCaches
  ) => {
    if (cache?.paths.has(path)) {
      context.delete(key)
    }
  }

  for (const [key, cache] of moduleContexts) {
    handleContext(key, cache, moduleContexts)
  }
  for (const [key, cache] of pendingModuleCaches) {
    handleContext(key, await cache, pendingModuleCaches)
  }
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T17:35:52.581Z
File: If we end up here, there was no work store or work unit store present.
Functions Extracted: 4


Function 1: makeHangingHeaders
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function makeHangingHeaders(
  workStore: WorkStore,
  prerenderStore: PrerenderStoreModern
): Promise<ReadonlyHeaders> {
  const cachedHeaders = CachedHeaders.get(prerenderStore);
  if (cachedHeaders) {
    return cachedHeaders;
  }

  const promise = makeHangingPromise<ReadonlyHeaders>(
    prerenderStore.renderSignal,
    workStore.route,
    '`headers()`'
  );
  CachedHeaders.set(prerenderStore, promise);

  return promise;
}
--------------------------------------------------------------------------------


Function 2: makeUntrackedHeadersWithDevWarnings
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function makeUntrackedHeadersWithDevWarnings(
  underlyingHeaders: ReadonlyHeaders,
  route: string | undefined,
  requestStore: RequestStore
): Promise<ReadonlyHeaders> {
  if (requestStore.asyncApiPromises) {
    const promise = requestStore.asyncApiPromises.headers;
    return instrumentHeadersPromiseWithDevWarnings(promise, route);
  }

  const cachedHeaders = CachedHeaders.get(underlyingHeaders);
  if (cachedHeaders) {
    return cachedHeaders;
  }

  const promise = makeDevtoolsIOAwarePromise(
    underlyingHeaders,
    requestStore,
    RenderStage.Runtime
  );

  const proxiedPromise = instrumentHeadersPromiseWithDevWarnings(promise, route);

  CachedHeaders.set(underlyingHeaders, proxiedPromise);

  return proxiedPromise;
}
--------------------------------------------------------------------------------


Function 3: instrumentHeadersPromiseWithDevWarnings
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function instrumentHeadersPromiseWithDevWarnings(
  promise: Promise<ReadonlyHeaders>,
  route: string | undefined
) {
  Object.defineProperties(promise, {
    [Symbol.iterator]: replaceableWarningDescriptorForSymbolIterator(
      promise,
      route
    ),
    append: replaceableWarningDescriptor(promise, 'append', route),
    delete: replaceableWarningDescriptor(promise, 'delete', route),
    get: replaceableWarningDescriptor(promise, 'get', route),
    has: replaceableWarningDescriptor(promise, 'has', route),
    set: replaceableWarningDescriptor(promise, 'set', route),
    getSetCookie: replaceableWarningDescriptor(promise, 'getSetCookie', route),
    forEach: replaceableWarningDescriptor(promise, 'forEach', route),
    keys: replaceableWarningDescriptor(promise, 'keys', route),
    values: replaceableWarningDescriptor(promise, 'values', route),
    entries: replaceableWarningDescriptor(promise, 'entries', route),
  });
  return promise;
}
--------------------------------------------------------------------------------


Function 4: createHeadersAccessError
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function createHeadersAccessError(
  route: string | undefined,
  expression: string
) {
  const prefix = route ? `Route "${route}" ` : 'This route ';
  return new Error(
    `${prefix}used ${expression}. ` +
      `\`headers()\` returns a Promise and must be unwrapped with \`await\` or \`React.use()\` before accessing its properties. ` +
      `Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis`
  );
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T18:00:16.318Z
File: [2 files: the API is ~stable, so this should be fine, find-page-file.ts]
Functions Extracted: 3


Function 1: isTrueCasePagePath
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
async function isTrueCasePagePath(pagePath: string, pagesDir: string) {
  const pageSegments = normalize(pagePath).split(sep).filter(Boolean);
  const segmentExistsPromises = pageSegments.map(async (segment, i) => {
    const segmentParentDir = join(pagesDir, ...pageSegments.slice(0, i));
    const parentDirEntries = await fsPromises.readdir(segmentParentDir);
    return parentDirEntries.includes(segment);
  });

  return (await Promise.all(segmentExistsPromises)).every(Boolean);
}
--------------------------------------------------------------------------------


Function 2: findPageFile
Language: TypeScript
Lines: 24
Full Code:
--------------------------------------------------------------------------------
export async function findPageFile(
  pagesDir: string,
  normalizedPagePath: string,
  pageExtensions: PageExtensions,
  isAppDir: boolean
): Promise<string | null> {
  const pagePaths = getPagePaths(normalizedPagePath, pageExtensions, isAppDir);
  const [existingPath, ...others] = (
    await Promise.all(
      pagePaths.map(async (path) => {
        const filePath = join(pagesDir, path);
        try {
          return (await fileExists(filePath)) ? path : null;
        } catch (err: any) {
          if (!err?.code?.includes('ENOTDIR')) throw err;
        }
        return null;
      })
    )
  ).filter(nonNullable);

  if (!existingPath) {
    return null;
  }

  if (!(await isTrueCasePagePath(existingPath, pagesDir))) {
    return null;
  }

  if (others.length > 0) {
    warn(
      `Duplicate page detected. ${cyan(join('pages', existingPath))} and ${cyan(
        join('pages', others[0])
      )} both resolve to ${cyan(normalizedPagePath)}.`
    );
  }

  return existingPath;
}
--------------------------------------------------------------------------------


Function 3: createValidFileMatcher
Language: TypeScript
Lines: 30
Full Code:
--------------------------------------------------------------------------------
export function createValidFileMatcher(
  pageExtensions: PageExtensions,
  appDirPath: string | undefined
) {
  const getExtensionRegexString = (extensions: string[]) =>
    `(?:${extensions.join('|')})`;

  const validExtensionFileRegex = new RegExp(
    '\.' + getExtensionRegexString(pageExtensions) + '$'
  );
  const leafOnlyPageFileRegex = new RegExp(
    `(^(page|route)|[\\/](page|route))\.${getExtensionRegexString(
      pageExtensions
    )}$`
  );

  const leafOnlyRouteFileRegex = new RegExp(
    `(^route|[\\/]route)\.${getExtensionRegexString(pageExtensions)}$`
  );
  const leafOnlyLayoutFileRegex = new RegExp(
    `(^(layout)|[\\/](layout))\.${getExtensionRegexString(pageExtensions)}$`
  );
  const rootNotFoundFileRegex = new RegExp(
    `^not-found\.${getExtensionRegexString(pageExtensions)}$`
  );
  const leafOnlyDefaultFileRegex = new RegExp(
    `(^(default)|[\\/](default))\.${getExtensionRegexString(pageExtensions)}$`
  );

  function isMetadataFile(filePath: string) {
    const appDirRelativePath = appDirPath
      ? filePath.replace(appDirPath, '')
      : filePath;

    return isMetadataRouteFile(appDirRelativePath, pageExtensions, true);
  }
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T18:07:19.175Z
File: [2 files: This keeps autocompletion working for static routes., This function has to be called initially.]
Functions Extracted: 3


Function 1: init
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
export function init(opts: {
  ts: TypeScript
  info: tsModule.server.PluginCreateInfo
}) {
  const projectDir = opts.info.project.getCurrentDirectory()
  ts = opts.ts
  info = opts.info
  appDirRegExp = new RegExp(
    '^' + (projectDir + '(/src)?/app').replace(/[\\/]/g, '[\\/]')
  )

  log('Initialized Next.js TypeScript plugin: ' + projectDir)
}
--------------------------------------------------------------------------------


Function 2: getTypeChecker
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
export function getTypeChecker() {
  const program = info.languageService.getProgram()
  if (!program) {
    log('Failed to get program while while running getTypeChecker.')
    return
  }
  const typeChecker = program.getTypeChecker()
  if (!typeChecker) {
    log('Failed to get type checker while running getTypeChecker.')
    return
  }
  return typeChecker
}
--------------------------------------------------------------------------------


Function 3: getSource
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
export function getSource(fileName: string) {
  const program = info.languageService.getProgram()
  if (!program) {
    log('Failed to get program while running getSource for: ' + fileName)
    return
  }

  const sourceFile = program.getSourceFile(fileName)
  if (!sourceFile) {
    log('Failed to get source file while running getSource for: ' + fileName)
    return
  }

  return sourceFile
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T18:07:20.555Z
File: [2 files: the API is ~stable, so this should be fine, Any other update combination is invalid.]
Functions Extracted: 4


Function 1: closeSpanWithError
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
const closeSpanWithError = (span: Span, error?: Error) => {
  if (isBubbledError(error) && error.bubble) {
    span.setAttribute('next.bubble', true)
  } else {
    if (error) {
      span.recordException(error)
      span.setAttribute('error.type', error.name)
    }
    span.setStatus({ code: SpanStatusCode.ERROR, message: error?.message })
  }
  span.end()
}
--------------------------------------------------------------------------------


Function 2: emitIssues
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function emitIssues() {
  const issues = []
  const deduplicationSet = new Set()

  for (const [_, chunkIssues] of chunksWithIssues) {
    for (const chunkIssue of chunkIssues) {
      if (deduplicationSet.has(chunkIssue.formatted)) continue

      issues.push(chunkIssue)
      deduplicationSet.add(chunkIssue.formatted)
    }
  }

  sortIssues(issues)

  hooks.issues(issues)
}
--------------------------------------------------------------------------------


Function 3: handleIssues
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function handleIssues(msg: ServerMessage): boolean {
  const key = resourceKey(msg.resource)
  let hasCriticalIssues = false

  for (const issue of msg.issues) {
    if (CRITICAL.includes(issue.severity)) {
      hasCriticalIssues = true
    }
  }

  if (msg.issues.length > 0) {
    chunksWithIssues.set(key, msg.issues)
  } else if (chunksWithIssues.has(key)) {
    chunksWithIssues.delete(key)
  }

  emitIssues()

  return hasCriticalIssues
}
--------------------------------------------------------------------------------


Function 4: sortIssues
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function sortIssues(issues: Issue[]) {
  issues.sort((a, b) => {
    const first = compareByList(SEVERITY_ORDER, a.severity, b.severity)
    if (first !== 0) return first
    return compareByList(CATEGORY_ORDER, a.category, b.category)
  })
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T18:07:22.292Z
File: [2 files: the API is ~stable, so this should be fine, This function has to be called initially.]
Functions Extracted: 4


Function 1: init
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
export function init(opts: {
  ts: TypeScript
  info: tsModule.server.PluginCreateInfo
}) {
  const projectDir = opts.info.project.getCurrentDirectory()
  ts = opts.ts
  info = opts.info
  appDirRegExp = new RegExp(
    '^' + (projectDir + '(/src)?/app').replace(/[\\/]/g, '[\\/]')
  )

  log('Initialized Next.js TypeScript plugin: ' + projectDir)
}
--------------------------------------------------------------------------------


Function 2: getTypeChecker
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
export function getTypeChecker() {
  const program = info.languageService.getProgram()
  if (!program) {
    log('Failed to get program while while running getTypeChecker.')
    return
  }
  const typeChecker = program.getTypeChecker()
  if (!typeChecker) {
    log('Failed to get type checker while running getTypeChecker.')
    return
  }
  return typeChecker
}
--------------------------------------------------------------------------------


Function 3: getSource
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
export function getSource(fileName: string) {
  const program = info.languageService.getProgram()
  if (!program) {
    log('Failed to get program while running getSource for: ' + fileName)
    return
  }

  const sourceFile = program.getSourceFile(fileName)
  if (!sourceFile) {
    log('Failed to get source file while running getSource for: ' + fileName)
    return
  }

  return sourceFile
}
--------------------------------------------------------------------------------


Function 4: isDefaultFunctionExport
Language: TypeScript
Lines: 14
Full Code:
--------------------------------------------------------------------------------
export const isDefaultFunctionExport = (
  node: tsModule.Node
): node is tsModule.FunctionDeclaration => {
  if (ts.isFunctionDeclaration(node)) {
    let hasExportKeyword = false
    let hasDefaultKeyword = false

    if (node.modifiers) {
      for (const modifier of node.modifiers) {
        if (modifier.kind === ts.SyntaxKind.ExportKeyword) {
          hasExportKeyword = true
        } else if (modifier.kind === ts.SyntaxKind.DefaultKeyword) {
          hasDefaultKeyword = true
        }
      }
    }
  }
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T18:07:29.467Z
File: [2 files: context.ts, If we end up here, there was no work store or work unit store present.]
Functions Extracted: 4


Function 1: clearModuleContext
Language: TypeScript
Lines: 14
Full Code:
--------------------------------------------------------------------------------
export async function clearModuleContext(path: string) {
  intervalsManager.removeAll()
  timeoutsManager.removeAll()

  const handleContext = (
    key: string,
    cache: ReturnType<(typeof moduleContexts)['get']>,
    context: typeof moduleContexts | typeof pendingModuleCaches
  ) => {
    if (cache?.paths.has(path)) {
      context.delete(key)
    }
  }

  for (const [key, cache] of moduleContexts) {
    handleContext(key, cache, moduleContexts)
  }
  for (const [key, cache] of pendingModuleCaches) {
    handleContext(key, await cache, pendingModuleCaches)
  }
}
--------------------------------------------------------------------------------


Function 2: makeHangingCookies
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function makeHangingCookies(
  workStore: WorkStore,
  prerenderStore: PrerenderStoreModern
): Promise<ReadonlyRequestCookies> {
  const cachedPromise = CachedCookies.get(prerenderStore)
  if (cachedPromise) {
    return cachedPromise
  }

  const promise = makeHangingPromise<ReadonlyRequestCookies>(
    prerenderStore.renderSignal,
    workStore.route,
    '`cookies()`'
  )
  CachedCookies.set(prerenderStore, promise)

  return promise
}
--------------------------------------------------------------------------------


Function 3: makeUntrackedCookiesWithDevWarnings
Language: TypeScript
Lines: 20
Full Code:
--------------------------------------------------------------------------------
function makeUntrackedCookiesWithDevWarnings(
  requestStore: RequestStore,
  underlyingCookies: ReadonlyRequestCookies,
  route?: string
): Promise<ReadonlyRequestCookies> {
  if (requestStore.asyncApiPromises) {
    let promise: Promise<ReadonlyRequestCookies>
    if (underlyingCookies === requestStore.mutableCookies) {
      promise = requestStore.asyncApiPromises.mutableCookies
    } else if (underlyingCookies === requestStore.cookies) {
      promise = requestStore.asyncApiPromises.cookies
    } else {
      throw new InvariantError(
        'Received an underlying cookies object that does not match either `cookies` or `mutableCookies`'
      )
    }
    return instrumentCookiesPromiseWithDevWarnings(promise, route)
  }

  const cachedCookies = CachedCookies.get(underlyingCookies)
  if (cachedCookies) {
    return cachedCookies
  }

  const promise = makeDevtoolsIOAwarePromise(
    underlyingCookies,
    requestStore,
    RenderStage.Runtime
  )

  const proxiedPromise = instrumentCookiesPromiseWithDevWarnings(promise, route)

  CachedCookies.set(underlyingCookies, proxiedPromise)

  return proxiedPromise
}
--------------------------------------------------------------------------------


Function 4: instrumentCookiesPromiseWithDevWarnings
Language: TypeScript
Lines: 14
Full Code:
--------------------------------------------------------------------------------
function instrumentCookiesPromiseWithDevWarnings(
  promise: Promise<ReadonlyRequestCookies>,
  route: string | undefined
) {
  Object.defineProperties(promise, {
    [Symbol.iterator]: replaceableWarningDescriptorForSymbolIterator(
      promise,
      route
    ),
    size: replaceableWarningDescriptor(promise, 'size', route),
    get: replaceableWarningDescriptor(promise, 'get', route),
    getAll: replaceableWarningDescriptor(promise, 'getAll', route),
    has: replaceableWarningDescriptor(promise, 'has', route),
    set: replaceableWarningDescriptor(promise, 'set', route),
    delete: replaceableWarningDescriptor(promise, 'delete', route),
    clear: replaceableWarningDescriptor(promise, 'clear', route),
    toString: replaceableWarningDescriptor(promise, 'toString', route),
  })
  return promise
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T18:07:30.994Z
File: vercel-next.js-f8f24aa/packages/next/src/server/lib/find-page-file.ts
Functions Extracted: 3


Function 1: isTrueCasePagePath
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
async function isTrueCasePagePath(pagePath: string, pagesDir: string) {
  const pageSegments = normalize(pagePath).split(sep).filter(Boolean);
  const segmentExistsPromises = pageSegments.map(async (segment, i) => {
    const segmentParentDir = join(pagesDir, ...pageSegments.slice(0, i));
    const parentDirEntries = await fsPromises.readdir(segmentParentDir);
    return parentDirEntries.includes(segment);
  });

  return (await Promise.all(segmentExistsPromises)).every(Boolean);
}
--------------------------------------------------------------------------------


Function 2: findPageFile
Language: TypeScript
Lines: 30
Full Code:
--------------------------------------------------------------------------------
export async function findPageFile(
  pagesDir: string,
  normalizedPagePath: string,
  pageExtensions: PageExtensions,
  isAppDir: boolean
): Promise<string | null> {
  const pagePaths = getPagePaths(normalizedPagePath, pageExtensions, isAppDir);
  const [existingPath, ...others] = (
    await Promise.all(
      pagePaths.map(async (path) => {
        const filePath = join(pagesDir, path);
        try {
          return (await fileExists(filePath)) ? path : null;
        } catch (err: any) {
          if (!err?.code?.includes('ENOTDIR')) throw err;
        }
        return null;
      })
    )
  ).filter(nonNullable);

  if (!existingPath) {
    return null;
  }

  if (!(await isTrueCasePagePath(existingPath, pagesDir))) {
    return null;
  }

  if (others.length > 0) {
    warn(
      `Duplicate page detected. ${cyan(join('pages', existingPath))} and ${cyan(
        join('pages', others[0])
      )} both resolve to ${cyan(normalizedPagePath)}.`
    );
  }

  return existingPath;
}
--------------------------------------------------------------------------------


Function 3: createValidFileMatcher
Language: TypeScript
Lines: 30
Full Code:
--------------------------------------------------------------------------------
export function createValidFileMatcher(
  pageExtensions: PageExtensions,
  appDirPath: string | undefined
) {
  const getExtensionRegexString = (extensions: string[]) =>
    `(?:${extensions.join('|')})`;

  const validExtensionFileRegex = new RegExp(
    '\.' + getExtensionRegexString(pageExtensions) + '$'
  );
  const leafOnlyPageFileRegex = new RegExp(
    `(^(page|route)|[\\/](page|route))\.${getExtensionRegexString(
      pageExtensions
    )}$`
  );

  const leafOnlyRouteFileRegex = new RegExp(
    `(^route|[\\/]route)\.${getExtensionRegexString(pageExtensions)}$`
  );
  const leafOnlyLayoutFileRegex = new RegExp(
    `(^(layout)|[\\/](layout))\.${getExtensionRegexString(pageExtensions)}$`
  );
  const rootNotFoundFileRegex = new RegExp(
    `^not-found\.${getExtensionRegexString(pageExtensions)}$`
  );
  const leafOnlyDefaultFileRegex = new RegExp(
    `(^(default)|[\\/](default))\.${getExtensionRegexString(pageExtensions)}$`
  );

  function isMetadataFile(filePath: string) {
    const appDirRelativePath = appDirPath
      ? filePath.replace(appDirPath, '')
      : filePath;

    return isMetadataRouteFile(appDirRelativePath, pageExtensions, true);
  }
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T18:07:43.886Z
File: nathom-streamrip-b6c578a/streamrip/db.py
Functions Extracted: 5


Function 1: create
Language: Python
Lines: 10
Full Code:
--------------------------------------------------------------------------------
def create(self):
        """Create a database."""
        with sqlite3.connect(self.path) as conn:
            params = ", ".join(
                f"{key} {' '.join(map(str.upper, props))} NOT NULL"
                for key, props in self.structure.items()
            )
            command = f"CREATE TABLE {self.name} ({params})"

            logger.debug("executing %s", command)

            conn.execute(command)
--------------------------------------------------------------------------------


Function 2: contains
Language: Python
Lines: 15
Full Code:
--------------------------------------------------------------------------------
def contains(self, **items) -> bool:
        """Check whether items matches an entry in the table.

        :param items: a dict of column-name + expected value
        :rtype: bool
        """
        allowed_keys = set(self.structure.keys())
        assert all(
            key in allowed_keys for key in items.keys()
        ), f"Invalid key. Valid keys: {allowed_keys}"

        items = {k: str(v) for k, v in items.items()}

        with sqlite3.connect(self.path) as conn:
            conditions = " AND ".join(f"{key}=?" for key in items.keys())
            command = f"SELECT EXISTS(SELECT 1 FROM {self.name} WHERE {conditions})"

            logger.debug("Executing %s", command)

            return bool(conn.execute(command, tuple(items.values())).fetchone()[0])
--------------------------------------------------------------------------------


Function 3: add
Language: Python
Lines: 15
Full Code:
--------------------------------------------------------------------------------
def add(self, items: tuple[str]):
        """Add a row to the table.

        :param items: Column-name + value. Values must be provided for all cols.
        :type items: Tuple[str]
        """
        assert len(items) == len(self.structure)

        params = ", ".join(self.structure.keys())
        question_marks = ", ".join("?" for _ in items)
        command = f"INSERT INTO {self.name} ({params}) VALUES ({question_marks})"

        logger.debug("Executing %s", command)
        logger.debug("Items to add: %s", items)

        with sqlite3.connect(self.path) as conn:
            try:
                conn.execute(command, tuple(items))
            except sqlite3.IntegrityError as e:
                # tried to insert an item that was already there
                logger.debug(e)
--------------------------------------------------------------------------------


Function 4: remove
Language: Python
Lines: 12
Full Code:
--------------------------------------------------------------------------------
def remove(self, **items):
        """Remove items from a table.

        Warning: NOT TESTED!

        :param items:
        """
        conditions = " AND ".join(f"{key}=?" for key in items.keys())
        command = f"DELETE FROM {self.name} WHERE {conditions}"

        with sqlite3.connect(self.path) as conn:
            logger.debug(command)
            conn.execute(command, tuple(items.values()))
--------------------------------------------------------------------------------


Function 5: all
Language: Python
Lines: 7
Full Code:
--------------------------------------------------------------------------------
def all(self):
        """Iterate through the rows of the table."""
        with sqlite3.connect(self.path) as conn:
            return list(conn.execute(f"SELECT * FROM {self.name}"))
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T18:11:16.084Z
File: [3 files: Adjust the padding for floating and inset variants., form.tsx, breadcrumb.tsx]
Functions Extracted: 4


Function 1: SidebarTrigger
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function SidebarTrigger({ className, onClick, ...props }: React.ComponentProps<typeof Button>) {
  const { toggleSidebar } = useSidebar();

  return (
    <Button
      data-sidebar="trigger"
      data-slot="sidebar-trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event);
        toggleSidebar();
      }}
      {...props}
    >
      <PanelLeftIcon />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  );
}
--------------------------------------------------------------------------------


Function 2: FormField
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
const FormField = <TFieldValues extends FieldValues = FieldValues, TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,>({ ...props }: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
}
--------------------------------------------------------------------------------


Function 3: FormItem
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function FormItem({ className, ...props }: React.ComponentProps<"div">) {
  const id = React.useId();

  return (
    <FormItemContext.Provider value={{ id }}>
      <div
        data-slot="form-item"
        className={cn("grid gap-2", className)}
        {...props}
      />
    </FormItemContext.Provider>
  );
}
--------------------------------------------------------------------------------


Function 4: BreadcrumbList
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function BreadcrumbList({ className, ...props }: React.ComponentProps<"ol">) {
  return (
    <ol
      data-slot="breadcrumb-list"
      className={cn(
        "text-muted-foreground flex flex-wrap items-center gap-1.5 text-sm break-words sm:gap-2.5",
        className
      )}
      {...props}
    />
  );
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T18:11:17.688Z
File: nathom-streamrip-b6c578a/streamrip/media/album.py
Functions Extracted: 3


Function 1: download
Language: Python
Lines: 15
Full Code:
--------------------------------------------------------------------------------
async def download(self):
        async def _resolve_and_download(pending: Pending):
            try:
                track = await pending.resolve()
                if track is None:
                    return
                await track.rip()
            except Exception as e:
                logger.error(f"Error downloading track: {e}")

        results = await asyncio.gather(
            *[_resolve_and_download(p) for p in self.tracks], return_exceptions=True
        )

        for result in results:
            if isinstance(result, Exception):
                logger.error(f"Album track processing error: {result}")
--------------------------------------------------------------------------------


Function 2: resolve
Language: Python
Lines: 38
Full Code:
--------------------------------------------------------------------------------
async def resolve(self) -> Album | None:
        try:
            resp = await self.client.get_metadata(self.id, "album")
        except NonStreamableError as e:
            logger.error(
                f"Album {self.id} not available to stream on {self.client.source} ({e})",
            )
            return None

        try:
            meta = AlbumMetadata.from_album_resp(resp, self.client.source)
        except Exception as e:
            logger.error(f"Error building album metadata for {id=}: {e}")
            return None

        if meta is None:
            logger.error(
                f"Album {self.id} not available to stream on {self.client.source}",
            )
            return None

        tracklist = get_album_track_ids(self.client.source, resp)
        folder = self.config.session.downloads.folder
        album_folder = self._album_folder(folder, meta)
        os.makedirs(album_folder, exist_ok=True)
        embed_cover, _ = await download_artwork(
            self.client.session,
            album_folder,
            meta.covers,
            self.config.session.artwork,
            for_playlist=False,
        )
        pending_tracks = [
            PendingTrack(
                id,
                album=meta,
                client=self.client,
                config=self.config,
                folder=album_folder,
                db=self.db,
                cover_path=embed_cover,
            )
            for id in tracklist
        ]
        logger.debug("Pending tracks: %s", pending_tracks)
        return Album(meta, pending_tracks, self.config, album_folder, self.db)
--------------------------------------------------------------------------------


Function 3: _album_folder
Language: Python
Lines: 10
Full Code:
--------------------------------------------------------------------------------
def _album_folder(self, parent: str, meta: AlbumMetadata) -> str:
        config = self.config.session
        if config.downloads.source_subdirectories:
            parent = os.path.join(parent, self.client.source.capitalize())
        formatter = config.filepaths.folder_format
        folder = clean_filepath(
            meta.format_folder_path(formatter), config.filepaths.restrict_characters
        )

        return os.path.join(parent, folder)
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T18:11:19.985Z
File: nathom-streamrip-b6c578a/streamrip/config.py
Functions Extracted: 3


Function 1: from_toml
Language: Python
Lines: 31
Full Code:
--------------------------------------------------------------------------------
    @classmethod
    def from_toml(cls, toml_str: str):
        toml = parse(toml_str)
        if (v := toml["misc"]["version"]) != CURRENT_CONFIG_VERSION:  # type: ignore
            raise OutdatedConfigError(
                f"Need to update config from {v} to {CURRENT_CONFIG_VERSION}",
            )

        downloads = DownloadsConfig(**toml["downloads"])  # type: ignore
        qobuz = QobuzConfig(**toml["qobuz"])  # type: ignore
        tidal = TidalConfig(**toml["tidal"])  # type: ignore
        deezer = DeezerConfig(**toml["deezer"])  # type: ignore
        soundcloud = SoundcloudConfig(**toml["soundcloud"])  # type: ignore
        youtube = YoutubeConfig(**toml["youtube"])  # type: ignore
        lastfm = LastFmConfig(**toml["lastfm"])  # type: ignore
        artwork = ArtworkConfig(**toml["artwork"])  # type: ignore
        filepaths = FilepathsConfig(**toml["filepaths"])  # type: ignore
        metadata = MetadataConfig(**toml["metadata"])  # type: ignore
        qobuz_filters = QobuzDiscographyFilterConfig(**toml["qobuz_filters"])  # type: ignore
        cli = CliConfig(**toml["cli"])  # type: ignore
        database = DatabaseConfig(**toml["database"])  # type: ignore
        conversion = ConversionConfig(**toml["conversion"])  # type: ignore
        misc = MiscConfig(**toml["misc"])  # type: ignore

        return cls(
            toml=toml,
            downloads=downloads,
            qobuz=qobuz,
            tidal=tidal,
            deezer=deezer,
            soundcloud=soundcloud,
            youtube=youtube,
            lastfm=lastfm,
            artwork=artwork,
            filepaths=filepaths,
            metadata=metadata,
            qobuz_filters=qobuz_filters,
            cli=cli,
            database=database,
            conversion=conversion,
            misc=misc,
        )
--------------------------------------------------------------------------------


Function 2: update_toml
Language: Python
Lines: 15
Full Code:
--------------------------------------------------------------------------------
    def update_toml(self):
        update_toml_section_from_config(self.toml["downloads"], self.downloads)
        update_toml_section_from_config(self.toml["qobuz"], self.qobuz)
        update_toml_section_from_config(self.toml["tidal"], self.tidal)
        update_toml_section_from_config(self.toml["deezer"], self.deezer)
        update_toml_section_from_config(self.toml["soundcloud"], self.soundcloud)
        update_toml_section_from_config(self.toml["youtube"], self.youtube)
        update_toml_section_from_config(self.toml["lastfm"], self.lastfm)
        update_toml_section_from_config(self.toml["artwork"], self.artwork)
        update_toml_section_from_config(self.toml["filepaths"], self.filepaths)
        update_toml_section_from_config(self.toml["metadata"], self.metadata)
        update_toml_section_from_config(self.toml["qobuz_filters"], self.qobuz_filters)
        update_toml_section_from_config(self.toml["cli"], self.cli)
        update_toml_section_from_config(self.toml["database"], self.database)
        update_toml_section_from_config(self.toml["conversion"], self.conversion)
--------------------------------------------------------------------------------


Function 3: update_config
Language: Python
Lines: 10
Full Code:
--------------------------------------------------------------------------------
def update_config(old_with_data: dict, new_without_data: dict):
    old_keys = _get_dict_keys_r(old_with_data)
    new_keys = _get_dict_keys_r(new_without_data)
    common = old_keys.intersection(new_keys)
    common.discard(("misc", "version"))

    for k in common:
        old_val = _nested_get(old_with_data, *k)
        _nested_set(new_without_data, *k, val=old_val)
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T18:11:22.014Z
File: nathom-streamrip-b6c578a/streamrip/config.py
Functions Extracted: 4


Function 1: from_toml
Language: Python
Lines: 34
Full Code:
--------------------------------------------------------------------------------
    @classmethod
    def from_toml(cls, toml_str: str):
        toml = parse(toml_str)
        if (v := toml["misc"]["version"]) != CURRENT_CONFIG_VERSION:  # type: ignore
            raise OutdatedConfigError(
                f"Need to update config from {v} to {CURRENT_CONFIG_VERSION}",
            )

        downloads = DownloadsConfig(**toml["downloads"])  # type: ignore
        qobuz = QobuzConfig(**toml["qobuz"])  # type: ignore
        tidal = TidalConfig(**toml["tidal"])  # type: ignore
        deezer = DeezerConfig(**toml["deezer"])  # type: ignore
        soundcloud = SoundcloudConfig(**toml["soundcloud"])  # type: ignore
        youtube = YoutubeConfig(**toml["youtube"])  # type: ignore
        lastfm = LastFmConfig(**toml["lastfm"])  # type: ignore
        artwork = ArtworkConfig(**toml["artwork"])  # type: ignore
        filepaths = FilepathsConfig(**toml["filepaths"])  # type: ignore
        metadata = MetadataConfig(**toml["metadata"])  # type: ignore
        qobuz_filters = QobuzDiscographyFilterConfig(**toml["qobuz_filters"])  # type: ignore
        cli = CliConfig(**toml["cli"])  # type: ignore
        database = DatabaseConfig(**toml["database"])  # type: ignore
        conversion = ConversionConfig(**toml["conversion"])  # type: ignore
        misc = MiscConfig(**toml["misc"])  # type: ignore

        return cls(
            toml=toml,
            downloads=downloads,
            qobuz=qobuz,
            tidal=tidal,
            deezer=deezer,
            soundcloud=soundcloud,
            youtube=youtube,
            lastfm=lastfm,
            artwork=artwork,
            filepaths=filepaths,
            metadata=metadata,
            qobuz_filters=qobuz_filters,
            cli=cli,
            database=database,
            conversion=conversion,
            misc=misc,
        )
--------------------------------------------------------------------------------


Function 2: update_toml
Language: Python
Lines: 15
Full Code:
--------------------------------------------------------------------------------
    def update_toml(self):
        update_toml_section_from_config(self.toml["downloads"], self.downloads)
        update_toml_section_from_config(self.toml["qobuz"], self.qobuz)
        update_toml_section_from_config(self.toml["tidal"], self.tidal)
        update_toml_section_from_config(self.toml["deezer"], self.deezer)
        update_toml_section_from_config(self.toml["soundcloud"], self.soundcloud)
        update_toml_section_from_config(self.toml["youtube"], self.youtube)
        update_toml_section_from_config(self.toml["lastfm"], self.lastfm)
        update_toml_section_from_config(self.toml["artwork"], self.artwork)
        update_toml_section_from_config(self.toml["filepaths"], self.filepaths)
        update_toml_section_from_config(self.toml["metadata"], self.metadata)
        update_toml_section_from_config(self.toml["qobuz_filters"], self.qobuz_filters)
        update_toml_section_from_config(self.toml["cli"], self.cli)
        update_toml_section_from_config(self.toml["database"], self.database)
        update_toml_section_from_config(self.toml["conversion"], self.conversion)
--------------------------------------------------------------------------------


Function 3: set_user_defaults
Language: Python
Lines: 10
Full Code:
--------------------------------------------------------------------------------
def set_user_defaults(path: str, /):
    """Update the TOML file at the path with user-specific default values."""
    shutil.copy(BLANK_CONFIG_PATH, path)

    with open(path) as f:
        toml = parse(f.read())

    toml_set_user_defaults(toml)

    with open(path, "w") as f:
        f.write(dumps(toml))
--------------------------------------------------------------------------------


Function 4: update_config
Language: Python
Lines: 15
Full Code:
--------------------------------------------------------------------------------
def update_config(old_with_data: dict, new_without_data: dict):
    """Used to update config when a new config version is detected.

    All data associated with keys that are shared between the old and
    new configs are copied from old to new. The remaining keep their default value.

    Assumes that new_without_data contains default config values of the
    latest version.
    """
    old_keys = _get_dict_keys_r(old_with_data)
    new_keys = _get_dict_keys_r(new_without_data)
    common = old_keys.intersection(new_keys)
    common.discard(("misc", "version"))

    for k in common:
        old_val = _nested_get(old_with_data, *k)
        _nested_set(new_without_data, *k, val=old_val)
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T18:11:22.084Z
File: [2 files: drawer.tsx, navigation-menu.tsx]
Functions Extracted: 4


Function 1: DrawerContent
Language: TypeScript
Lines: 22
Full Code:
--------------------------------------------------------------------------------
function DrawerContent({ className, children, ...props }: React.ComponentProps<typeof DrawerPrimitive.Content>) {
  return (
    <DrawerPortal data-slot="drawer-portal">
      <DrawerOverlay />
      <DrawerPrimitive.Content
        data-slot="drawer-content"
        className={cn(
          "group/drawer-content bg-background fixed z-50 flex h-auto flex-col",
          "data-[vaul-drawer-direction=top]:inset-x-0 data-[vaul-drawer-direction=top]:top-0 data-[vaul-drawer-direction=top]:mb-24 data-[vaul-drawer-direction=top]:max-h-[80vh] data-[vaul-drawer-direction=top]:rounded-b-lg",
          "data-[vaul-drawer-direction=bottom]:inset-x-0 data-[vaul-drawer-direction=bottom]:bottom-0 data-[vaul-drawer-direction=bottom]:mt-24 data-[vaul-drawer-direction=bottom]:max-h-[80vh] data-[vaul-drawer-direction=bottom]:rounded-t-lg",
          "data-[vaul-drawer-direction=right]:inset-y-0 data-[vaul-drawer-direction=right]:right-0 data-[vaul-drawer-direction=right]:w-3/4 data-[vaul-drawer-direction=right]:sm:max-w-sm",
          "data-[vaul-drawer-direction=left]:inset-y-0 data-[vaul-drawer-direction=left]:left-0 data-[vaul-drawer-direction=left]:w-3/4 data-[vaul-drawer-direction=left]:sm:max-w-sm",
          className
        )}
        {...props}
      >
        <div className="bg-muted mx-auto mt-4 hidden h-2 w-[100px] shrink-0 rounded-full group-data-[vaul-drawer-direction=bottom]/drawer-content:block" />
        {children}
      </DrawerPrimitive.Content>
    </DrawerPortal>
  );
}
--------------------------------------------------------------------------------


Function 2: NavigationMenu
Language: TypeScript
Lines: 14
Full Code:
--------------------------------------------------------------------------------
function NavigationMenu({ className, children, viewport = true, ...props }: React.ComponentProps<typeof NavigationMenuPrimitive.Root> & { viewport?: boolean }) {
  return (
    <NavigationMenuPrimitive.Root
      data-slot="navigation-menu"
      data-viewport={viewport}
      className={cn(
        "group/navigation-menu relative flex max-w-max flex-1 items-center justify-center",
        className
      )}
      {...props}
    >
      {children}
      {viewport && <NavigationMenuViewport />}
    </NavigationMenuPrimitive.Root>
  );
}
--------------------------------------------------------------------------------


Function 3: NavigationMenuTrigger
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function NavigationMenuTrigger({ className, children, ...props }: React.ComponentProps<typeof NavigationMenuPrimitive.Trigger>) {
  return (
    <NavigationMenuPrimitive.Trigger
      data-slot="navigation-menu-trigger"
      className={cn(navigationMenuTriggerStyle(), "group", className)}
      {...props}
    >
      {children} {" "}
      <ChevronDownIcon
        className="relative top-[1px] ml-1 size-3 transition duration-300 group-data-[state=open]:rotate-180"
        aria-hidden="true"
      />
    </NavigationMenuPrimitive.Trigger>
  );
}
--------------------------------------------------------------------------------


Function 4: NavigationMenuContent
Language: TypeScript
Lines: 22
Full Code:
--------------------------------------------------------------------------------
function NavigationMenuContent({ className, ...props }: React.ComponentProps<typeof NavigationMenuPrimitive.Content>) {
  return (
    <NavigationMenuPrimitive.Content
      data-slot="navigation-menu-content"
      className={cn(
        "data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 top-0 left-0 w-full p-2 pr-2.5 md:absolute md:w-auto",
        "group-data-[viewport=false]/navigation-menu:bg-popover group-data-[viewport=false]/navigation-menu:text-popover-foreground group-data-[viewport=false]/navigation-menu:data-[state=open]:animate-in group-data-[viewport=false]/navigation-menu:data-[state=closed]:animate-out group-data-[viewport=false]/navigation-menu:data-[state=closed]:zoom-out-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:zoom-in-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:fade-in-0 group-data-[viewport=false]/navigation-menu:data-[state=closed]:fade-out-0 group-data-[viewport=false]/navigation-menu:top-full group-data-[viewport=false]/navigation-menu:mt-1.5 group-data-[viewport=false]/navigation-menu:overflow-hidden group-data-[viewport=false]/navigation-menu:rounded-md group-data-[viewport=false]/navigation-menu:border group-data-[viewport=false]/navigation-menu:shadow group-data-[viewport=false]/navigation-menu:duration-200 **:data-[slot=navigation-menu-link]:focus:ring-0 **:data-[slot=navigation-menu-link]:focus:outline-none",
        className
      )}
      {...props}
    />
  );
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T18:11:28.154Z
File: [2 files: label.py, exceptions.py]
Functions Extracted: 4


Function 1: download
Language: Python
Lines: 15
Full Code:
--------------------------------------------------------------------------------
async def download(self):
        album_resolve_chunk_size = 10

        async def _resolve_download(item: PendingAlbum):
            album = await item.resolve()
            if album is None:
                return
            await album.rip()

        batches = self.batch(
            [_resolve_download(album) for album in self.albums],
            album_resolve_chunk_size,
        )
        for batch in batches:
            await asyncio.gather(*batch)
--------------------------------------------------------------------------------


Function 2: resolve
Language: Python
Lines: 20
Full Code:
--------------------------------------------------------------------------------
async def resolve(self) -> Label | None:
        try:
            resp = await self.client.get_metadata(self.id, "label")
        except NonStreamableError as e:
            logger.error(f"Error resolving Label: {e}")
            return None
        try:
            meta = LabelMetadata.from_resp(resp, self.client.source)
        except Exception as e:
            logger.error(f"Error resolving Label: {e}")
            return None
        albums = [
            PendingAlbum(album_id, self.client, self.config, self.db)
            for album_id in meta.album_ids()
        ]
        return Label(meta.name, albums, self.client, self.config)
--------------------------------------------------------------------------------


Function 3: print
Language: Python
Lines: 6
Full Code:
--------------------------------------------------------------------------------
def print(self, item):
        """Print a readable version of the exception.

        :param item:
        """
        echo(self.print_msg(item))
--------------------------------------------------------------------------------


Function 4: print_msg
Language: Python
Lines: 15
Full Code:
--------------------------------------------------------------------------------
def print_msg(self, item) -> str:
        """Return a generic readable message.

        :param item:
        :type item: Media
        :rtype: str
        """
        base_msg = [style(f"Unable to stream {item!s}.", fg="yellow")]
        if self.message:
            base_msg.extend(
                (
                    style("Message:", fg="yellow"),
                    style(self.message, fg="red"),
                ),
            )

        return " ".join(base_msg)
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T18:11:34.672Z
File: nathom-streamrip-b6c578a/streamrip/converter.py
Functions Extracted: 4


Function 1: __init__
Language: Python
Lines: 15
Full Code:
--------------------------------------------------------------------------------
def __init__(
        self,
        filename: str,
        ffmpeg_arg: Optional[str] = None,
        sampling_rate: Optional[int] = None,
        bit_depth: Optional[int] = None,
        copy_art: bool = True,
        remove_source: bool = False,
        show_progress: bool = False,
    ):
--------------------------------------------------------------------------------


Function 2: convert
Language: Python
Lines: 15
Full Code:
--------------------------------------------------------------------------------
async def convert(self, custom_fn: Optional[str] = None):
        if custom_fn:
            self.final_fn = custom_fn

        self.command = self._gen_command()
        process = await asyncio.create_subprocess_exec(
            *self.command,
            stderr=asyncio.subprocess.PIPE,
        )
        out, err = await process.communicate()
        if process.returncode == 0 and os.path.isfile(self.tempfile):
            if self.remove_source:
                os.remove(self.filename)
            shutil.move(self.tempfile, self.final_fn)
        else:
            raise ConversionError(f"FFmpeg output:\n{out, err}")
--------------------------------------------------------------------------------


Function 3: _gen_command
Language: Python
Lines: 30
Full Code:
--------------------------------------------------------------------------------
def _gen_command(self):
        command = [
            "ffmpeg",
            "-i",
            self.filename,
        ]
        command.extend(('-loglevel', 'panic'))
        command.extend(('-c:a', self.codec_lib))
        if self.show_progress:
            command.append("-stats")
        if self.copy_art:
            command.extend(["-c:v", "copy"])
        if self.ffmpeg_arg:
            command.extend(self.ffmpeg_arg.split())
        if self.lossless:
            aformat = []
            if isinstance(self.sampling_rate, int):
                sample_rates = "|".join(
                    str(rate) for rate in SAMPLING_RATES if rate <= self.sampling_rate
                )
                aformat.append(f"sample_rates={sample_rates}")
            if isinstance(self.bit_depth, int):
                bit_depths = ["s16p", "s16"]
                if self.bit_depth in (24, 32):
                    bit_depths.extend(["s32p", "s32"])
                sample_fmts = "|".join(bit_depths)
                aformat.append(f"sample_fmts={sample_fmts}")
            if aformat:
                aformat_params = ":".join(aformat)
                command.extend(["-af", f"aformat={aformat_params}"])
        command.extend(["-y", self.tempfile])
        return command
--------------------------------------------------------------------------------


Function 4: get
Language: Python
Lines: 10
Full Code:
--------------------------------------------------------------------------------
def get(codec: str) -> type[Converter]:
    converter_classes = {
        "FLAC": FLAC,
        "ALAC": ALAC,
        "MP3": LAME,
        "OPUS": OPUS,
        "OGG": Vorbis,
        "VORBIS": Vorbis,
        "AAC": AAC,
        "M4A": AAC,
    }
    return converter_classes[codec.upper()]
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T18:11:49.466Z
File: [2 files: track.py, exceptions.py]
Functions Extracted: 6


Function 1: preprocess
Language: Python
Lines: 5
Full Code:
--------------------------------------------------------------------------------
async def preprocess(self):
        self._set_download_path()
        os.makedirs(self.folder, exist_ok=True)
        if self.is_single:
            add_title(self.meta.title)
--------------------------------------------------------------------------------


Function 2: download
Language: Python
Lines: 22
Full Code:
--------------------------------------------------------------------------------
async def download(self):
        async with global_download_semaphore(self.config.session.downloads):
            with get_progress_callback(
                self.config.session.cli.progress_bars,
                await self.downloadable.size(),
                f"Track {self.meta.tracknumber}",
            ) as callback:
                try:
                    await self.downloadable.download(self.download_path, callback)
                    retry = False
                except Exception as e:
                    logger.error(
                        f"Error downloading track '{self.meta.title}', retrying: {e}"
                    )
                    retry = True

            if not retry:
                return

            with get_progress_callback(
                self.config.session.cli.progress_bars,
                await self.downloadable.size(),
                f"Track {self.meta.tracknumber} (retry)",
            ) as callback:
                try:
                    await self.downloadable.download(self.download_path, callback)
                except Exception as e:
                    logger.error(
                        f"Persistent error downloading track '{self.meta.title}', skipping: {e}"
                    )
                    self.db.set_failed(
                        self.downloadable.source, "track", self.meta.info.id
                    )
--------------------------------------------------------------------------------


Function 3: postprocess
Language: Python
Lines: 7
Full Code:
--------------------------------------------------------------------------------
async def postprocess(self):
        if self.is_single:
            remove_title(self.meta.title)

        await tag_file(self.download_path, self.meta, self.cover_path)
        if self.config.session.conversion.enabled:
            await self._convert()

        self.db.set_downloaded(self.meta.info.id)
--------------------------------------------------------------------------------


Function 4: _convert
Language: Python
Lines: 10
Full Code:
--------------------------------------------------------------------------------
async def _convert(self):
        c = self.config.session.conversion
        engine_class = converter.get(c.codec)
        engine = engine_class(
            filename=self.download_path,
            sampling_rate=c.sampling_rate,
            bit_depth=c.bit_depth,
            remove_source=True,  # always going to delete the old file
        )
        await engine.convert()
        self.download_path = engine.final_fn  # because the extension changed
--------------------------------------------------------------------------------


Function 5: resolve
Language: Python
Lines: 38
Full Code:
--------------------------------------------------------------------------------
async def resolve(self) -> Track | None:
        if self.db.downloaded(self.id):
            logger.info(
                f"Skipping track {self.id}. Marked as downloaded in the database.",
            )
            return None

        source = self.client.source
        try:
            resp = await self.client.get_metadata(self.id, "track")
        except NonStreamableError as e:
            logger.error(f"Track {self.id} not available for stream on {source}: {e}")
            return None

        try:
            meta = TrackMetadata.from_resp(self.album, source, resp)
        except Exception as e:
            logger.error(f"Error building track metadata for {self.id}: {e}")
            return None

        if meta is None:
            logger.error(f"Track {self.id} not available for stream on {source}")
            self.db.set_failed(source, "track", self.id)
            return None

        quality = self.config.session.get_source(source).quality
        try:
            downloadable = await self.client.get_downloadable(self.id, quality)
        except NonStreamableError as e:
            logger.error(
                f"Error getting downloadable data for track {meta.tracknumber} [{self.id}]: {e}"
            )
            return None

        downloads_config = self.config.session.downloads
        if downloads_config.disc_subdirectories and self.album.disctotal > 1:
            folder = os.path.join(self.folder, f"Disc {meta.discnumber}")
        else:
            folder = self.folder

        return Track(
            meta,
            downloadable,
            self.config,
            folder,
            self.cover_path,
            self.db,
        )
--------------------------------------------------------------------------------


Function 6: _format_folder
Language: Python
Lines: 8
Full Code:
--------------------------------------------------------------------------------
def _format_folder(self, meta: AlbumMetadata) -> str:
        c = self.config.session
        parent = c.downloads.folder
        formatter = c.filepaths.folder_format
        if c.downloads.source_subdirectories:
            parent = os.path.join(parent, self.client.source.capitalize())

        return os.path.join(parent, meta.format_folder_path(formatter))
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T19:40:56.907Z
File: lfnovo-open-notebook-df0986c/api/models.py
Functions Extracted: 1


Function 1: validate_notebook_fields
Language: Python
Lines: 15
Full Code:
--------------------------------------------------------------------------------
    @model_validator(mode="after")
    def validate_notebook_fields(self):
        # Ensure only one of notebook_id or notebooks is provided
        if self.notebook_id is not None and self.notebooks is not None:
            raise ValueError(
                "Cannot specify both 'notebook_id' and 'notebooks'. Use 'notebooks' for multi-notebook support."
            )

        # Convert single notebook_id to notebooks array for internal processing
        if self.notebook_id is not None:
            self.notebooks = [self.notebook_id]
            # Keep notebook_id for backward compatibility in response

        # Set empty array if no notebooks specified (allow sources without notebooks)
        if self.notebooks is None:
            self.notebooks = []

        return self
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T19:41:07.957Z
File: [2 files: dialog.tsx, card.tsx]
Functions Extracted: 8


Function 1: DialogContent
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function DialogContent({ className, children, showCloseButton = true, ...props }: React.ComponentProps<typeof DialogPrimitive.Content> & { showCloseButton?: boolean }) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-[calc(100%-2rem)]",
          className
        )}
        {...props}
      >
        {children}
        {showCloseButton && (
          <DialogPrimitive.Close
            data-slot="dialog-close"
            className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4"
          >
            <XIcon />
            <span className="sr-only">Close</span>
          </DialogPrimitive.Close>
        )}
      </DialogPrimitive.Content>
    </DialogPortal>
  );
}
--------------------------------------------------------------------------------


Function 2: Card
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  );
}
--------------------------------------------------------------------------------


Function 3: CardHeader
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  );
}
--------------------------------------------------------------------------------


Function 4: CardTitle
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  );
}
--------------------------------------------------------------------------------


Function 5: CardDescription
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  );
}
--------------------------------------------------------------------------------


Function 6: CardAction
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  );
}
--------------------------------------------------------------------------------


Function 7: CardContent
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  );
}
--------------------------------------------------------------------------------


Function 8: CardFooter
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  );
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T21:34:23.426Z
File: the API is ~stable, so this should be fine
Functions Extracted: 3


Function 1: isBubbledError
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
export function isBubbledError(error: unknown): error is BubbledError {
  if (typeof error !== 'object' || error === null) return false
  return error instanceof BubbledError
}
--------------------------------------------------------------------------------


Function 2: closeSpanWithError
Language: TypeScript
Lines: 9
Full Code:
--------------------------------------------------------------------------------
const closeSpanWithError = (span: Span, error?: Error) => {
  if (isBubbledError(error) && error.bubble) {
    span.setAttribute('next.bubble', true)
  } else {
    if (error) {
      span.recordException(error)
      span.setAttribute('error.type', error.name)
    }
    span.setStatus({ code: SpanStatusCode.ERROR, message: error?.message })
  }
  span.end()
}
--------------------------------------------------------------------------------


Function 3: getTracePropagationData
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
public getTracePropagationData(): ClientTraceDataEntry[] {
  const activeContext = context.active()
  const entries: ClientTraceDataEntry[] = []
  propagation.inject(activeContext, entries, clientTraceDataSetter)
  return entries
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T21:34:23.697Z
File: [2 files: index.d.ts, load-manifest.external.ts]
Functions Extracted: 1


Function 1: loadManifest
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export function loadManifest<T extends object>(
  path: string,
  shouldCache: boolean = true,
  cache = sharedCache,
  skipParse = false
): T {
  const cached = shouldCache && cache.get(path)
  if (cached) {
    return cached as T
  }

  let manifest: any = readFileSync(/* turbopackIgnore: true */ path, 'utf8')

  if (!skipParse) {
    manifest = JSON.parse(manifest)
  }
  const frozenManifest = deepFreeze(manifest)
  if (shouldCache) {
    cache.set(path, frozenManifest)
  }
  return frozenManifest
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T23:05:07.950Z
File: [3 files: context.ts, Any other update combination is invalid., load-manifest.external.ts]
Functions Extracted: 4


Function 1: clearModuleContext
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
export async function clearModuleContext(path: string) {
  intervalsManager.removeAll()
  timeoutsManager.removeAll()

  const handleContext = (
    key: string,
    cache: ReturnType<(typeof moduleContexts)['get']>,
    context: typeof moduleContexts | typeof pendingModuleCaches
  ) => {
    if (cache?.paths.has(path)) {
      context.delete(key)
    }
  }

  for (const [key, cache] of moduleContexts) {
    handleContext(key, cache, moduleContexts)
  }
  for (const [key, cache] of pendingModuleCaches) {
    handleContext(key, await cache, pendingModuleCaches)
  }
}
--------------------------------------------------------------------------------


Function 2: loadManifest
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
export function loadManifest<T extends object>(
  path: string,
  shouldCache: boolean = true,
  cache = sharedCache,
  skipParse = false
): T {
  const cached = shouldCache && cache.get(path)
  if (cached) {
    return cached as T
  }

  let manifest: any = readFileSync(/* turbopackIgnore: true */ path, 'utf8')

  if (!skipParse) {
    manifest = JSON.parse(manifest)
  }
--------------------------------------------------------------------------------


Function 3: emitIssues
Language: TypeScript
Lines: 11
Full Code:
--------------------------------------------------------------------------------
function emitIssues() {
  const issues = []
  const deduplicationSet = new Set()

  for (const [_, chunkIssues] of chunksWithIssues) {
    for (const chunkIssue of chunkIssues) {
      if (deduplicationSet.has(chunkIssue.formatted)) continue

      issues.push(chunkIssue)
      deduplicationSet.add(chunkIssue.formatted)
    }
  }

  sortIssues(issues)

  hooks.issues(issues)
}
--------------------------------------------------------------------------------


Function 4: sortIssues
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function sortIssues(issues: Issue[]) {
  issues.sort((a, b) => {
    const first = compareByList(SEVERITY_ORDER, a.severity, b.severity)
    if (first !== 0) return first
    return compareByList(CATEGORY_ORDER, a.category, b.category)
  })
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T23:05:11.599Z
File: [3 files: production.js, test.js, custom.js]
Functions Extracted: 2


Function 1: resizeGridItem
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function resizeGridItem(item) {
  grid = document.getElementsByClassName("grid")[0];
  rowHeight = parseInt(
    window.getComputedStyle(grid).getPropertyValue("grid-auto-rows")
  );
  rowGap = parseInt(
    window.getComputedStyle(grid).getPropertyValue("grid-row-gap")
  );
  rowSpan = Math.ceil(
    (item.querySelector(".content").getBoundingClientRect().height + rowGap) /
      (rowHeight + rowGap)
  );
  item.style.gridRowEnd = "span " + rowSpan;
}
--------------------------------------------------------------------------------


Function 2: resizeAllGridItems
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function resizeAllGridItems() {
  allItems = document.getElementsByClassName("item");
  for (x = 0; x < allItems.length; x++) {
    resizeGridItem(allItems[x]);
  }
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T23:05:11.934Z
File: [4 files: connection.rb, postcss.config.js, environment.js, font.rb]
Functions Extracted: 3


Function 1: module.exports
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
module.exports = {
  plugins: [
    require('postcss-import'),
    require('postcss-flexbugs-fixes'),
    require('postcss-preset-env')({
      autoprefixer: {
        flexbox: 'no-2009'
      },
      stage: 3
    })
  ]
};
--------------------------------------------------------------------------------


Function 2: environment
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
const { environment } = require("@rails/webpacker");

const webpack = require("webpack");
environment.plugins.prepend(
  "Provide",
  new webpack.ProvidePlugin({
    $: "jquery",
    jQuery: "jquery",
    Popper: ["popper.js", "default"],
  })
);

module.exports = environment;
--------------------------------------------------------------------------------


Function 3: Font
Language: Ruby
Lines: 7
Full Code:
--------------------------------------------------------------------------------
class Font < ApplicationRecord
  has_many :articles

  validates :name, presence: true
  validates :origin_name, presence: true
end
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T23:05:12.985Z
File: [4 files: environment.js, postcss.config.js, sessions_controller.rb, production.js]
Functions Extracted: 2


Function 1: create
Language: Ruby
Lines: 12
Full Code:
--------------------------------------------------------------------------------
def create
    name = params[:session][:name].downcase
    user = User.find_by(name: name)
    if user
      session[:user_id] = user.id
      flash[:success] = 'Successfully Login'
    else
      flash[:info] = "new username #{name} is registered. "
      user = User.create(name: name)
      session[:user_id] = user.id
    end
    redirect_to root_path
  end
--------------------------------------------------------------------------------


Function 2: module.exports
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
module.exports = {
  plugins: [
    require('postcss-import'),
    require('postcss-flexbugs-fixes'),
    require('postcss-preset-env')({
      autoprefixer: {
        flexbox: 'no-2009'
      },
      stage: 3
    })
  ]
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T23:05:13.613Z
File: @ts-expect-error - Argument of type 'Buffer<ArrayBufferLike>' is not assignable to parameter of type 'BufferSource'.
Functions Extracted: 4


Function 1: buildEnvironmentVariablesFrom
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function buildEnvironmentVariablesFrom(
  injectedEnvironments: Record<string, string>
): Record<string, string | undefined> {
  const pairs = Object.keys(process.env).map((key) => [key, process.env[key]])
  const env = Object.fromEntries(pairs)
  for (const key of Object.keys(injectedEnvironments)) {
    env[key] = injectedEnvironments[key]
  }
  env.NEXT_RUNTIME = 'edge'
  return env
}
--------------------------------------------------------------------------------


Function 2: throwUnsupportedAPIError
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function throwUnsupportedAPIError(name: string) {
  const error =
    new Error(`A Node.js API is used (${name}) which is not supported in the Edge Runtime.
Learn more: https://nextjs.org/docs/api-reference/edge-runtime`)
  decorateServerError(error, COMPILER_NAMES.edgeServer)
  throw error
}
--------------------------------------------------------------------------------


Function 3: createProcessPolyfill
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function createProcessPolyfill(env: Record<string, string>) {
  const processPolyfill = { env: buildEnvironmentVariablesFrom(env) }
  const overriddenValue: Record<string, any> = {}

  for (const key of Object.keys(process)) {
    if (key === 'env') continue
    Object.defineProperty(processPolyfill, key, {
      get() {
        if (overriddenValue[key] !== undefined) {
          return overriddenValue[key]
        }
        if (typeof (process as any)[key] === 'function') {
          return () => throwUnsupportedAPIError(`process.${key}`)
        }
        return undefined
      },
      set(value) {
        overriddenValue[key] = value
      },
      enumerable: false,
    })
  }
  return processPolyfill
}
--------------------------------------------------------------------------------


Function 4: createModuleContext
Language: TypeScript
Lines: 34
Full Code:
--------------------------------------------------------------------------------
async function createModuleContext(options: ModuleContextOptions) {
  const warnedEvals = new Set<string>()
  const warnedWasmCodegens = new Set<string>()
  const { edgeFunctionEntry } = options
  const wasm = await loadWasm(edgeFunctionEntry.wasm ?? [])
  const runtime = new EdgeRuntime({
    codeGeneration:
      process.env.NODE_ENV !== 'production'
        ? { strings: true, wasm: true }
        : undefined,
    extend: (context) => {
      context.process = createProcessPolyfill(edgeFunctionEntry.env)

      Object.defineProperty(context, 'require', {
        enumerable: false,
        value: (id: string) => {
          const value = NativeModuleMap.get(id)
          if (!value) {
            throw TypeError('Native module not found: ' + id)
          }
          return value
        },
      })

      if (process.env.NODE_ENV !== 'production') {
        context.__next_log_error__ = function (err: unknown) {
          options.onError(err)
        }
      }

      context.__next_eval__ = function __next_eval__(fn: Function) {
        const key = fn.toString()
        if (!warnedEvals.has(key)) {
          const warning = getServerError(
            new Error(
              `Dynamic Code Evaluation (e. g. 'eval', 'new Function') not allowed in Edge Runtime
Learn More: https://nextjs.org/docs/messages/edge-dynamic-code-evaluation`
            ),
            COMPILER_NAMES.edgeServer
          )
          warning.name = 'DynamicCodeEvaluationWarning'
          Error.captureStackTrace(warning, __next_eval__)
          warnedEvals.add(key)
          options.onWarning(warning)
        }
        return fn()
      }

      context.__next_webassembly_compile__ =
        function __next_webassembly_compile__(fn: Function) {
          const key = fn.toString()
          if (!warnedWasmCodegens.has(key)) {
            const warning = getServerError(
              new Error(`Dynamic WASM code generation (e. g. 'WebAssembly.compile') not allowed in Edge Runtime.
Learn More: https://nextjs.org/docs/messages/edge-dynamic-code-evaluation`),
              COMPILER_NAMES.edgeServer
            )
            warning.name = 'DynamicWasmCodeGenerationWarning'
            Error.captureStackTrace(warning, __next_webassembly_compile__)
            warnedWasmCodegens.add(key)
            options.onWarning(warning)
          }
          return fn()
        }

      context.__next_webassembly_instantiate__ =
        async function __next_webassembly_instantiate__(fn: Function) {
          const result = await fn()
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T23:05:13.783Z
File: [8 files: postcss.config.js, babel.config.js, environment.js, production.js, manifest.js, development.js, custom.js, 20200404212103_create_categories.rb]
Functions Extracted: 3


Function 1: resizeGridItem
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function resizeGridItem(item) {
  grid = document.getElementsByClassName("grid")[0];
  rowHeight = parseInt(
    window.getComputedStyle(grid).getPropertyValue("grid-auto-rows")
  );
  rowGap = parseInt(
    window.getComputedStyle(grid).getPropertyValue("grid-row-gap")
  );
  rowSpan = Math.ceil(
    (item.querySelector(".content").getBoundingClientRect().height + rowGap) /
      (rowHeight + rowGap)
  );
  item.style.gridRowEnd = "span " + rowSpan;
}
--------------------------------------------------------------------------------


Function 2: resizeAllGridItems
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function resizeAllGridItems() {
  allItems = document.getElementsByClassName("item");
  for (x = 0; x < allItems.length; x++) {
    resizeGridItem(allItems[x]);
  }
}
--------------------------------------------------------------------------------


Function 3: change
Language: Ruby
Lines: 6
Full Code:
--------------------------------------------------------------------------------
def change
    create_table :categories do |t|
      t.string :name
      t.integer :priority

      t.timestamps
    end
  end
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T23:05:14.688Z
File: [8 files: production.js, postcss.config.js, test.js, development.js, babel.config.js, manifest.js, production.rb, font.rb]
Functions Extracted: 2


Function 1: babel.config.js
Language: JavaScript
Lines: 36
Full Code:
--------------------------------------------------------------------------------
module.exports = function(api) {
  var validEnv = ['development', 'test', 'production']
  var currentEnv = api.env()
  var isDevelopmentEnv = api.env('development')
  var isProductionEnv = api.env('production')
  var isTestEnv = api.env('test')

  if (!validEnv.includes(currentEnv)) {
    throw new Error(
      'Please specify a valid `NODE_ENV` or ' +
        '`BABEL_ENV` environment variables. Valid values are "development", ' +
        '"test", and "production". Instead, received: ' +
        JSON.stringify(currentEnv) +
        '.
    ')
  }

  return {
    presets: [
      isTestEnv && [
        '@babel/preset-env',
        {
          targets: {
            node: 'current'
          }
        }
      ],
      (isProductionEnv || isDevelopmentEnv) && [
        '@babel/preset-env',
        {
          forceAllTransforms: true,
          useBuiltIns: 'entry',
          corejs: 3,
          modules: false,
          exclude: ['transform-typeof-symbol']
        }
      ]
    ].filter(Boolean),
    plugins: [
      'babel-plugin-macros',
      '@babel/plugin-syntax-dynamic-import',
      isTestEnv && 'babel-plugin-dynamic-import-node',
      '@babel/plugin-transform-destructuring',
      [
        '@babel/plugin-proposal-class-properties',
        {
          loose: true
        }
      ],
      [
        '@babel/plugin-proposal-object-rest-spread',
        {
          useBuiltIns: true
        }
      ],
      [
        '@babel/plugin-transform-runtime',
        {
          helpers: false,
          regenerator: true,
          corejs: false
        }
      ],
      [
        '@babel/plugin-transform-regenerator',
        {
          async: false
        }
      ]
    ].filter(Boolean)
  }
}
--------------------------------------------------------------------------------


Function 2: Font
Language: Ruby
Lines: 6
Full Code:
--------------------------------------------------------------------------------
class Font < ApplicationRecord
  has_many :articles

  validates :name, presence: true
  validates :origin_name, presence: true
end
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T23:05:15.755Z
File: [8 files: babel.config.js, production.js, postcss.config.js, application_record.rb, production.rb, test.js, 20200404212241_create_images.rb, custom.js]
Functions Extracted: 2


Function 1: module.exports
Language: JavaScript
Lines: 41
Full Code:
--------------------------------------------------------------------------------
module.exports = function(api) {
  var validEnv = ['development', 'test', 'production']
  var currentEnv = api.env()
  var isDevelopmentEnv = api.env('development')
  var isProductionEnv = api.env('production')
  var isTestEnv = api.env('test')

  if (!validEnv.includes(currentEnv)) {
    throw new Error(
      'Please specify a valid `NODE_ENV` or ' +
        '`BABEL_ENV` environment variables. Valid values are "development", ' +
        '"test", and "production". Instead, received: ' +
        JSON.stringify(currentEnv) +
        '.'
    )
  }

  return {
    presets: [
      isTestEnv && [
        '@babel/preset-env',
        {
          targets: {
            node: 'current'
          }
        }
      ],
      (isProductionEnv || isDevelopmentEnv) && [
        '@babel/preset-env',
        {
          forceAllTransforms: true,
          useBuiltIns: 'entry',
          corejs: 3,
          modules: false,
          exclude: ['transform-typeof-symbol']
        }
      ]
    ].filter(Boolean),
    plugins: [
      'babel-plugin-macros',
      '@babel/plugin-syntax-dynamic-import',
      isTestEnv && 'babel-plugin-dynamic-import-node',
      '@babel/plugin-transform-destructuring',
      [
        '@babel/plugin-proposal-class-properties',
        {
          loose: true
        }
      ],
      [
        '@babel/plugin-proposal-object-rest-spread',
        {
          useBuiltIns: true
        }
      ],
      [
        '@babel/plugin-transform-runtime',
        {
          helpers: false,
          regenerator: true,
          corejs: false
        }
      ],
      [
        '@babel/plugin-transform-regenerator',
        {
          async: false
        }
      ]
    ].filter(Boolean)
  }
--------------------------------------------------------------------------------


Function 2: change
Language: Ruby
Lines: 6
Full Code:
--------------------------------------------------------------------------------
def change
    create_table :images do |t|
      t.string :name
      t.string :image_url

      t.timestamps
    end
  end
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T23:05:15.972Z
File: [8 files: babel.config.js, test.js, production.js, environment.js, custom.js, You can generate new channels where WebSocket features live using the `rails generate channel` command., custom.js, development.js]
Functions Extracted: 2


Function 1: resizeGridItem
Language: JavaScript
Lines: 9
Full Code:
--------------------------------------------------------------------------------
function resizeGridItem(item) {
  grid = document.getElementsByClassName("grid")[0];
  rowHeight = parseInt(
    window.getComputedStyle(grid).getPropertyValue("grid-auto-rows")
  );
  rowGap = parseInt(
    window.getComputedStyle(grid).getPropertyValue("grid-row-gap")
  );
  rowSpan = Math.ceil(
    (item.querySelector(".content").getBoundingClientRect().height + rowGap) /
      (rowHeight + rowGap)
  );
  item.style.gridRowEnd = "span " + rowSpan;
}
--------------------------------------------------------------------------------


Function 2: resizeAllGridItems
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function resizeAllGridItems() {
  allItems = document.getElementsByClassName("item");
  for (x = 0; x < allItems.length; x++) {
    resizeGridItem(allItems[x]);
  }
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T23:05:18.300Z
File: [3 files: This function has to be called initially., If we end up here, there was no work store or work unit store present., load-manifest.external.ts]
Functions Extracted: 3


Function 1: init
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
export function init(opts: {
  ts: TypeScript
  info: tsModule.server.PluginCreateInfo
}) {
  const projectDir = opts.info.project.getCurrentDirectory()
  ts = opts.ts
  info = opts.info
  appDirRegExp = new RegExp(
    '^' + (projectDir + '(/src)?/app').replace(/[\\/]/g, '[\\/]')
  )

  log('Initialized Next.js TypeScript plugin: ' + projectDir)
}
--------------------------------------------------------------------------------


Function 2: getTypeChecker
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
export function getTypeChecker() {
  const program = info.languageService.getProgram()
  if (!program) {
    log('Failed to get program while while running getTypeChecker.')
    return
  }
  const typeChecker = program.getTypeChecker()
  if (!typeChecker) {
    log('Failed to get type checker while running getTypeChecker.')
    return
  }
  return typeChecker
}
--------------------------------------------------------------------------------


Function 3: loadManifest
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
export function loadManifest<T extends object>(
  path: string,
  shouldCache: boolean = true,
  cache = sharedCache,
  skipParse = false
): T {
  const cached = shouldCache && cache.get(path)
  if (cached) {
    return cached as T
  }

  let manifest: any = readFileSync(/* turbopackIgnore: true */ path, 'utf8')

  if (!skipParse) {
    manifest = JSON.parse(manifest)
  }
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T23:05:18.614Z
File: [3 files: custom.js, 20200404212203_create_fonts.rb, babel.config.js]
Functions Extracted: 3


Function 1: resizeGridItem
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function resizeGridItem(item) {
  grid = document.getElementsByClassName("grid")[0];
  rowHeight = parseInt(
    window.getComputedStyle(grid).getPropertyValue("grid-auto-rows")
  );
  rowGap = parseInt(
    window.getComputedStyle(grid).getPropertyValue("grid-row-gap")
  );
  rowSpan = Math.ceil(
    (item.querySelector(".content").getBoundingClientRect().height + rowGap) /
      (rowHeight + rowGap)
  );
  item.style.gridRowEnd = "span " + rowSpan;
}
--------------------------------------------------------------------------------


Function 2: resizeAllGridItems
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function resizeAllGridItems() {
  allItems = document.getElementsByClassName("item");
  for (x = 0; x < allItems.length; x++) {
    resizeGridItem(allItems[x]);
  }
}
--------------------------------------------------------------------------------


Function 3: module.exports
Language: JavaScript
Lines: 43
Full Code:
--------------------------------------------------------------------------------
module.exports = function(api) {
  var validEnv = ['development', 'test', 'production']
  var currentEnv = api.env()
  var isDevelopmentEnv = api.env('development')
  var isProductionEnv = api.env('production')
  var isTestEnv = api.env('test')

  if (!validEnv.includes(currentEnv)) {
    throw new Error(
      'Please specify a valid `NODE_ENV` or ' +
        '`BABEL_ENV` environment variables. Valid values are "development", ' +
        '"test", and "production". Instead, received: ' +
        JSON.stringify(currentEnv) +
        '.'
    )
  }

  return {
    presets: [
      isTestEnv && [
        '@babel/preset-env',
        {
          targets: {
            node: 'current'
          }
        }
      ],
      (isProductionEnv || isDevelopmentEnv) && [
        '@babel/preset-env',
        {
          forceAllTransforms: true,
          useBuiltIns: 'entry',
          corejs: 3,
          modules: false,
          exclude: ['transform-typeof-symbol']
        }
      ]
    ].filter(Boolean),
    plugins: [
      'babel-plugin-macros',
      '@babel/plugin-syntax-dynamic-import',
      isTestEnv && 'babel-plugin-dynamic-import-node',
      '@babel/plugin-transform-destructuring',
      [
        '@babel/plugin-proposal-class-properties',
        {
          loose: true
        }
      ],
      [
        '@babel/plugin-proposal-object-rest-spread',
        {
          useBuiltIns: true
        }
      ],
      [
        '@babel/plugin-transform-runtime',
        {
          helpers: false,
          regenerator: true,
          corejs: false
        }
      ],
      [
        '@babel/plugin-transform-regenerator',
        {
          async: false
        }
      ]
    ].filter(Boolean)
  }
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T23:21:47.855Z
File: [2 files: This function has to be called initially., find-page-file.ts]
Functions Extracted: 5


Function 1: init
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
export function init(opts: {
  ts: TypeScript
  info: tsModule.server.PluginCreateInfo
}) {
  const projectDir = opts.info.project.getCurrentDirectory()
  ts = opts.ts
  info = opts.info
  appDirRegExp = new RegExp(
    '^' + (projectDir + '(/src)?/app').replace(/[\\/]/g, '[\\/]')
  )

  log('Initialized Next.js TypeScript plugin: ' + projectDir)
}
--------------------------------------------------------------------------------


Function 2: getTypeChecker
Language: TypeScript
Lines: 9
Full Code:
--------------------------------------------------------------------------------
export function getTypeChecker() {
  const program = info.languageService.getProgram()
  if (!program) {
    log('Failed to get program while while running getTypeChecker.')
    return
  }
  const typeChecker = program.getTypeChecker()
  if (!typeChecker) {
    log('Failed to get type checker while running getTypeChecker.')
    return
  }
  return typeChecker
}
--------------------------------------------------------------------------------


Function 3: getSource
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
export function getSource(fileName: string) {
  const program = info.languageService.getProgram()
  if (!program) {
    log('Failed to get program while running getSource for: ' + fileName)
    return
  }

  const sourceFile = program.getSourceFile(fileName)
  if (!sourceFile) {
    log('Failed to get source file while running getSource for: ' + fileName)
    return
  }

  return sourceFile
}
--------------------------------------------------------------------------------


Function 4: findPageFile
Language: TypeScript
Lines: 27
Full Code:
--------------------------------------------------------------------------------
export async function findPageFile(
  pagesDir: string,
  normalizedPagePath: string,
  pageExtensions: PageExtensions,
  isAppDir: boolean
): Promise<string | null> {
  const pagePaths = getPagePaths(normalizedPagePath, pageExtensions, isAppDir)
  const [existingPath, ...others] = (
    await Promise.all(
      pagePaths.map(async (path) => {
        const filePath = join(pagesDir, path)
        try {
          return (await fileExists(filePath)) ? path : null
        } catch (err: any) {
          if (!err?.code?.includes('ENOTDIR')) throw err
        }
        return null
      })
    )
  ).filter(nonNullable)

  if (!existingPath) {
    return null
  }

  if (!(await isTrueCasePagePath(existingPath, pagesDir))) {
    return null
  }

  if (others.length > 0) {
    warn(
      `Duplicate page detected. ${cyan(join('pages', existingPath))} and ${cyan(
        join('pages', others[0])
      )} both resolve to ${cyan(normalizedPagePath)}.`
    )
  }

  return existingPath
}
--------------------------------------------------------------------------------


Function 5: createValidFileMatcher
Language: TypeScript
Lines: 27
Full Code:
--------------------------------------------------------------------------------
export function createValidFileMatcher(
  pageExtensions: PageExtensions,
  appDirPath: string | undefined
) {
  const getExtensionRegexString = (extensions: string[]) =>
    `(?:${extensions.join('|')})`

  const validExtensionFileRegex = new RegExp(
    '\.' + getExtensionRegexString(pageExtensions) + '$'
  )
  const leafOnlyPageFileRegex = new RegExp(
    `(^(page|route)|[\\/](page|route))\.${getExtensionRegexString(
      pageExtensions
    )}$`
  )

  const leafOnlyRouteFileRegex = new RegExp(
    `(^route|[\\/]route)\.${getExtensionRegexString(pageExtensions)}$`
  )
  const leafOnlyLayoutFileRegex = new RegExp(
    `(^(layout)|[\\/](layout))\.${getExtensionRegexString(pageExtensions)}$`
  )
  const rootNotFoundFileRegex = new RegExp(
    `^not-found\.${getExtensionRegexString(pageExtensions)}$`
  )
  const leafOnlyDefaultFileRegex = new RegExp(
    `(^(default)|[\\/](default))\.${getExtensionRegexString(pageExtensions)}$`
  )

  function isMetadataFile(filePath: string) {
    const appDirRelativePath = appDirPath
      ? filePath.replace(appDirPath, '')
      : filePath

    return isMetadataRouteFile(appDirRelativePath, pageExtensions, true)
  }
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T23:21:58.499Z
File: If we end up here, there was no work store or work unit store present.
Functions Extracted: 4


Function 1: makeHangingCookies
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function makeHangingCookies(
  workStore: WorkStore,
  prerenderStore: PrerenderStoreModern
): Promise<ReadonlyRequestCookies> {
  const cachedPromise = CachedCookies.get(prerenderStore)
  if (cachedPromise) {
    return cachedPromise
  }

  const promise = makeHangingPromise<ReadonlyRequestCookies>(
    prerenderStore.renderSignal,
    workStore.route,
    '`cookies()`'
  )
  CachedCookies.set(prerenderStore, promise)

  return promise
}
--------------------------------------------------------------------------------


Function 2: makeUntrackedCookiesWithDevWarnings
Language: TypeScript
Lines: 21
Full Code:
--------------------------------------------------------------------------------
function makeUntrackedCookiesWithDevWarnings(
  requestStore: RequestStore,
  underlyingCookies: ReadonlyRequestCookies,
  route?: string
): Promise<ReadonlyRequestCookies> {
  if (requestStore.asyncApiPromises) {
    let promise: Promise<ReadonlyRequestCookies>
    if (underlyingCookies === requestStore.mutableCookies) {
      promise = requestStore.asyncApiPromises.mutableCookies
    } else if (underlyingCookies === requestStore.cookies) {
      promise = requestStore.asyncApiPromises.cookies
    } else {
      throw new InvariantError(
        'Received an underlying cookies object that does not match either `cookies` or `mutableCookies`'
      )
    }
    return instrumentCookiesPromiseWithDevWarnings(promise, route)
  }

  const cachedCookies = CachedCookies.get(underlyingCookies)
  if (cachedCookies) {
    return cachedCookies
  }

  const promise = makeDevtoolsIOAwarePromise(
    underlyingCookies,
    requestStore,
    RenderStage.Runtime
  )

  const proxiedPromise = instrumentCookiesPromiseWithDevWarnings(promise, route)

  CachedCookies.set(underlyingCookies, proxiedPromise)

  return proxiedPromise
}
--------------------------------------------------------------------------------


Function 3: instrumentCookiesPromiseWithDevWarnings
Language: TypeScript
Lines: 14
Full Code:
--------------------------------------------------------------------------------
function instrumentCookiesPromiseWithDevWarnings(
  promise: Promise<ReadonlyRequestCookies>,
  route: string | undefined
) {
  Object.defineProperties(promise, {
    [Symbol.iterator]: replaceableWarningDescriptorForSymbolIterator(
      promise,
      route
    ),
    size: replaceableWarningDescriptor(promise, 'size', route),
    get: replaceableWarningDescriptor(promise, 'get', route),
    getAll: replaceableWarningDescriptor(promise, 'getAll', route),
    has: replaceableWarningDescriptor(promise, 'has', route),
    set: replaceableWarningDescriptor(promise, 'set', route),
    delete: replaceableWarningDescriptor(promise, 'delete', route),
    clear: replaceableWarningDescriptor(promise, 'clear', route),
    toString: replaceableWarningDescriptor(promise, 'toString', route),
  })
  return promise
}
--------------------------------------------------------------------------------


Function 4: createCookiesAccessError
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function createCookiesAccessError(
  route: string | undefined,
  expression: string
) {
  const prefix = route ? `Route "${route}" ` : 'This route '
  return new Error(
    `${prefix}used ${expression}. ` +
      `\`cookies()\` returns a Promise and must be unwrapped with \`await\` or \`React.use()\` before accessing its properties. ` +
      `Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis`
  )
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T23:28:27.472Z
File: Matching BufferAttribute constructor, do not normalize the array.
Functions Extracted: 3


Function 1: getComponent
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
getComponent( index, component ) {
	let value = this.array[ index * this.itemSize + component ];
	if ( this.normalized ) value = denormalize( value, this.array );
	return value;
}
--------------------------------------------------------------------------------


Function 2: setComponent
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
setComponent( index, component, value ) {
	if ( this.normalized ) value = normalize( value, this.array );
	this.array[ index * this.itemSize + component ] = value;
	return this;
}
--------------------------------------------------------------------------------


Function 3: toJSON
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
toJSON() {
	const data = {
		itemSize: this.itemSize,
		type: this.array.constructor.name,
		array: Array.from( this.array ),
		normalized: this.normalized
	};
	if ( this.name !== '' ) data.name = this.name;
	if ( this.usage !== StaticDrawUsage ) data.usage = this.usage;
	return data;
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T23:28:28.063Z
File: Work around fat-arrow-detection complication for detecting typescript typed arrow params
Functions Extracted: 5


Function 1: getterSetter
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function getterSetter(type) {
    if (type != "variable") return pass(afterprop);
    cx.marked = "property";
    return cont(functiondef);
}
--------------------------------------------------------------------------------


Function 2: commasep
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function commasep(what, end, sep) {
    function proceed(type, value) {
        if (sep ? sep.indexOf(type) > -1 : type == ",") {
            var lex = cx.state.lexical;
            if (lex.info == "call") lex.pos = (lex.pos || 0) + 1;
            return cont(function(type, value) {
                if (type == end || value == end) return pass();
                return pass(what);
            }, proceed);
        }
        if (type == end || value == end) return cont();
        if (sep && sep.indexOf(";") > -1) return pass(what);
        return cont(expect(end));
    }
    return function(type, value) {
        if (type == end || value == end) return cont();
        return pass(what, proceed);
    };
}
--------------------------------------------------------------------------------


Function 3: typeexpr
Language: JavaScript
Lines: 19
Full Code:
--------------------------------------------------------------------------------
function typeexpr(type, value) {
    if (value == "keyof" || value == "typeof" || value == "infer" || value == "readonly") {
        cx.marked = "keyword";
        return cont(value == "typeof" ? expressionNoComma : typeexpr);
    }
    if (type == "variable" || value == "void") {
        cx.marked = "type";
        return cont(afterType);
    }
    if (value == "|" || value == "&") return cont(typeexpr);
    if (type == "string" || type == "number" || type == "atom") return cont(afterType);
    if (type == "[") return cont(pushlex("]"), commasep(typeexpr, "]", ","), poplex, afterType);
    if (type == "{") return cont(pushlex("}"), typeprops, poplex, afterType);
    if (type == "(") return cont(commasep(typearg, ")"), maybeReturnType, afterType);
    if (type == "<") return cont(commasep(typeexpr, ">"), typeexpr);
    if (type == "quasi") { return pass(quasiType, afterType); }
}
--------------------------------------------------------------------------------


Function 4: functiondef
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function functiondef(type, value) {
    if (value == "*") {cx.marked = "keyword"; return cont(functiondef);}
    if (type == "variable") {register(value); return cont(functiondef);}
    if (type == "(") return cont(pushcontext, pushlex(")"), commasep(funarg, ")"), poplex, mayberettype, statement, popcontext);
    if (isTS && value == "<") return cont(pushlex(">"), commasep(typeparam, ">"), poplex, functiondef);
}
--------------------------------------------------------------------------------


Function 5: vardef
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function vardef(_, value) {
    if (value == "enum") {cx.marked = "keyword"; return cont(enumdef);}
    return pass(pattern, maybetype, maybeAssign, vardefCont);
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T23:28:28.756Z
File: [2 files: FunctionNode.js, NodeLibrary.js]
Functions Extracted: 3


Function 1: getNodeFunction
Language: JavaScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
getNodeFunction( builder ) {
	const nodeData = builder.getDataFromNode( this );
	let nodeFunction = nodeData.nodeFunction;

	if ( nodeFunction === undefined ) {
		nodeFunction = builder.parser.parseFunction( this.code );
		nodeData.nodeFunction = nodeFunction;
	}

	return nodeFunction;
}
--------------------------------------------------------------------------------


Function 2: fromMaterial
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
fromMaterial( material ) {
	if ( material.isNodeMaterial ) return material;

	let nodeMaterial = null;

	const nodeMaterialClass = this.getMaterialNodeClass( material.type );

	if ( nodeMaterialClass !== null ) {
		nodeMaterial = new nodeMaterialClass();

		for ( const key in material ) {
			nodeMaterial[ key ] = material[ key ];
		}
	}

	return nodeMaterial;
}
--------------------------------------------------------------------------------


Function 3: addType
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
addType( nodeClass, type, library ) {
	if ( library.has( type ) ) {
		warn( `Redefinition of node ${ type }` );
		return;
	}

	if ( typeof nodeClass !== 'function' ) throw new Error( `Node class ${ nodeClass.name } is not a class.` );
	if ( typeof type === 'function' || typeof type === 'object' ) throw new Error( `Base class ${ type } is not a class.` );

	library.set( type, nodeClass );
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T23:28:40.102Z
File: Work around fat-arrow-detection complication for detecting typescript typed arrow params
Functions Extracted: 5


Function 1: getterSetter
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function getterSetter(type) {
    if (type != "variable") return pass(afterprop);
    cx.marked = "property";
    return cont(functiondef);
}
--------------------------------------------------------------------------------


Function 2: commasep
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function commasep(what, end, sep) {
    function proceed(type, value) {
        if (sep ? sep.indexOf(type) > -1 : type == ",") {
            var lex = cx.state.lexical;
            if (lex.info == "call") lex.pos = (lex.pos || 0) + 1;
            return cont(function(type, value) {
                if (type == end || value == end) return pass()
                return pass(what)
            }, proceed);
        }
        if (type == end || value == end) return cont();
        if (sep && sep.indexOf(";") > -1) return pass(what)
        return cont(expect(end));
    }
    return function(type, value) {
        if (type == end || value == end) return cont();
        return pass(what, proceed);
    };
}
--------------------------------------------------------------------------------


Function 3: typeexpr
Language: JavaScript
Lines: 17
Full Code:
--------------------------------------------------------------------------------
function typeexpr(type, value) {
    if (value == "keyof" || value == "typeof" || value == "infer" || value == "readonly") {
        cx.marked = "keyword"
        return cont(value == "typeof" ? expressionNoComma : typeexpr)
    }
    if (type == "variable" || value == "void") {
        cx.marked = "type"
        return cont(afterType)
    }
    if (value == "|" || value == "&") return cont(typeexpr)
    if (type == "string" || type == "number" || type == "atom") return cont(afterType);
    if (type == "[") return cont(pushlex("]"), commasep(typeexpr, "]", ","), poplex, afterType)
    if (type == "{") return cont(pushlex("}"), typeprops, poplex, afterType)
    if (type == "(") return cont(commasep(typearg, ")"), maybeReturnType, afterType)
    if (type == "<") return cont(commasep(typeexpr, ">"), typeexpr)
    if (type == "quasi") { return pass(quasiType, afterType); }
}
--------------------------------------------------------------------------------


Function 4: functiondef
Language: JavaScript
Lines: 9
Full Code:
--------------------------------------------------------------------------------
function functiondef(type, value) {
    if (value == "*") {cx.marked = "keyword"; return cont(functiondef);}
    if (type == "variable") {register(value); return cont(functiondef);}
    if (type == "(") return cont(pushcontext, pushlex(")"), commasep(funarg, ")"), poplex, mayberettype, statement, popcontext);
    if (isTS && value == "<") return cont(pushlex(">"), commasep(typeparam, ">"), poplex, functiondef)
}
--------------------------------------------------------------------------------


Function 5: vardef
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function vardef(_, value) {
    if (value == "enum") {cx.marked = "keyword"; return cont(enumdef)}
    return pass(pattern, maybetype, maybeAssign, vardefCont);
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T23:33:12.664Z
File: WordPress-WordPress-a81ae76/wp-includes/sodium_compat/lib/sodium_compat.php
Functions Extracted: 6


Function 1: crypto_aead_aes256gcm_decrypt
Language: PHP
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function crypto_aead_aes256gcm_decrypt(
        $message,
        $assocData,
        $nonce,
        #[\SensitiveParameter]
        $key
    ) {
        try {
            return ParagonIE_Sodium_Compat::crypto_aead_aes256gcm_decrypt($message, $assocData, $nonce, $key);
        } catch (\TypeError $ex) {
            return false;
        } catch (\SodiumException $ex) {
            return false;
        }
    }
--------------------------------------------------------------------------------


Function 2: crypto_aead_chacha20poly1305_decrypt
Language: PHP
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function crypto_aead_chacha20poly1305_decrypt(
        $message,
        $assocData,
        $nonce,
        #[\SensitiveParameter]
        $key
    ) {
        try {
            return ParagonIE_Sodium_Compat::crypto_aead_chacha20poly1305_decrypt($message, $assocData, $nonce, $key);
        } catch (\TypeError $ex) {
            return false;
        } catch (\SodiumException $ex) {
            return false;
        }
    }
--------------------------------------------------------------------------------


Function 3: crypto_aead_chacha20poly1305_encrypt
Language: PHP
Lines: 9
Full Code:
--------------------------------------------------------------------------------
function crypto_aead_chacha20poly1305_encrypt(
        #[\SensitiveParameter]
        $message,
        $assocData,
        $nonce,
        #[\SensitiveParameter]
        $key
    ) {
        return ParagonIE_Sodium_Compat::crypto_aead_chacha20poly1305_encrypt($message, $assocData, $nonce, $key);
    }
--------------------------------------------------------------------------------


Function 4: crypto_auth_verify
Language: PHP
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function crypto_auth_verify(
        $mac,
        $message,
        #[\SensitiveParameter]
        $key
    ) {
        return ParagonIE_Sodium_Compat::crypto_auth_verify($mac, $message, $key);
    }
--------------------------------------------------------------------------------


Function 5: crypto_sign_open
Language: PHP
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function crypto_sign_open($signedMessage, $pk)
{
    try {
        return ParagonIE_Sodium_Compat::crypto_sign_open($signedMessage, $pk);
    } catch (\TypeError $ex) {
        return false;
    } catch (\SodiumException $ex) {
        return false;
    }
}
--------------------------------------------------------------------------------


Function 6: crypto_sign_verify_detached
Language: PHP
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function crypto_sign_verify_detached($signature, $message, $pk)
{
    return ParagonIE_Sodium_Compat::crypto_sign_verify_detached($signature, $message, $pk);
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T23:33:19.781Z
File: [2 files: ristretto255.php, We also only do that when the whitespace is followed by `<`, so that we do not break e.g. UTF-16LE encoded whitespace like `\n\x00` in half.]
Functions Extracted: 11


Function 1: sodium_crypto_core_ristretto255_add
Language: PHP
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function sodium_crypto_core_ristretto255_add(
        #[\SensitiveParameter]
        $p,
        #[\SensitiveParameter]
        $q
    ) {
        return ParagonIE_Sodium_Compat::ristretto255_add($p, $q, true);
    }
--------------------------------------------------------------------------------


Function 2: sodium_crypto_core_ristretto255_from_hash
Language: PHP
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function sodium_crypto_core_ristretto255_from_hash(
        #[\SensitiveParameter]
        $s
    ) {
        return ParagonIE_Sodium_Compat::ristretto255_from_hash($s, true);
    }
--------------------------------------------------------------------------------


Function 3: sodium_crypto_core_ristretto255_is_valid_point
Language: PHP
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function sodium_crypto_core_ristretto255_is_valid_point(
        #[\SensitiveParameter]
        $s
    ) {
        return ParagonIE_Sodium_Compat::ristretto255_is_valid_point($s, true);
    }
--------------------------------------------------------------------------------


Function 4: sodium_crypto_core_ristretto255_scalar_add
Language: PHP
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function sodium_crypto_core_ristretto255_scalar_add(
        #[\SensitiveParameter]
        $x,
        #[\SensitiveParameter]
        $y
    ) {
        return ParagonIE_Sodium_Compat::ristretto255_scalar_add($x, $y, true);
    }
--------------------------------------------------------------------------------


Function 5: sodium_crypto_core_ristretto255_scalar_mul
Language: PHP
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function sodium_crypto_core_ristretto255_scalar_mul(
        #[\SensitiveParameter]
        $x,
        #[\SensitiveParameter]
        $y
    ) {
        return ParagonIE_Sodium_Compat::ristretto255_scalar_mul($x, $y, true);
    }
--------------------------------------------------------------------------------


Function 6: sodium_crypto_scalarmult_ristretto255
Language: PHP
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function sodium_crypto_scalarmult_ristretto255(
        #[\SensitiveParameter]
        $n,
        #[\SensitiveParameter]
        $p
    ) {
        return ParagonIE_Sodium_Compat::scalarmult_ristretto255($n, $p, true);
    }
--------------------------------------------------------------------------------


Function 7: sodium_crypto_scalarmult_ristretto255_base
Language: PHP
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function sodium_crypto_scalarmult_ristretto255_base(
        #[\SensitiveParameter]
        $n
    ) {
        return ParagonIE_Sodium_Compat::scalarmult_ristretto255_base($n, true);
    }
--------------------------------------------------------------------------------


Function 8: maybe_update_headers
Language: PHP
Lines: 15
Full Code:
--------------------------------------------------------------------------------
private function maybe_update_headers(): void {
        if ($this->headers !== $this->last_headers) {
            $this->parsed_headers = array_map(
                function (string $header_line): array {
                    if (strpos($header_line, ',') === false) {
                        return [$header_line];
                    } else {
                        return array_map('trim', explode(',', $header_line));
                    }
                },
                $this->headers
            );
        }
        $this->last_headers = $this->headers;
    }
--------------------------------------------------------------------------------


Function 9: set_headers
Language: PHP
Lines: 7
Full Code:
--------------------------------------------------------------------------------
private function set_headers(array $headers): void {
        $this->parsed_headers = $headers;
        $this->headers = self::flatten_headers($headers);
        $this->last_headers = $this->headers;
    }
--------------------------------------------------------------------------------


Function 10: flatten_headers
Language: PHP
Lines: 7
Full Code:
--------------------------------------------------------------------------------
private function flatten_headers(array $headers): array {
        return array_map(function (array $values): string {
            return implode(',', $values);
        }, $headers);
    }
--------------------------------------------------------------------------------


Function 11: fromResponse
Language: PHP
Lines: 15
Full Code:
--------------------------------------------------------------------------------
final public static function fromResponse(Response $response): self {
        $headers = [];

        foreach ($response->get_headers() as $name => $header) {
            $headers[$name] = implode(', ', $header);
        }

        /** @var File */
        $file = (new \ReflectionClass(File::class))->newInstanceWithoutConstructor();

        $file->url = $response->get_final_requested_uri();
        $file->useragent = null;
        $file->headers = $headers;
        $file->body = $response->get_body_content();
        $file->status_code = $response->get_status_code();
        $file->permanent_url = $response->get_permanent_uri();

        return $file;
    }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T23:33:20.329Z
File: [2 files: SplFixedArray.php, State.php]
Functions Extracted: 5


Function 1: fromArray
Language: PHP
Lines: 15
Full Code:
--------------------------------------------------------------------------------
public static function fromArray(array $array, $save_indexes = true) {
        $self = new SplFixedArray(count($array));
        if($save_indexes) {
            foreach($array as $key => $value) {
                $self[(int) $key] = $value;
            }
        } else {
            $i = 0;
            foreach (array_values($array) as $value) {
                $self[$i] = $value;
                $i++;
            }
        }
        return $self;
    }
--------------------------------------------------------------------------------


Function 2: counterReset
Language: PHP
Lines: 5
Full Code:
--------------------------------------------------------------------------------
public function counterReset() {
        $this->counter = 1;
        $this->_pad = str_repeat("\0", 4);
        return $this;
    }
--------------------------------------------------------------------------------


Function 3: getCombinedNonce
Language: PHP
Lines: 5
Full Code:
--------------------------------------------------------------------------------
public function getCombinedNonce() {
        return $this->getCounter() .
            ParagonIE_Sodium_Core32_Util::substr($this->getNonce(), 0, 8);
    }
--------------------------------------------------------------------------------


Function 4: rekey
Language: PHP
Lines: 8
Full Code:
--------------------------------------------------------------------------------
public function rekey($newKeyAndNonce) {
        $this->key = ParagonIE_Sodium_Core32_Util::substr($newKeyAndNonce, 0, 32);
        $this->nonce = str_pad(
            ParagonIE_Sodium_Core32_Util::substr($newKeyAndNonce, 32),
            12,
            "\0",
            STR_PAD_RIGHT
        );
        return $this;
    }
--------------------------------------------------------------------------------


Function 5: toString
Language: PHP
Lines: 5
Full Code:
--------------------------------------------------------------------------------
public function toString() {
        return $this->key .
            $this->getCounter() .
            $this->nonce .
            $this->_pad;
    }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T23:33:32.655Z
File: WordPress-WordPress-a81ae76/wp-includes/sodium_compat/lib/php72compat.php
Functions Extracted: 8


Function 1: sodium_add
Language: PHP
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function sodium_add(
        #[\SensitiveParameter]
        &$string1,
        #[\SensitiveParameter]
        $string2
    ) {
        ParagonIE_Sodium_Compat::add($string1, $string2);
    }
--------------------------------------------------------------------------------


Function 2: sodium_crypto_aead_aes256gcm_decrypt
Language: PHP
Lines: 14
Full Code:
--------------------------------------------------------------------------------
function sodium_crypto_aead_aes256gcm_decrypt(
        $ciphertext,
        $additional_data,
        $nonce,
        #[\SensitiveParameter]
        $key
    ) {
        try {
            return ParagonIE_Sodium_Compat::crypto_aead_aes256gcm_decrypt(
                $ciphertext,
                $additional_data,
                $nonce,
                $key
            );
        } catch (Error $ex) {
            return false;
        } catch (Exception $ex) {
            if (($ex instanceof SodiumException) && ($ex->getMessage() === 'AES-256-GCM is not available')) {
                throw $ex;
            }
            return false;
        }
    }
--------------------------------------------------------------------------------


Function 3: sodium_crypto_aead_aes256gcm_encrypt
Language: PHP
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function sodium_crypto_aead_aes256gcm_encrypt(
        #[\SensitiveParameter]
        $message,
        $additional_data,
        $nonce,
        #[\SensitiveParameter]
        $key
    ) {
        return ParagonIE_Sodium_Compat::crypto_aead_aes256gcm_encrypt($message, $additional_data, $nonce, $key);
    }
--------------------------------------------------------------------------------


Function 4: sodium_crypto_auth
Language: PHP
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function sodium_crypto_auth(
        $message,
        #[\SensitiveParameter]
        $key
    ) {
        return ParagonIE_Sodium_Compat::crypto_auth($message, $key);
    }
--------------------------------------------------------------------------------


Function 5: sodium_crypto_box_open
Language: PHP
Lines: 14
Full Code:
--------------------------------------------------------------------------------
function sodium_crypto_box_open(
        $ciphertext,
        $nonce,
        #[\SensitiveParameter]
        $key_pair
    ) {
        try {
            return ParagonIE_Sodium_Compat::crypto_box_open($ciphertext, $nonce, $key_pair);
        } catch (Error $ex) {
            return false;
        } catch (Exception $ex) {
            return false;
        }
    }
--------------------------------------------------------------------------------


Function 6: sodium_crypto_secretbox_open
Language: PHP
Lines: 14
Full Code:
--------------------------------------------------------------------------------
function sodium_crypto_secretbox_open(
        $ciphertext,
        $nonce,
        #[\SensitiveParameter]
        $key
    ) {
        try {
            return ParagonIE_Sodium_Compat::crypto_secretbox_open($ciphertext, $nonce, $key);
        } catch (Error $ex) {
            return false;
        } catch (Exception $ex) {
            return false;
        }
    }
--------------------------------------------------------------------------------


Function 7: sodium_crypto_secretstream_xchacha20poly1305_pull
Language: PHP
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function sodium_crypto_secretstream_xchacha20poly1305_pull(
        #[\SensitiveParameter]
        &$state,
        $ciphertext,
        $additional_data = ''
    ) {
        return ParagonIE_Sodium_Compat::crypto_secretstream_xchacha20poly1305_pull(
            $state,
            $ciphertext,
            $additional_data
        );
    }
--------------------------------------------------------------------------------


Function 8: sodium_crypto_secretstream_xchacha20poly1305_init_push
Language: PHP
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function sodium_crypto_secretstream_xchacha20poly1305_init_push(
        #[\SensitiveParameter]
        $key
    ) {
        return ParagonIE_Sodium_Compat::crypto_secretstream_xchacha20poly1305_init_push($key);
    }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T23:49:03.835Z
File: greensock-GSAP-9f8eca1/esm/CSSPlugin.js
Functions Extracted: 4


Function 1: _renderRoundedCSSProp
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
var _renderRoundedCSSProp = function _renderRoundedCSSProp(ratio, data) {
  var value = data.s + data.c * ratio;
  data.set(data.t, data.p, ~~(value + (value < 0 ? -.5 : .5)) + data.u, data);
};
--------------------------------------------------------------------------------


Function 2: _setterScaleWithRender
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
var _setterScaleWithRender = function _setterScaleWithRender(target, property, value, data, ratio) {
  var cache = target._gsap;
  cache.scaleX = cache.scaleY = value;
  cache.renderTransform(ratio, cache);
};
--------------------------------------------------------------------------------


Function 3: _setterTransformWithRender
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
var _setterTransformWithRender = function _setterTransformWithRender(target, property, value, data, ratio) {
  var cache = target._gsap;
  cache[property] = value;
  cache.renderTransform(ratio, cache);
};
--------------------------------------------------------------------------------


Function 4: _saveStyle
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
var _saveStyle = function _saveStyle(property, isNotCSS) {
  var _this = this;

  var target = this.target,
      style = target.style,
      cache = target._gsap;

  if (property in _transformProps && style) {
    this.tfm = this.tfm || {};

    if (property !== "transform") {
      property = _propertyAliases[property] || property;
      ~property.indexOf(",") ? property.split(",").forEach(function (a) {
        return _this.tfm[a] = _get(target, a);
      }) : this.tfm[property] = cache.x ? cache[property] : _get(target, property);
    }
  }
};
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-19T23:49:05.076Z
File: greensock-GSAP-9f8eca1/esm/GSDevTools.js
Functions Extracted: 5


Function 1: _createElement
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function _createElement(type, container, cssText) {
  var element = _doc.createElementNS ? _doc.createElementNS(type === "svg" ? _svgNS : _domNS, type) : _doc.createElement(type);

  if (container) {
    if (_isString(container)) {
      container = _doc.querySelector(container);
    }

    container.appendChild(element);
  }

  if (type === "svg") {
    element.setAttribute("xmlns", _svgNS);
    element.setAttribute("xmlns:xlink", _domNS);
  }

  cssText && (element.style.cssText = cssText);
  return element;
}
--------------------------------------------------------------------------------


Function 2: _getChildrenOf
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function _getChildrenOf(timeline, includeTimelines) {
  var a = [],
      cnt = 0,
      Tween = gsap.core.Tween,
      tween = timeline._first;

  while (tween) {
    if (tween instanceof Tween) {
      if (tween.vars.id) {
        a[cnt++] = tween;
      }
    } else {
      if (includeTimelines && tween.vars.id) {
        a[cnt++] = tween;
      }

      a = a.concat(_getChildrenOf(tween, includeTimelines));
      cnt = a.length;
    }

    tween = tween._next;
  }

  return a;
}
--------------------------------------------------------------------------------


Function 3: _merge
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function _merge() {
  var t = _globalTimeline._first,
      duration,
      next,
      target;

  if (_rootInstance) {
    duration = _recordedRoot._dur;

    while (t) {
      next = t._next;
      target = t._targets && t._targets[0];

      if (!(_isFunction(target) && target === t.vars.onComplete && !t._dur) && !(target && target._gsIgnore)) {
        _recordedRoot.add(t, t._start - t._delay);
      }

      t = next;
    }

    return duration !== _recordedRoot.duration();
  }
}
--------------------------------------------------------------------------------


Function 4: _updateRootDuration
Language: JavaScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
function _updateRootDuration() {
  if (_rootInstance) {
    _rootInstance.update();

    _rootIsDirty = false;
  }

  gsap.ticker.remove(_updateRootDuration);
}
--------------------------------------------------------------------------------


Function 5: _buildPlayPauseMorph
Language: JavaScript
Lines: 20
Full Code:
--------------------------------------------------------------------------------
function _buildPlayPauseMorph(svg) {
  var tl = gsap.timeline({
    data: "root",
    parent: _independentRoot,
    onComplete: function onComplete() {
      return tl.kill();
    }
  }, _independentRoot._time);
  tl.to(svg.querySelector(".play-1"), {
    duration: 0.4,
    attr: {
      d: "M5.75,3.13 C5.75,9.79 5.75,16.46 5.75,23.13 4.08,23.13 2.41,23.13 0.75,23.13 0.75,16.46 0.75,9.79 0.75,3.12 2.41,3.12 4.08,3.12 5.75,3.12"
    },
    ease: "power2.inOut",
    rotation: 360,
    transformOrigin: "50% 50%"
  }).to(svg.querySelector(".play-2"), {
    duration: 0.4,
    attr: {
      d: "M16.38,3.13 C16.38,9.79 16.38,16.46 16.38,23.13 14.71,23.13 13.04,23.13 11.38,23.13 11.38,16.46 11.38,9.79 11.38,3.12 13.04,3.12 14.71,3.12 16.38,3.12"
    },
    ease: "power2.inOut",
    rotation: 360,
    transformOrigin: "50% 50%"
  }, 0.05);
  return tl;
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-20T00:07:22.558Z
File: motiondivision-motion-b5df740/dev/react/src/examples/useSpring.tsx
Functions Extracted: 4


Function 1: DragExample
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function DragExample() {
    const dragX = useMotionValue(0)
    const dragY = useMotionValue(0)
    const dragXPX = useTransform(dragX, (v) => `${v}%`)
    const dragYPX = useTransform(dragY, (v) => `${v}%`)
    const x = useSpring(dragXPX, spring)
    const y = useSpring(dragYPX, spring)

    return (
        <motion.div
            drag
            dragMomentum={false}
            _dragX={dragX}
            _dragY={dragY}
            style={{ width: 100, height: 100, background: "red", x, y }}
        >
            Drag
        </motion.div>
    )
}
--------------------------------------------------------------------------------


Function 2: RerenderExample
Language: TypeScript
Lines: 20
Full Code:
--------------------------------------------------------------------------------
function RerenderExample() {
    const [{ x, y }, setMousePosition] = useState({ x: 0, y: 0 })

    const updateMousePosition = useRef((e) => {
        frame.postRender(() => setMousePosition({ x: e.clientX, y: e.clientY }))
    })

    const size = 40
    const ref = useRef<HTMLDivElement>(null)

    return (
        <motion.div
            ref={ref}
            animate={{ x, y }}
            transition={spring}
            style={{
                width: 100,
                height: 100,
                background: "green",
                position: "absolute",
                inset: 0,
            }}
            onTapStart={() => {
                window.addEventListener(
                    "mousemove",
                    updateMousePosition.current
                )
            }}
            onTap={() => {
                window.removeEventListener(
                    "mousemove",
                    updateMousePosition.current
                )
            }}
            onTapCancel={() => {
                window.removeEventListener(
                    "mousemove",
                    updateMousePosition.current
                )
            }}
        >
            Rerender
        </motion.div>
    )
}
--------------------------------------------------------------------------------


Function 3: MouseEventExample
Language: TypeScript
Lines: 20
Full Code:
--------------------------------------------------------------------------------
function MouseEventExample() {
    const xPoint = useMotionValue(0)
    const yPoint = useMotionValue(0)
    const x = useSpring(0, spring)
    const y = useSpring(0, spring)
    const ref = useRef<HTMLDivElement>(null)
    const onMove = useRef<(event: MouseEvent) => void>(
        ({ clientX, clientY }: MouseEvent) => {
            const element = ref.current!

            x.set(clientX - element.offsetLeft - element.offsetWidth / 2)
            y.set(clientY - element.offsetTop - element.offsetHeight / 2)
        }
    )

    function startPointer() {
        window.addEventListener("pointermove", onMove.current)
    }

    function cancelPointer() {
        window.removeEventListener("pointermove", onMove.current)
    }

    return (
        <motion.div
            ref={ref}
            style={{ width: 100, height: 100, background: "yellow", x, y }}
            onTapStart={startPointer}
            onTapCancel={cancelPointer}
            onTap={cancelPointer}
        >
            Mouse Event
        </motion.div>
    )
}
--------------------------------------------------------------------------------


Function 4: AnimationExample
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function AnimationExample() {
    const x = useMotionValue(0)
    const xSpring = useSpring(x)

    return (
        <div style={{ width: 100, height: 100, position: "relative" }}>
            <motion.div
                animate={{
                    x: [-200, 200],
                    transition: {
                        duration: 1,
                        repeat: Infinity,
                        repeatType: "reverse",
                    },
                }}
                style={{ width: 100, height: 100, background: "lightblue", x }}
            />
            <motion.div
                style={{
                    width: 100,
                    height: 100,
                    position: "absolute",
                    top: 0,
                    left: 0,
                    background: "lightblue",
                    opacity: 0.5,
                    x: xSpring,
                }}
            />
        </div>
    )
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-20T00:07:22.614Z
File: [2 files: index.tsx, delta-calc.ts]
Functions Extracted: 3


Function 1: createMotionComponent
Language: TypeScript
Lines: 55
Full Code:
--------------------------------------------------------------------------------
export function createMotionComponent<Props, TagName extends keyof DOMMotionComponents | string = "div">
(
    Component: TagName | string | React.ComponentType<Props>,
    { forwardMotionProps = false }: MotionComponentOptions = {},
    preloadedFeatures?: FeaturePackages,
    createVisualElement?: CreateVisualElement<Props, TagName>
) {
    preloadedFeatures && loadFeatures(preloadedFeatures)

    const useVisualState = isSVGComponent(Component)
        ? useSVGVisualState
        : useHTMLVisualState

    function MotionDOMComponent(
        props: MotionComponentProps<Props>,
        externalRef?: React.Ref<HTMLElement | SVGElement>
    ) {
        let MeasureLayout: undefined | React.ComponentType<MotionProps>

        const configAndProps = {
            ...useContext(MotionConfigContext),
            ...props,
            layoutId: useLayoutId(props),
        }

        const { isStatic } = configAndProps

        const context = useCreateMotionContext<HTMLElement | SVGElement>(props)

        const visualState = useVisualState(props, isStatic)

        if (!isStatic && isBrowser) {
            useStrictMode(configAndProps, preloadedFeatures)

            const layoutProjection = getProjectionFunctionality(configAndProps)
            MeasureLayout = layoutProjection.MeasureLayout

            context.visualElement = useVisualElement(
                Component,
                visualState,
                configAndProps,
                createVisualElement,
                layoutProjection.ProjectionNode
            )
        }

        return (
            <MotionContext.Provider value={context}>
                {MeasureLayout && context.visualElement ? (
                    <MeasureLayout
                        visualElement={context.visualElement}
                        {...configAndProps}
                    />
                ) : null}
                {useRender<Props, TagName>(
                    Component,
                    props,
                    useMotionRef<
                        HTMLElement | SVGElement,
                        HTMLRenderState | SVGRenderState
                    >(visualState, context.visualElement, externalRef),
                    visualState,
                    isStatic,
                    forwardMotionProps
                )}
            </MotionContext.Provider>
        )
    }

    MotionDOMComponent.displayName = `motion.${
        typeof Component === "string"
            ? Component
            : `create(${Component.displayName ?? Component.name ?? ""})`
    }`

    const ForwardRefMotionComponent = forwardRef(MotionDOMComponent as any)
    ;(ForwardRefMotionComponent as any)[motionComponentSymbol] = Component

    return ForwardRefMotionComponent as MotionComponent<TagName, Props>
}
--------------------------------------------------------------------------------


Function 2: calcAxisDelta
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export function calcAxisDelta(
    delta: AxisDelta,
    source: Axis,
    target: Axis,
    origin: number = 0.5
) {
    delta.origin = origin
    delta.originPoint = mixNumber(source.min, source.max, delta.origin)
    delta.scale = calcLength(target) / calcLength(source)
    delta.translate =
        mixNumber(target.min, target.max, delta.origin) - delta.originPoint

    if (
        (delta.scale >= SCALE_MIN && delta.scale <= SCALE_MAX) ||
        isNaN(delta.scale)
    ) {
        delta.scale = 1.0
    }

    if (
        (delta.translate >= TRANSLATE_MIN &&
            delta.translate <= TRANSLATE_MAX) ||
        isNaN(delta.translate)
    ) {
        delta.translate = 0.0
    }
}
--------------------------------------------------------------------------------


Function 3: calcBoxDelta
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
export function calcBoxDelta(
    delta: Delta,
    source: Box,
    target: Box,
    origin?: ResolvedValues
): void {
    calcAxisDelta(
        delta.x,
        source.x,
        target.x,
        origin ? (origin.originX as number) : undefined
    )
    calcAxisDelta(
        delta.y,
        source.y,
        target.y,
        origin ? (origin.originY as number) : undefined
    )
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-20T00:07:23.785Z
File: motiondivision-motion-b5df740/packages/framer-motion/src/animation/sequence/create.ts
Functions Extracted: 5


Function 1: createAnimationsFromSequence
Language: TypeScript
Lines: 66
Full Code:
--------------------------------------------------------------------------------
export function createAnimationsFromSequence(
    sequence: AnimationSequence,
    { defaultTransition = {}, ...sequenceTransition }: SequenceOptions = {},
    scope?: AnimationScope,
    generators?: { [key: string]: GeneratorFactory }
): ResolvedAnimationDefinitions {
    const defaultDuration = defaultTransition.duration || 0.3;
    const animationDefinitions: ResolvedAnimationDefinitions = new Map();
    const sequences = new Map<Element | MotionValue, SequenceMap>();
    const elementCache = {};
    const timeLabels = new Map<string, number>();

    let prevTime = 0;
    let currentTime = 0;
    let totalDuration = 0;

    for (let i = 0; i < sequence.length; i++) {
        const segment = sequence[i];

        if (typeof segment === "string") {
            timeLabels.set(segment, currentTime);
            continue;
        } else if (!Array.isArray(segment)) {
            timeLabels.set(
                segment.name,
                calcNextTime(currentTime, segment.at, prevTime, timeLabels)
            );
            continue;
        }

        let [subject, keyframes, transition = {}] = segment;

        if (transition.at !== undefined) {
            currentTime = calcNextTime(
                currentTime,
                transition.at,
                prevTime,
                timeLabels
            );
        }

        let maxDuration = 0;

        const resolveValueSequence = (
            valueKeyframes: UnresolvedValueKeyframe | UnresolvedValueKeyframe[],
            valueTransition: Transition | DynamicAnimationOptions,
            valueSequence: ValueSequence,
            elementIndex = 0,
            numSubjects = 0
        ) => {
            const valueKeyframesAsList = keyframesAsList(valueKeyframes);
            const {
                delay = 0,
                times = defaultOffset(valueKeyframesAsList),
                type = "keyframes",
                repeat,
                repeatType,
                repeatDelay = 0,
                ...remainingTransition
            } = valueTransition;
            let { ease = defaultTransition.ease || "easeOut", duration } =
                valueTransition;

            const calculatedDelay =
                typeof delay === "function"
                    ? delay(elementIndex, numSubjects)
                    : delay;

            const numKeyframes = valueKeyframesAsList.length;
            const createGenerator = isGenerator(type)
                ? type
                : generators?.[type || "keyframes"];
--------------------------------------------------------------------------------


Function 2: getSubjectSequence
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function getSubjectSequence<O extends {}>(
    subject: Element | MotionValue | O,
    sequences: Map<Element | MotionValue | O, SequenceMap>
): SequenceMap {
    !sequences.has(subject) && sequences.set(subject, {});
    return sequences.get(subject)!;
}
--------------------------------------------------------------------------------


Function 3: getValueSequence
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function getValueSequence(name: string, sequences: SequenceMap): ValueSequence {
    if (!sequences[name]) sequences[name] = [];
    return sequences[name];
}
--------------------------------------------------------------------------------


Function 4: keyframesAsList
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function keyframesAsList(
    keyframes: UnresolvedValueKeyframe | UnresolvedValueKeyframe[]
): UnresolvedValueKeyframe[] {
    return Array.isArray(keyframes) ? keyframes : [keyframes];
}
--------------------------------------------------------------------------------


Function 5: getValueTransition
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
export function getValueTransition(
    transition: DynamicAnimationOptions & At,
    key: string
): DynamicAnimationOptions {
    return transition && transition[key as keyof typeof transition]
        ? {
              ...transition,
              ...(transition[key as keyof typeof transition] as Transition),
          }
        : { ...transition };
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-20T00:07:29.344Z
File: [2 files: index.ts, static-prop.test.tsx]
Functions Extracted: 1


Function 1: createScopedAnimate
Language: TypeScript
Lines: 42
Full Code:
--------------------------------------------------------------------------------
export function createScopedAnimate(scope?: AnimationScope) {
    function scopedAnimate(
        sequence: AnimationSequence,
        options?: SequenceOptions
    ): AnimationPlaybackControlsWithThen
    function scopedAnimate(
        value: string | MotionValue<string>,
        keyframes: string | UnresolvedValueKeyframe<string>[],
        options?: ValueAnimationTransition<string>
    ): AnimationPlaybackControlsWithThen
    function scopedAnimate(
        value: number | MotionValue<number>,
        keyframes: number | UnresolvedValueKeyframe<number>[],
        options?: ValueAnimationTransition<number>
    ): AnimationPlaybackControlsWithThen
    function scopedAnimate<V extends string | number>(
        value: V | MotionValue<V>,
        keyframes: V | UnresolvedValueKeyframe<V>[],
        options?: ValueAnimationTransition<V>
    ): AnimationPlaybackControlsWithThen
    function scopedAnimate(
        element: ElementOrSelector,
        keyframes: DOMKeyframesDefinition,
        options?: DynamicAnimationOptions
    ): AnimationPlaybackControlsWithThen
    function scopedAnimate<O extends {}>(
        object: O | O[],
        keyframes: ObjectTarget<O>,
        options?: DynamicAnimationOptions
    ): AnimationPlaybackControlsWithThen
    function scopedAnimate<O extends {}>(
        subjectOrSequence:
            | AnimationSequence
            | MotionValue<number>
            | MotionValue<string>
            | number
            | string
            | ElementOrSelector
            | O
            | O[],
        optionsOrKeyframes?:
            | SequenceOptions
            | number
            | string
            | UnresolvedValueKeyframe<number>[]
            | UnresolvedValueKeyframe<string>[]
            | DOMKeyframesDefinition
            | ObjectTarget<O>,
        options?:
            | ValueAnimationTransition<number>
            | ValueAnimationTransition<string>
            | DynamicAnimationOptions
    ): AnimationPlaybackControlsWithThen {
        let animations: AnimationPlaybackControlsWithThen[] = []
        let animationOnComplete: VoidFunction | undefined

        if (isSequence(subjectOrSequence)) {
            animations = animateSequence(
                subjectOrSequence,
                optionsOrKeyframes as SequenceOptions,
                scope
            )
        } else {
            // Implementation details...
        }
    }
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-20T00:07:30.859Z
File: just allows us to look at the results of animations when everything has wrapped up
Functions Extracted: 3


Function 1: Component
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
const Component = () => {
    const animation = useAnimation();
    const x = useMotionValue(0);

    React.useEffect(() => {
        animation.start({ x: 100 });
    }, []);

    return (
        <motion.div
            animate={animation}
            style={{ x }}
            onAnimationComplete={() => resolve(x.get())}
        />
    );
}
--------------------------------------------------------------------------------


Function 2: Component
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
const Component = () => {
    const animation = useAnimation();
    const x = useMotionValue(0);
    const variants = {
        foo: { x: 200 },
    };

    useEffect(() => {
        animation.start("foo").then(() => resolve(x.get()));
    }, []);

    return (
        <motion.div
            variants={variants}
            animate={animation}
            style={{ x }}
        />
    );
}
--------------------------------------------------------------------------------


Function 3: Component
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
const Component = () => {
    const controls = useAnimation();
    const variants = {
        foo: { x: 1 },
    };

    useEffect(() => {
        controls.set("foo");
        resolve([xa.get(), xb.get()]);
    });

    return (
        <motion.div
            animate={controls}
            variants={variants}
            style={{ x: xa }}
        >
            <motion.div
                variants={child}
                style={{ x: xb }}
            />
        </motion.div>
    );
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-20T00:07:33.124Z
File: motiondivision-motion-b5df740/packages/motion-dom/src/value/index.ts
Functions Extracted: 6


Function 1: setCurrent
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
setCurrent(current: V) {
        this.current = current
        this.updatedAt = time.now()

        if (this.canTrackVelocity === null && current !== undefined) {
            this.canTrackVelocity = isFloat(this.current)
        }
    }
--------------------------------------------------------------------------------


Function 2: onChange
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
onChange(subscription: Subscriber<V>): () => void {
        if (process.env.NODE_ENV !== "production") {
            warnOnce(
                false,
                `value.onChange(callback) is deprecated. Switch to value.on("change", callback).`
            )
        }
        return this.on("change", subscription)
    }
--------------------------------------------------------------------------------


Function 3: on
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
on<EventName extends keyof MotionValueEventCallbacks<V>>(
        eventName: EventName,
        callback: MotionValueEventCallbacks<V>[EventName]
    ) {
        if (!this.events[eventName]) {
            this.events[eventName] = new SubscriptionManager()
        }

        const unsubscribe = this.events[eventName].add(callback)

        if (eventName === "change") {
            return () => {
                unsubscribe()

                frame.read(() => {
                    if (!this.events.change.getSize()) {
                        this.stop()
                    }
                })
            }
        }

        return unsubscribe
    }
--------------------------------------------------------------------------------


Function 4: set
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
set(v: V) {
        if (!this.passiveEffect) {
            this.updateAndNotify(v)
        } else {
            this.passiveEffect(v, this.updateAndNotify)
        }
    }
--------------------------------------------------------------------------------


Function 5: jump
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
jump(v: V, endAnimation = true) {
        this.updateAndNotify(v)
        this.prev = v
        this.prevUpdatedAt = this.prevFrameValue = undefined
        endAnimation && this.stop()
        if (this.stopPassiveEffect) this.stopPassiveEffect()
    }
--------------------------------------------------------------------------------


Function 6: updateAndNotify
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
updateAndNotify = (v: V) => {
        const currentTime = time.now()

        if (this.updatedAt !== currentTime) {
            this.setPrevFrameValue()
        }

        this.prev = this.current

        this.setCurrent(v)
    }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-20T00:19:40.962Z
File: meteor-meteor-6f48b86/packages/accounts-base/accounts-base.d.ts
Functions Extracted: 9


Function 1: createUser
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function createUser(
    options: {
      username?: string | undefined;
      email?: string | undefined;
      password?: string | undefined;
      profile?: Meteor.UserProfile | undefined;
    },
    callback?: (error?: Error | Meteor.Error | Meteor.TypedError) => void
  ): Promise<string>;
--------------------------------------------------------------------------------


Function 2: changePassword
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function changePassword(
    oldPassword: string,
    newPassword: string,
    callback?: (error?: Error | Meteor.Error | Meteor.TypedError) => void
  ): Promise<void>;
--------------------------------------------------------------------------------


Function 3: forgotPassword
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function forgotPassword(
    options: { email?: string | undefined },
    callback?: (error?: Error | Meteor.Error | Meteor.TypedError) => void
  ): Promise<void>;
--------------------------------------------------------------------------------


Function 4: resetPassword
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function resetPassword(
    token: string,
    newPassword: string,
    callback?: (error?: Error | Meteor.Error | Meteor.TypedError) => void
  ): Promise<void>;
--------------------------------------------------------------------------------


Function 5: verifyEmail
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function verifyEmail(
    token: string,
    callback?: (error?: Error | Meteor.Error | Meteor.TypedError) => void
  ): Promise<void>;
--------------------------------------------------------------------------------


Function 6: sendEnrollmentEmail
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function sendEnrollmentEmail(
    userId: string,
    email?: string,
    extraTokenData?: Record<string, unknown>,
    extraParams?: Record<string, unknown>
  ): Promise<SendEmailResult>;
--------------------------------------------------------------------------------


Function 7: sendResetPasswordEmail
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function sendResetPasswordEmail(
    userId: string,
    email?: string,
    extraTokenData?: Record<string, unknown>,
    extraParams?: Record<string, unknown>
  ): Promise<SendEmailResult>;
--------------------------------------------------------------------------------


Function 8: sendVerificationEmail
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function sendVerificationEmail(
    userId: string,
    email?: string,
    extraTokenData?: Record<string, unknown>,
    extraParams?: Record<string, unknown>
  ): Promise<SendEmailResult>;
--------------------------------------------------------------------------------


Function 9: _checkPasswordAsync
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function _checkPasswordAsync(
    user: Meteor.User,
    password: Password
  ): Promise<{ userId: string; error?: any }>
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-20T00:19:42.015Z
File: [2 files: logging.d.ts, WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.]
Functions Extracted: 9


Function 1: normalizeName
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function normalizeName(name) {
  if (typeof name !== 'string') {
    name = String(name)
  }
  if (/[^a-z0-9\-#$%&'*+\.\^_`|~]/i.test(name)) {
    throw new TypeError('Invalid character in header field name')
  }
  return name.toLowerCase()
}
--------------------------------------------------------------------------------


Function 2: Headers
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function Headers(headers) {
  this.map = {}

  if (headers instanceof Headers) {
    headers.forEach(function(value, name) {
      this.append(name, value)
    }, this)

  } else if (headers) {
    Object.getOwnPropertyNames(headers).forEach(function(name) {
      this.append(name, headers[name])
    }, this)
  }
}
--------------------------------------------------------------------------------


Function 3: append
Language: JavaScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
Headers.prototype.append = function(name, value) {
  name = normalizeName(name)
  value = normalizeValue(value)
  var list = this.map[name]
  if (!list) {
    list = []
    this.map[name] = list
  }
  list.push(value)
}
--------------------------------------------------------------------------------


Function 4: forEach
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
Headers.prototype.forEach = function(callback, thisArg) {
  Object.getOwnPropertyNames(this.map).forEach(function(name) {
    this.map[name].forEach(function(value) {
      callback.call(thisArg, value, name, this)
    }, this)
  }, this)
}
--------------------------------------------------------------------------------


Function 5: consumed
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function consumed(body) {
  if (body.bodyUsed) {
    return Promise.reject(new TypeError('Already read'))
  }
  body.bodyUsed = true
}
--------------------------------------------------------------------------------


Function 6: fileReaderReady
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function fileReaderReady(reader) {
  return new Promise(function(resolve, reject) {
    reader.onload = function() {
      resolve(reader.result)
    }
    reader.onerror = function() {
      reject(reader.error)
    }
  })
}
--------------------------------------------------------------------------------


Function 7: readBlobAsArrayBuffer
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function readBlobAsArrayBuffer(blob) {
  var reader = new FileReader()
  reader.readAsArrayBuffer(blob)
  return fileReaderReady(reader)
}
--------------------------------------------------------------------------------


Function 8: readBlobAsText
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function readBlobAsText(blob) {
  var reader = new FileReader()
  reader.readAsText(blob)
  return fileReaderReady(reader)
}
--------------------------------------------------------------------------------


Function 9: _initBody
Language: JavaScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
this._initBody = function(body) {
  this._bodyInit = body
  if (typeof body === 'string') {
    this._bodyText = body
  } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
    this._bodyBlob = body
  } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
    this._bodyFormData = body
  } else if (!body) {
    this._bodyText = ''
  }
}
--------------------------------------------------------------------------------

================================================================================
