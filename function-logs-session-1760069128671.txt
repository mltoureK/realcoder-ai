=== FUNCTION EXTRACTION & QUESTION GENERATION LOG ===
Session ID: session-1760069128671
Started: 2025-10-10T04:05:28.671Z


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T04:05:28.673Z
File: TanStack-query-f4a0cd5/packages/eslint-plugin-query/src/__tests__/stable-query-client.test.ts
Functions Extracted: 1


Function 1: Component
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function Component() {
  const queryClient = new QueryClient({ defaultOptions: { /* */ } });
  return;
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T04:06:11.000Z
File: UTILS
Functions Extracted: 8


Function 1: functionalUpdate
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
export function functionalUpdate<TInput, TOutput>(
  updater: Updater<TInput, TOutput>,
  input: TInput,
): TOutput {
  return typeof updater === 'function'
    ? (updater as (_: TInput) => TOutput)(input)
    : updater
}
--------------------------------------------------------------------------------


Function 2: resolveStaleTime
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
export function resolveStaleTime<
  TQueryFnData = unknown,
  TError = DefaultError,
  TData = TQueryFnData,
  TQueryKey extends QueryKey = QueryKey,
>(
  staleTime:
    | undefined
    | StaleTimeFunction<TQueryFnData, TError, TData, TQueryKey>,
  query: Query<TQueryFnData, TError, TData, TQueryKey>,
): StaleTime | undefined {
  return typeof staleTime === 'function' ? staleTime(query) : staleTime
}
--------------------------------------------------------------------------------


Function 3: matchQuery
Language: TypeScript
Lines: 21
Full Code:
--------------------------------------------------------------------------------
export function matchQuery(
  filters: QueryFilters,
  query: Query<any, any, any, any>,
): boolean {
  const {
    type = 'all',
    exact,
    fetchStatus,
    predicate,
    queryKey,
    stale,
  } = filters;

  if (queryKey) {
    if (exact) {
      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {
        return false;
      }
    } else if (!partialMatchKey(query.queryKey, queryKey)) {
      return false;
    }
  }

  if (type !== 'all') {
    const isActive = query.isActive();
    if (type === 'active' && !isActive) {
      return false;
    }
    if (type === 'inactive' && isActive) {
      return false;
    }
  }

  if (typeof stale === 'boolean' && query.isStale() !== stale) {
    return false;
  }

  if (fetchStatus && fetchStatus !== query.state.fetchStatus) {
    return false;
  }

  if (predicate && !predicate(query)) {
    return false;
  }

  return true;
}
--------------------------------------------------------------------------------


Function 4: matchMutation
Language: TypeScript
Lines: 17
Full Code:
--------------------------------------------------------------------------------
export function matchMutation(
  filters: MutationFilters,
  mutation: Mutation<any, any>,
): boolean {
  const { exact, status, predicate, mutationKey } = filters;
  if (mutationKey) {
    if (!mutation.options.mutationKey) {
      return false;
    }
    if (exact) {
      if (hashKey(mutation.options.mutationKey) !== hashKey(mutationKey)) {
        return false;
      }
    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {
      return false;
    }
  }

  if (status && mutation.state.status !== status) {
    return false;
  }

  if (predicate && !predicate(mutation)) {
    return false;
  }

  return true;
}
--------------------------------------------------------------------------------


Function 5: hashKey
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
export function hashKey(queryKey: QueryKey | MutationKey): string {
  return JSON.stringify(queryKey, (_, val) =>
    isPlainObject(val)
      ? Object.keys(val)
          .sort()
          .reduce((result, key) => {
            result[key] = val[key];
            return result;
          }, {} as any)
      : val,
  );
}
--------------------------------------------------------------------------------


Function 6: partialMatchKey
Language: TypeScript
Lines: 14
Full Code:
--------------------------------------------------------------------------------
export function partialMatchKey(a: QueryKey, b: QueryKey): boolean
export function partialMatchKey(a: any, b: any): boolean {
  if (a === b) {
    return true;
  }

  if (typeof a !== typeof b) {
    return false;
  }

  if (a && b && typeof a === 'object' && typeof b === 'object') {
    return Object.keys(b).every((key) => partialMatchKey(a[key], b[key]));
  }

  return false;
}
--------------------------------------------------------------------------------


Function 7: replaceEqualDeep
Language: TypeScript
Lines: 37
Full Code:
--------------------------------------------------------------------------------
export function replaceEqualDeep<T>(a: unknown, b: T): T
export function replaceEqualDeep(a: any, b: any): any {
  if (a === b) {
    return a;
  }

  const array = isPlainArray(a) && isPlainArray(b);

  if (!array && !(isPlainObject(a) && isPlainObject(b))) return b;

  const aItems = array ? a : Object.keys(a);
  const aSize = aItems.length;
  const bItems = array ? b : Object.keys(b);
  const bSize = bItems.length;
  const copy: any = array ? new Array(bSize) : {};

  let equalItems = 0;

  for (let i = 0; i < bSize; i++) {
    const key: any = array ? i : bItems[i];
    const aItem = a[key];
    const bItem = b[key];

    if (aItem === bItem) {
      copy[key] = aItem;
      if (array ? i < aSize : hasOwn.call(a, key)) equalItems++;
      continue;
    }

    if (
      aItem === null ||
      bItem === null ||
      typeof aItem !== 'object' ||
      typeof bItem !== 'object'
    ) {
      copy[key] = bItem;
      continue;
    }

    const v = replaceEqualDeep(aItem, bItem);
    copy[key] = v;
    if (v === aItem) equalItems++;
  }

  return aSize === bSize && equalItems === aSize ? a : copy;
}
--------------------------------------------------------------------------------


Function 8: shallowEqualObjects
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
export function shallowEqualObjects<T extends Record<string, any>>(
  a: T,
  b: T | undefined,
): boolean {
  if (!b || Object.keys(a).length !== Object.keys(b).length) {
    return false;
  }

  for (const key in a) {
    if (a[key] !== b[key]) {
      return false;
    }
  }

  return true;
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T04:06:27.112Z
File: TanStack-query-f4a0cd5/packages/query-persist-client-core/src/persist.ts
Functions Extracted: 4


Function 1: persistQueryClientRestore
Language: TypeScript
Lines: 24
Full Code:
--------------------------------------------------------------------------------
export async function persistQueryClientRestore({
  queryClient,
  persister,
  maxAge = 1000 * 60 * 60 * 24,
  buster = '',
  hydrateOptions,
}: PersistedQueryClientRestoreOptions) {
  try {
    const persistedClient = await persister.restoreClient();

    if (persistedClient) {
      if (persistedClient.timestamp) {
        const expired = Date.now() - persistedClient.timestamp > maxAge;
        const busted = persistedClient.buster !== buster;
        if (expired || busted) {
          return persister.removeClient();
        } else {
          hydrate(queryClient, persistedClient.clientState, hydrateOptions);
        }
      } else {
        return persister.removeClient();
      }
    }
  } catch (err) {
    if (process.env.NODE_ENV !== 'production') {
      console.error(err);
      console.warn(
        'Encountered an error attempting to restore client cache from persisted location. As a precaution, the persisted cache will be discarded.',
      );
    }

    await persister.removeClient();

    throw err;
  }
}
--------------------------------------------------------------------------------


Function 2: persistQueryClientSave
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
export async function persistQueryClientSave({
  queryClient,
  persister,
  buster = '',
  dehydrateOptions,
}: PersistedQueryClientSaveOptions) {
  const persistClient: PersistedClient = {
    buster,
    timestamp: Date.now(),
    clientState: dehydrate(queryClient, dehydrateOptions),
  };

  await persister.persistClient(persistClient);
}
--------------------------------------------------------------------------------


Function 3: persistQueryClientSubscribe
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export function persistQueryClientSubscribe(
  props: PersistedQueryClientSaveOptions,
) {
  const unsubscribeQueryCache = props.queryClient
    .getQueryCache()
    .subscribe((event) => {
      if (isCacheEventType(event.type)) {
        persistQueryClientSave(props);
      }
    });

  const unsubscribeMutationCache = props.queryClient
    .getMutationCache()
    .subscribe((event) => {
      if (isCacheEventType(event.type)) {
        persistQueryClientSave(props);
      }
    });

  return () => {
    unsubscribeQueryCache();
    unsubscribeMutationCache();
  };
}
--------------------------------------------------------------------------------


Function 4: persistQueryClient
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
export function persistQueryClient(
  props: PersistQueryClientOptions,
): [() => void, Promise<void>] {
  let hasUnsubscribed = false;
  let persistQueryClientUnsubscribe: (() => void) | undefined;
  const unsubscribe = () => {
    hasUnsubscribed = true;
    persistQueryClientUnsubscribe?.();
  };
  // Additional logic would go here
}
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:06:35.179Z
Question Type: multiple-choice
Function: persistQueryClientRestore
Function Size: 1167 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: persistQueryClientRestore (TypeScript)\n// Restores persisted data to the QueryCache and handles expiration or errors.\n\nexport async function persistQueryClientRestore({\n  queryClient,\n  persister,\n  maxAge = 1000 * 60 * 60 * 24,\n  buster = '',\n  hydrateOptions,\n}: PersistedQueryClientRe
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:06:36.101Z
Question Type: multiple-choice
Function: persistQueryClient
Function Size: 455 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: persistQueryClient (TypeScript)\n// Restores persisted data to QueryCache and persists further changes.\n\nexport function persistQueryClient(\n  props: PersistQueryClientOptions,\n): [() => void, Promise<void>] {\n  let hasUnsubscribed = false;\n  let persistQueryClientUnsubscribe: (() => voi
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:06:41.247Z
Question Type: select-all
Function: persistQueryClientSubscribe
Function Size: 700 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: persistQueryClientSubscribe (TypeScript)\n// Subscribes to QueryCache and MutationCache updates for persisting.\n\nexport function persistQueryClientSubscribe(\n  props: PersistedQueryClientSaveOptions,\n) {\n  const unsubscribeQueryCache = props.queryClient\n    .getQueryCache()\n    .subscrib
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:06:42.153Z
Question Type: multiple-choice
Function: matchQuery
Function Size: 1000 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: matchQuery (TypeScript)\n// Checks if a query matches the specified filters.\n\nexport function matchQuery(\n  filters: QueryFilters,\n  query: Query<any, any, any, any>,\n): boolean {\n  const {\n    type = 'all',\n    exact,\n    fetchStatus,\n    predicate,\n    queryKey,\n    stale,\n  } = filter
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:06:45.007Z
Question Type: function-variant
Function: persistQueryClientSave
Function Size: 461 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: persistQueryClientSave (TypeScript)\n// Persists data from the QueryCache using the provided persister.\n\nexport async function persistQueryClientSave({\n  queryClient,\n  persister,\n  buster = '',\n  dehydrateOptions,\n}: PersistedQueryClientSaveOptions) {\n  const persistClient: PersistedCli
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:06:46.132Z
Question Type: select-all
Function: persistQueryClient
Function Size: 455 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: persistQueryClient (TypeScript)\n// Restores persisted data to QueryCache and persists further changes.\n\nexport function persistQueryClient(\n  props: PersistQueryClientOptions,\n): [() => void, Promise<void>] {\n  let hasUnsubscribed = false;\n  let persistQueryClientUnsubscribe: (() => voi
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:06:49.875Z
Question Type: multiple-choice
Function: persistQueryClientSave
Function Size: 461 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: persistQueryClientSave (TypeScript)\n// Persists data from the QueryCache using the provided persister.\n\nexport async function persistQueryClientSave({\n  queryClient,\n  persister,\n  buster = '',\n  dehydrateOptions,\n}: PersistedQueryClientSaveOptions) {\n  const persistClient: PersistedCli
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:06:54.700Z
Question Type: true-false
Function: resolveStaleTime
Function Size: 515 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: resolveStaleTime (TypeScript)\n// Determines the stale time based on a function or a direct value.\n\nexport function resolveStaleTime<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  staleTime:\n    | undefined\n    | 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:06:58.679Z
Question Type: order-sequence
Function: matchQuery
Function Size: 1000 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: matchQuery (TypeScript)\n// Checks if a query matches the specified filters.\n\nexport function matchQuery(\n  filters: QueryFilters,\n  query: Query<any, any, any, any>,\n): boolean {\n  const {\n    type = 'all',\n    exact,\n    fetchStatus,\n    predicate,\n    queryKey,\n    stale,\n  } = filter
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:07:03.529Z
Question Type: function-variant
Function: functionalUpdate
Function Size: 341 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: functionalUpdate (TypeScript)\n// Applies an updater function to an input or returns the updater directly.\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput,\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as (_: T
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:07:09.264Z
Question Type: multiple-choice
Function: partialMatchKey
Function Size: 478 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: partialMatchKey (TypeScript)\n// Checks if key 'b' partially matches with key 'a'.\n\nexport function partialMatchKey(a: QueryKey, b: QueryKey): boolean\nexport function partialMatchKey(a: any, b: any): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  if (typeof a !== typeof b) {\n    retu
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:07:11.514Z
Question Type: order-sequence
Function: replaceEqualDeep
Function Size: 1221 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: replaceEqualDeep (TypeScript)\n// Replaces deeply equal children of 'b' with those of 'a'.\n\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a;\n  }\n\n  const array = isPlainArray(a) && isPlainArray
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:07:11.647Z
Question Type: multiple-choice
Function: Component
Function Size: 223 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: Component (JavaScript)\n// Creates a React component that initializes a QueryClient with default options.\n\nfunction Component() {\n  const queryClient = new QueryClient({ defaultOptions: { /* */ } });\n  return;\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:07:12.112Z
Question Type: multiple-choice
Function: shallowEqualObjects
Function Size: 389 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: shallowEqualObjects (TypeScript)\n// Compares two objects for shallow equality.\n\nexport function shallowEqualObjects<T extends Record<string, any>>(\n  a: T,\n  b: T | undefined,\n): boolean {\n  if (!b || Object.keys(a).length !== Object.keys(b).length) {\n    return false;\n  }\n\n  for (const
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:07:18.381Z
Question Type: multiple-choice
Function: persistQueryClientSubscribe
Function Size: 700 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: persistQueryClientSubscribe (TypeScript)\n// Subscribes to QueryCache and MutationCache updates for persisting.\n\nexport function persistQueryClientSubscribe(\n  props: PersistedQueryClientSaveOptions,\n) {\n  const unsubscribeQueryCache = props.queryClient\n    .getQueryCache()\n    .subscrib
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760069128671
Repository: Unknown
Total Questions Generated: 17
Total Chunks Processed: 13
Ended: 2025-10-10T04:07:24.749Z
================================================================================

