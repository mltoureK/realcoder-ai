=== FUNCTION EXTRACTION & QUESTION GENERATION LOG ===
Session ID: session-1760390925437
Started: 2025-10-13T21:28:45.438Z


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-13T21:28:45.440Z
File: [3 files: Items per page in timeline., certification with projects., index.ts]
Functions Extracted: 8


Function 1: viewProject
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function viewProject(completedChallenge: CompletedChallenge): void {
    setCompletedChallenge(completedChallenge);
    setProjectTitle(
      idToNameMap.get(completedChallenge.id)?.challengeTitle ?? ''
    );
    openModal('projectPreview');
}
--------------------------------------------------------------------------------


Function 2: viewExamResults
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function viewExamResults(completedChallenge: CompletedChallenge): void {
    setCompletedChallenge(completedChallenge);
    setProjectTitle(
      idToNameMap.get(completedChallenge.id)?.challengeTitle ?? ''
    );
    openModal('examResults');
}
--------------------------------------------------------------------------------


Function 3: renderViewButton
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function renderViewButton(
    completedChallenge: CompletedChallenge
): React.ReactNode {
    const { id } = completedChallenge;
    const projectTitle = idToNameMap.get(id)?.challengeTitle || '';
    return (
      <SolutionDisplayWidget
        completedChallenge={completedChallenge}
        projectTitle={projectTitle}
        showUserCode={() => viewSolution(completedChallenge)}
        showProjectPreview={() => viewProject(completedChallenge)}
        showExamResults={() => viewExamResults(completedChallenge)}
        displayContext='timeline'
      ></SolutionDisplayWidget>
    );
}
--------------------------------------------------------------------------------


Function 4: renderCompletion
Language: TypeScript
Lines: 21
Full Code:
--------------------------------------------------------------------------------
function renderCompletion(completed: CompletedChallenge) {
    const { id } = completed;
    const challenge = idToNameMap.get(id);
    if (!challenge) return;
    const { challengeTitle, challengePath, certPath } = challenge;
    const completedDate = new Date(completed.completedDate);
    return (
      <tr className='timeline-row' key={id}>
        <td>
          {certPath ? (
            <Link
              className='timeline-cert-link'
              to={`/certification/${username}/${certPath}`}
            >
              {challengeTitle}
              <CertificationIcon />
            </Link>
          ) : (
            <Link to={challengePath}>{challengeTitle}</Link>
          )}
        </td>
        <td>{renderViewButton(completed)}</td>
        <td className='text-center'>
          <time dateTime={completedDate.toISOString()}>
            {completedDate.toLocaleString([localeCode, 'en-US'], {
              year: 'numeric',
              month: 'short',
              day: 'numeric'
            })}
          </time>
        </td>
      </tr>
    );
  }
--------------------------------------------------------------------------------


Function 5: initialiseState
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function initialiseState() {
    setProjectTitle('');
    setChallengeFiles(null);
    setSolution(null);
    setExamResults(null);
    setIsOpen(false);
}
--------------------------------------------------------------------------------


Function 6: getProjectSolution
Language: TypeScript
Lines: 13
Full Code:
--------------------------------------------------------------------------------
const getProjectSolution = (projectId: string, projectTitle: string) => {
    const { completedChallenges, openModal } = props;
    const completedProject = find(
      completedChallenges,
      ({ id }) => projectId === id
    );
    if (!completedProject) {
      return null;
    }
    const { solution, challengeFiles, examResults } = completedProject;
    const showUserCode = () => {
      setProjectTitle(projectTitle);
      setChallengeFiles(challengeFiles);
      setSolution(solution);
      setIsOpen(true);
    };
}
--------------------------------------------------------------------------------


Function 7: mapErr
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
export async function mapErr<T>(promise: Promise<T>): Promise<Result<T>> {
  try {
    return { hasError: false, data: await promise };
  } catch (error) {
    return { hasError: true, error };
  }
}
--------------------------------------------------------------------------------


Function 8: syncMapErr
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
export function syncMapErr<T>(fn: () => T): Result<T> {
  try {
    return { hasError: false, data: fn() };
  } catch (error) {
    return { hasError: true, error };
  }
}
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T21:28:51.696Z
Question Type: true-false
Function: syncMapErr
Function Size: 295 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: syncMapErr (TypeScript)\n// Wraps a synchronous function to catch throws and return them as part of the value.\n\nexport function syncMapErr<T>(fn: () => T): Result<T> {\n  try {\n    return { hasError: false, data: fn() };\n  } catch (error) {\n    return { hasError: true, error };\n  }\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T21:28:51.947Z
Question Type: select-all
Function: viewExamResults
Function Size: 355 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: viewExamResults (TypeScript)\n// Sets the completed challenge and opens the exam results modal.\n\nfunction viewExamResults(completedChallenge: CompletedChallenge): void {\n    setCompletedChallenge(completedChallenge);\n    setProjectTitle(\n      idToNameMap.get(completedChallenge.id)?.chal
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T21:28:54.707Z
Question Type: select-all
Function: initialiseState
Function Size: 255 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: initialiseState (TypeScript)\n// Initializes the state for the certification settings.\n\nfunction initialiseState() {\n    setProjectTitle('');\n    setChallengeFiles(null);\n    setSolution(null);\n    setExamResults(null);\n    setIsOpen(false);\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T21:29:02.426Z
Question Type: multiple-choice
Function: renderCompletion
Function Size: 1182 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: renderCompletion (TypeScript)\n// Renders the completion details of a completed challenge.\n\nfunction renderCompletion(completed: CompletedChallenge) {\n    const { id } = completed;\n    const challenge = idToNameMap.get(id);\n    if (!challenge) return;\n    const { challengeTitle, challeng
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T21:29:04.542Z
Question Type: order-sequence
Function: getProjectSolution
Function Size: 633 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getProjectSolution (TypeScript)\n// Retrieves the project solution for a given project ID.\n\nconst getProjectSolution = (projectId: string, projectTitle: string) => {\n    const { completedChallenges, openModal } = props;\n    const completedProject = find(\n      completedChallenges,\n      
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T21:29:05.924Z
Question Type: select-all
Function: renderViewButton
Function Size: 706 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: renderViewButton (TypeScript)\n// Renders the view button for a completed challenge with options.\n\nfunction renderViewButton(\n    completedChallenge: CompletedChallenge\n): React.ReactNode {\n    const { id } = completedChallenge;\n    const projectTitle = idToNameMap.get(id)?.challengeTitl
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T21:29:07.348Z
Question Type: select-all
Function: mapErr
Function Size: 308 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: mapErr (TypeScript)\n// Wraps a promise to catch errors and return them as part of the promise.\n\nexport async function mapErr<T>(promise: Promise<T>): Promise<Result<T>> {\n  try {\n    return { hasError: false, data: await promise };\n  } catch (error) {\n    return { hasError: true, error 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T21:29:11.078Z
Question Type: true-false
Function: renderViewButton
Function Size: 706 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: renderViewButton (TypeScript)\n// Renders the view button for a completed challenge with options.\n\nfunction renderViewButton(\n    completedChallenge: CompletedChallenge\n): React.ReactNode {\n    const { id } = completedChallenge;\n    const projectTitle = idToNameMap.get(id)?.challengeTitl
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T21:29:19.860Z
Question Type: function-variant
Function: mapErr
Function Size: 308 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: mapErr (TypeScript)\n// Wraps a promise to catch errors and return them as part of the promise.\n\nexport async function mapErr<T>(promise: Promise<T>): Promise<Result<T>> {\n  try {\n    return { hasError: false, data: await promise };\n  } catch (error) {\n    return { hasError: true, error 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T21:29:20.301Z
Question Type: function-variant
Function: initialiseState
Function Size: 255 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: initialiseState (TypeScript)\n// Initializes the state for the certification settings.\n\nfunction initialiseState() {\n    setProjectTitle('');\n    setChallengeFiles(null);\n    setSolution(null);\n    setExamResults(null);\n    setIsOpen(false);\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T21:29:22.659Z
Question Type: select-all
Function: getProjectSolution
Function Size: 633 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: getProjectSolution (TypeScript)\n// Retrieves the project solution for a given project ID.\n\nconst getProjectSolution = (projectId: string, projectTitle: string) => {\n    const { completedChallenges, openModal } = props;\n    const completedProject = find(\n      completedChallenges,\n      
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T21:29:24.090Z
Question Type: function-variant
Function: viewProject
Function Size: 353 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: viewProject (TypeScript)\n// Sets the completed challenge and opens the project preview modal.\n\nfunction viewProject(completedChallenge: CompletedChallenge): void {\n    setCompletedChallenge(completedChallenge);\n    setProjectTitle(\n      idToNameMap.get(completedChallenge.id)?.challenge
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T21:29:30.730Z
Question Type: function-variant
Function: renderCompletion
Function Size: 1182 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: renderCompletion (TypeScript)\n// Renders the completion details of a completed challenge.\n\nfunction renderCompletion(completed: CompletedChallenge) {\n    const { id } = completed;\n    const challenge = idToNameMap.get(id);\n    if (!challenge) return;\n    const { challengeTitle, challeng
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T21:29:32.112Z
Question Type: function-variant
Function: syncMapErr
Function Size: 295 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: syncMapErr (TypeScript)\n// Wraps a synchronous function to catch throws and return them as part of the value.\n\nexport function syncMapErr<T>(fn: () => T): Result<T> {\n  try {\n    return { hasError: false, data: fn() };\n  } catch (error) {\n    return { hasError: true, error };\n  }\n}
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760390925437
Repository: Unknown
Total Questions Generated: 15
Total Chunks Processed: 8
Ended: 2025-10-13T21:29:34.808Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-13T21:30:11.262Z
File: [3 files: to make use of the Response object (message, status, etc), TODO: Convert to DELETE, link-ms-user.tsx]
Functions Extracted: 5


Function 1: get
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
async function get<T>(
  path: string,
  signal?: AbortSignal
): Promise<ResponseWithData<T>> {
  const response = await fetch(`${base}${path}`, {
    ...defaultOptions,
    headers: { 'CSRF-Token': getCSRFToken() },
    signal
  });

  return combineDataWithResponse(response);
}
--------------------------------------------------------------------------------


Function 2: combineDataWithResponse
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
async function combineDataWithResponse<T>(response: Response) {
  const data = (await response.json()) as T;
  return { response, data };
}
--------------------------------------------------------------------------------


Function 3: request
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
async function request<T>(
  method: 'POST' | 'PUT' | 'DELETE',
  path: string,
  body: unknown
): Promise<ResponseWithData<T>> {
  const options: RequestInit = {
    ...defaultOptions,
    method,
    headers: {
      'CSRF-Token': getCSRFToken(),
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(body)
  };

  const response = await fetch(`${base}${path}`, options);
  return combineDataWithResponse(response);
}
--------------------------------------------------------------------------------


Function 4: parseApiResponseToClientUser
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function parseApiResponseToClientUser(data: ApiUserResponse): User | null {
  const userData = data.user?.[data?.result ?? ''];
  let completedChallenges: CompletedChallenge[] = [];
  let savedChallenges: SavedChallenge[] = [];
  if (userData) {
    completedChallenges = mapFilesToChallengeFiles(
      userData.completedChallenges
    );
    savedChallenges = mapFilesToChallengeFiles(userData.savedChallenges);
  }
  return data.result
    ? { ...userData, completedChallenges, savedChallenges }
    : null;
}
--------------------------------------------------------------------------------


Function 5: LinkMsUser
Language: TypeScript
Lines: 49
Full Code:
--------------------------------------------------------------------------------
function LinkMsUser({
  isSignedIn,
  msUsername,
  linkMsUsername,
  unlinkMsUsername,
  isProcessing,
  setIsProcessing
}: Props): JSX.Element {
  const { t } = useTranslation();
  const [msTranscriptUrl, setMsTranscriptUrl] = useState('');

  function handleLinkUsername(e: React.FormEvent) {
    e.preventDefault();
    setIsProcessing(true);
    linkMsUsername({ msTranscriptUrl });
  }

  function handleInputChange(e: React.ChangeEvent<HTMLInputElement>) {
    e.preventDefault();
    setMsTranscriptUrl(e.target.value);
  }

  const isValid = isMicrosoftTranscriptLink(msTranscriptUrl);
  const isPristine = msTranscriptUrl === '';
  const isDisabled = isProcessing || !isValid;
  const showWarning = !isPristine && !isValid;

  return !isSignedIn ? (
    <>
      <ChallengeHeading heading={t('learn.ms.link-header')} />
      <Spacer size='xs' />

      <p>{t('learn.ms.link-signin')}</p>
      <Login />
    </>
  ) : msUsername ? (
    <>
      <p>{t('learn.ms.linked', { msUsername })}</p>
      <Button
        block={true}
        variant='primary'
        disabled={isProcessing}
        onClick={unlinkMsUsername}
      >
        {t('buttons.unlink-account')}
      </Button>
    </>
  ) : (
    <div>
      <ChallengeHeading heading={'learn.ms.link-header'} />
      <Spacer size='xs' />

      <p>{t('learn.ms.unlinked')}</p>
      <ol className='link-ms-user-ol'>
        <li>
          <Trans i18nKey='learn.ms.link-li-1'>
            <a
              href='https://learn.microsoft.com/users/me/transcript'
              rel='noreferrer'
              target='_blank'
            >
              placeholder
            </a>
          </Trans>
        </li>
        <li>{t('learn.ms.link-li-2')}</li>
        <li>{t('learn.ms.link-li-3')}</li>
        <li>{t('learn.ms.link-li-4')}</li>
        <li>
          <Trans i18nKey='learn.ms.link-li-5'>
            <pre className='language-html'>placeholder</pre>
          </Trans>
        </li>
        <li>{t('learn.ms.link-li-6')}</li>
      </ol>

      <Spacer size='m' />
      <form onSubmit={handleLinkUsername}>
        <FormGroup validationState={isValid ? 'success' : 'error'}>
          <ControlLabel htmlFor='transcript-link'>
            <strong>{t('learn.ms.transcript-label')}</strong>
          </ControlLabel>
          <FormControl
            id='transcript-link'
            type='url'
            onChange={handleInputChange}
            placeholder='https://learn.microsoft.com/en-us/users/username/transcript/transcriptId'
          />
        </FormGroup>
        <Button
          disabled={isDisabled}
          block={true}
          variant='primary'
          onClick={handleLinkUsername}
        >
          {t('buttons.link-account')}
        </Button>
        {showWarning && (
          <HelpBlock>
            <Trans i18nKey='learn.ms.invalid-transcript'>
              placeholder <code>placeholder</code> placeholder
            </Trans>
          </HelpBlock>
        )}
      </form>
    </div>
  );
}
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T21:30:18.773Z
Question Type: multiple-choice
Function: get
Function Size: 380 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: get (TypeScript)\n// Fetches data from a given path and returns the combined response.\n\nasync function get<T>(\n  path: string,\n  signal?: AbortSignal\n): Promise<ResponseWithData<T>> {\n  const response = await fetch(`${base}${path}`, {\n    ...defaultOptions,\n    headers: { 'CSRF-Token': g
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T21:30:22.506Z
Question Type: select-all
Function: get
Function Size: 380 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: get (TypeScript)\n// Fetches data from a given path and returns the combined response.\n\nasync function get<T>(\n  path: string,\n  signal?: AbortSignal\n): Promise<ResponseWithData<T>> {\n  const response = await fetch(`${base}${path}`, {\n    ...defaultOptions,\n    headers: { 'CSRF-Token': g
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T21:30:25.572Z
Question Type: function-variant
Function: combineDataWithResponse
Function Size: 252 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: combineDataWithResponse (TypeScript)\n// Combines the response and parsed JSON data into an object.\n\nasync function combineDataWithResponse<T>(response: Response) {\n  const data = (await response.json()) as T;\n  return { response, data };\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T21:30:32.504Z
Question Type: order-sequence
Function: parseApiResponseToClientUser
Function Size: 639 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: parseApiResponseToClientUser (TypeScript)\n// Parses the API response to construct a User object with challenges.\n\nfunction parseApiResponseToClientUser(data: ApiUserResponse): User | null {\n  const userData = data.user?.[data?.result ?? ''];\n  let completedChallenges: CompletedChallenge
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T21:30:34.662Z
Question Type: select-all
Function: combineDataWithResponse
Function Size: 252 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: combineDataWithResponse (TypeScript)\n// Combines the response and parsed JSON data into an object.\n\nasync function combineDataWithResponse<T>(response: Response) {\n  const data = (await response.json()) as T;\n  return { response, data };\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T21:30:36.447Z
Question Type: true-false
Function: LinkMsUser
Function Size: 3113 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: LinkMsUser (TypeScript)\n// Component for linking a Microsoft username with a transcript URL.\n\nfunction LinkMsUser({\n  isSignedIn,\n  msUsername,\n  linkMsUsername,\n  unlinkMsUsername,\n  isProcessing,\n  setIsProcessing\n}: Props): JSX.Element {\n  const { t } = useTranslation();\n  const [msT
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T21:30:43.403Z
Question Type: true-false
Function: request
Function Size: 546 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: request (TypeScript)\n// Sends a request to the specified path with the given method and body.\n\nasync function request<T>(\n  method: 'POST' | 'PUT' | 'DELETE',\n  path: string,\n  body: unknown\n): Promise<ResponseWithData<T>> {\n  const options: RequestInit = {\n    ...defaultOptions,\n    me
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760390925437
Repository: Unknown
Total Questions Generated: 8
Total Chunks Processed: 5
Ended: 2025-10-13T21:30:43.488Z
================================================================================

