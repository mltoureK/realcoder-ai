=== FUNCTION EXTRACTION & QUESTION GENERATION LOG ===
Session ID: session-1761174989113
Started: 2025-10-22T23:16:29.113Z


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-22T23:16:29.116Z
File: freeCodeCamp-freeCodeCamp-b99f643/client/src/templates/Introduction/components/block.tsx
Functions Extracted: 2


Function 1: mapStateToProps
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
const mapStateToProps = (state: unknown, ownProps: { block: string }) => {
  const expandedSelector = makeExpandedBlockSelector(ownProps.block);

  return createSelector(
    expandedSelector,
    completedChallengesSelector,
    (isExpanded: boolean, completedChallenges: { id: string }[]) => ({
      isExpanded,
      completedChallengeIds: completedChallenges.map(({ id }) => id)
    })
  )(state as Record<string, unknown>);
};
--------------------------------------------------------------------------------


Function 2: handleBlockClick
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
handleBlockClick = (): void => {
    const { block, toggleBlock } = this.props;
    void playTone('block-toggle');
    toggleBlock(block);
};
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-22T23:24:36.267Z
File: [3 files: code-storage-epic.js, be stuck in the 'isSubmitting' state., create superblock structure nodes]
Functions Extracted: 3


Function 1: getLegacyCode
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function getLegacyCode(legacy) {
  const key = legacy + legacyPostfix;
  let code = null;
  const maybeCode = store.get(key);
  if (maybeCode) {
    code = '' + maybeCode;
    store.remove(key);
    return code;
  }
  return legacyPrefixes.reduce((code, prefix) => {
    if (code) {
      return code;
    }
    return store.get(prefix + key);
  }, null);
}
--------------------------------------------------------------------------------


Function 2: legacyToFile
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function legacyToFile(code, challengeFiles, fileKey) {
  if (isFilesAllPoly(challengeFiles)) {
    return {
      ...setContent(
        code,
        challengeFiles.find(x => x.fileKey === fileKey)
      )
    };
  }
  return false;
}
--------------------------------------------------------------------------------


Function 3: createSuperBlockStructureNodes
Language: JavaScript
Lines: 17
Full Code:
--------------------------------------------------------------------------------
function createSuperBlockStructureNodes() {
  Object.keys(superBlockToFilename).forEach(superBlock => {
    const filename = superBlockToFilename[superBlock] || superBlock;
    try {
      const structure = getSuperblockStructure(filename);

      const nodeId = createNodeId(`SuperBlockStructure-${superBlock}`);
      const nodeContent = JSON.stringify(structure);

      createNode({
        ...structure,
        superBlock,
        id: nodeId,
        parent: null,
        children: [],
        internal: {
          type: 'SuperBlockStructure',
          content: nodeContent,
          contentDigest: createContentDigest(structure)
        }
      });
    } catch (err) {
      reporter.warn(
        `Could not load structure for ${superBlock} (${filename}): ${err.message}`
      );
    }
  });
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-22T23:26:06.567Z
File: facebook-react-eb2f784/packages/react-server/src/ReactServerStreamConfigFB.js
Functions Extracted: 3


Function 1: writeChunk
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
export function writeChunk(
  destination: Destination,
  chunk: Chunk | PrecomputedChunk | BinaryChunk,
): void {
  destination.buffer += chunk;
}
--------------------------------------------------------------------------------


Function 2: writeChunkAndReturn
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
export function writeChunkAndReturn(
  destination: Destination,
  chunk: Chunk | PrecomputedChunk | BinaryChunk,
): boolean {
  destination.buffer += chunk;
  return true;
}
--------------------------------------------------------------------------------


Function 3: closeWithError
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
export function closeWithError(destination: Destination, error: mixed): void {
  destination.done = true;
  destination.fatal = true;
  destination.error = error;
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-22T23:26:27.238Z
File: [2 files: Program.ts, Client rendering uses JS value with CR and null character.]
Functions Extracted: 5


Function 1: tryFindDirectiveEnablingMemoization
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export function tryFindDirectiveEnablingMemoization(
  directives: Array<t.Directive>,
  opts: ParsedPluginOptions,
): Result<t.Directive | null, CompilerError> {
  const optIn = directives.find(directive =>
    OPT_IN_DIRECTIVES.has(directive.value.value),
  );
  if (optIn != null) {
    return Ok(optIn);
  }
  const dynamicGating = findDirectivesDynamicGating(directives, opts);
  if (dynamicGating.isOk()) {
    return Ok(dynamicGating.unwrap()?.directive ?? null);
  } else {
    return Err(dynamicGating.unwrapErr());
  }
}
--------------------------------------------------------------------------------


Function 2: findDirectiveDisablingMemoization
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export function findDirectiveDisablingMemoization(
  directives: Array<t.Directive>,
  {customOptOutDirectives}: PluginOptions,
): t.Directive | null {
  if (customOptOutDirectives != null) {
    return (
      directives.find(
        directive =>
          customOptOutDirectives.indexOf(directive.value.value) !== -1,
      ) ?? null
    );
  }
  return (
    directives.find(directive =>
      OPT_OUT_DIRECTIVES.has(directive.value.value),
    ) ?? null
  );
}
--------------------------------------------------------------------------------


Function 3: findDirectivesDynamicGating
Language: TypeScript
Lines: 37
Full Code:
--------------------------------------------------------------------------------
function findDirectivesDynamicGating(
  directives: Array<t.Directive>,
  opts: ParsedPluginOptions,
): Result<
  {
    gating: ExternalFunction;
    directive: t.Directive;
  } | null,
  CompilerError
> {
  if (opts.dynamicGating === null) {
    return Ok(null);
  }
  const errors = new CompilerError();
  const result: Array<{directive: t.Directive; match: string}> = [];

  for (const directive of directives) {
    const maybeMatch = DYNAMIC_GATING_DIRECTIVE.exec(directive.value.value);
    if (maybeMatch != null && maybeMatch[1] != null) {
      if (t.isValidIdentifier(maybeMatch[1])) {
        result.push({directive, match: maybeMatch[1]});
      } else {
        errors.push({
          reason: `Dynamic gating directive is not a valid JavaScript identifier`,
          description: `Found '${directive.value.value}'`,
          category: ErrorCategory.Gating,
          loc: directive.loc ?? null,
          suggestions: null,
        });
      }
    }
  }
  if (errors.hasAnyErrors()) {
    return Err(errors);
  } else if (result.length > 1) {
    const error = new CompilerError();
    error.push({
      reason: `Multiple dynamic gating directives found`,
      description: `Expected a single directive but found [${result
        .map(r => r.directive.value.value)
        .join(', ')}]`,
      category: ErrorCategory.Gating,
      loc: result[0].directive.loc ?? null,
      suggestions: null,
    });
    return Err(error);
  } else if (result.length === 1) {
    return Ok({
      gating: {
        source: opts.dynamicGating.source,
        importSpecifierName: result[0].match,
      },
      directive: result[0].directive,
    });
  } else {
    return Ok(null);
  }
}
--------------------------------------------------------------------------------


Function 4: logError
Language: TypeScript
Lines: 22
Full Code:
--------------------------------------------------------------------------------
function logError(
  err: unknown,
  context: {
    opts: PluginOptions;
    filename: string | null;
  },
  fnLoc: t.SourceLocation | null,
): void {
  if (context.opts.logger) {
    if (err instanceof CompilerError) {
      for (const detail of err.details) {
        context.opts.logger.logEvent(context.filename, {
          kind: 'CompileError',
          fnLoc,
          detail,
        });
      }
    } else {
      let stringifiedError;
      if (err instanceof Error) {
        stringifiedError = err.stack ?? err.message;
      } else {
        stringifiedError = err?.toString() ?? '[ null ]';
      }

      context.opts.logger.logEvent(context.filename, {
        kind: 'PipelineError',
        fnLoc,
        data: stringifiedError,
      });
    }
  }
}
--------------------------------------------------------------------------------


Function 5: handleError
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function handleError(
  err: unknown,
  context: {
    opts: PluginOptions;
    filename: string | null;
  },
  fnLoc: t.SourceLocation | null,
): void {
  logError(err, context, fnLoc);
  if (
    context.opts.panicThreshold === 'all_errors' ||
    (context.opts.panicThreshold === 'critical_errors' && isError(err)) ||
    isConfigError(err)
  ) {
    // handle panic
  }
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-22T23:31:39.384Z
File: motiondivision-motion-b5df740/packages/motion-dom/src/gestures/hover.ts
Functions Extracted: 1


Function 1: hover
Language: TypeScript
Lines: 27
Full Code:
--------------------------------------------------------------------------------
export function hover(
    elementOrSelector: ElementOrSelector,
    onHoverStart: OnHoverStartEvent,
    options: EventOptions = {}
): VoidFunction {
    const [elements, eventOptions, cancel] = setupGesture(
        elementOrSelector,
        options
    )

    const onPointerEnter = (enterEvent: PointerEvent) => {
        if (!isValidHover(enterEvent)) return

        const { target } = enterEvent
        const onHoverEnd = onHoverStart(target as Element, enterEvent)

        if (typeof onHoverEnd !== "function" || !target) return

        const onPointerLeave = (leaveEvent: PointerEvent) => {
            if (!isValidHover(leaveEvent)) return

            onHoverEnd(leaveEvent)
            target.removeEventListener(
                "pointerleave",
                onPointerLeave as EventListener
            )
        }

        target.addEventListener(
            "pointerleave",
            onPointerLeave as EventListener,
            eventOptions
        )
    }

    elements.forEach((element) => {
        element.addEventListener(
            "pointerenter",
            onPointerEnter as EventListener,
            eventOptions
        )
    })

    return cancel
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-22T23:31:46.113Z
File: [2 files: use-transform.ts, subject.ts]
Functions Extracted: 2


Function 1: useTransform
Language: TypeScript
Lines: 25
Full Code:
--------------------------------------------------------------------------------
export function useTransform<I, O>(
    input:
        | MotionValue<I>
        | MotionValue<string>[]
        | MotionValue<number>[]
        | MotionValue<AnyResolvedKeyframe>[]
        | (() => O),
    inputRangeOrTransformer?: InputRange | Transformer<I, O>,
    outputRange?: O[],
    options?: TransformOptions<O>
): MotionValue<O> {
    if (typeof input === "function") {
        return useComputed(input)
    }

    const transformer =
        typeof inputRangeOrTransformer === "function"
            ? inputRangeOrTransformer
            : transform(inputRangeOrTransformer!, outputRange!, options)

    return Array.isArray(input)
        ? useListTransform(
              input,
              transformer as MultiTransformer<AnyResolvedKeyframe, O>
          )
        : useListTransform([input], ([latest]) =>
              (transformer as SingleTransformer<I, O>)(latest)
          )
}
--------------------------------------------------------------------------------


Function 2: animateSubject
Language: TypeScript
Lines: 50
Full Code:
--------------------------------------------------------------------------------
export function animateSubject<O extends Object>(
    subject:
        | MotionValue<number>
        | MotionValue<string>
        | number
        | string
        | ElementOrSelector
        | O
        | O[],
    keyframes:
        | number
        | string
        | UnresolvedValueKeyframe<number>[]
        | UnresolvedValueKeyframe<string>[]
        | DOMKeyframesDefinition
        | ObjectTarget<O>,
    options?:
        | ValueAnimationTransition<number>
        | ValueAnimationTransition<string>
        | DynamicAnimationOptions,
    scope?: AnimationScope
): AnimationPlaybackControlsWithThen[] {
    const animations: AnimationPlaybackControlsWithThen[] = []

    if (isSingleValue(subject, keyframes)) {
        animations.push(
            animateSingleValue(
                subject,
                isDOMKeyframes(keyframes)
                    ? (keyframes as any).default || keyframes
                    : keyframes,
                options ? (options as any).default || options : options
            )
        )
    } else {
        const subjects = resolveSubjects(
            subject,
            keyframes as DOMKeyframesDefinition,
            scope
        )

        const numSubjects = subjects.length

        invariant(
            Boolean(numSubjects),
            "No valid elements provided.",
            "no-valid-elements"
        )

        for (let i = 0; i < numSubjects; i++) {
            const thisSubject = subjects[i]

            invariant(
                thisSubject !== null,
                "You're trying to perform an animation on null. Ensure that selectors are correctly finding elements and refs are correctly hydrated.",
                "animate-null"
            )

            const createVisualElement =
                thisSubject instanceof Element
                    ? createDOMVisualElement
                    : createObjectVisualElement

            if (!visualElementStore.has(thisSubject)) {
                createVisualElement(thisSubject as any)
            }

            const visualElement = visualElementStore.get(thisSubject)!
            const transition = { ...options }

            if (
                "delay" in transition &&
                typeof transition.delay === "function"
            ) {
                transition.delay = transition.delay(i, numSubjects)
            }

            animations.push(
                ...animateTarget(
                    visualElement,
                    { ...(keyframes as {}), transition } as TargetAndTransition,
                    {}
                )
            )
        }
    }

    return animations
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-22T23:31:57.913Z
File: [2 files: animations for instance if layout="size" and an element has only changed position, delta-calc.ts]
Functions Extracted: 5


Function 1: calcBoxDelta
Language: TypeScript
Lines: 9
Full Code:
--------------------------------------------------------------------------------
export function calcBoxDelta(
    delta: Delta,
    source: Box,
    target: Box,
    origin?: ResolvedValues
): void {
    calcAxisDelta(
        delta.x,
        source.x,
        target.x,
        origin ? (origin.originX as number) : undefined
    )
    calcAxisDelta(
        delta.y,
        source.y,
        target.y,
        origin ? (origin.originY as number) : undefined
    )
}
--------------------------------------------------------------------------------


Function 2: calcAxisDelta
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export function calcAxisDelta(
    delta: AxisDelta,
    source: Axis,
    target: Axis,
    origin: number = 0.5
) {
    delta.origin = origin
    delta.originPoint = mixNumber(source.min, source.max, delta.origin)
    delta.scale = calcLength(target) / calcLength(source)
    delta.translate =
        mixNumber(target.min, target.max, delta.origin) - delta.originPoint

    if (
        (delta.scale >= SCALE_MIN && delta.scale <= SCALE_MAX) ||
        isNaN(delta.scale)
    ) {
        delta.scale = 1.0
    }

    if (
        (delta.translate >= TRANSLATE_MIN &&
            delta.translate <= TRANSLATE_MAX) ||
        isNaN(delta.translate)
    ) {
        delta.translate = 0.0
    }
}
--------------------------------------------------------------------------------


Function 3: mixBox
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
export function mixBox(output: Box, from: Box, to: Box, p: number) {
    mixAxis(output.x, from.x, to.x, p)
    mixAxis(output.y, from.y, to.y, p)
}
--------------------------------------------------------------------------------


Function 4: propagateDirtyNodes
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
export function propagateDirtyNodes(node: IProjectionNode) {
    if (statsBuffer.value) {
        metrics.nodes++
    }

    if (!node.parent) return

    if (!node.isProjecting()) {
        node.isProjectionDirty = node.parent.isProjectionDirty
    }

    node.isSharedProjectionDirty ||= Boolean(
        node.isProjectionDirty ||
            node.parent.isProjectionDirty ||
            node.parent.isSharedProjectionDirty
    )

    node.isTransformDirty ||= node.parent.isTransformDirty
}
--------------------------------------------------------------------------------


Function 5: mixAxisDelta
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
export function mixAxisDelta(output: AxisDelta, delta: AxisDelta, p: number) {
    output.translate = mixNumber(delta.translate, 0, p)
    output.scale = mixNumber(delta.scale, 1, p)
    output.origin = delta.origin
    output.originPoint = delta.originPoint
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-22T23:32:00.412Z
File: motiondivision-motion-b5df740/packages/framer-motion/src/animation/animate/index.ts
Functions Extracted: 1


Function 1: createScopedAnimate
Language: TypeScript
Lines: 43
Full Code:
--------------------------------------------------------------------------------
export function createScopedAnimate(scope?: AnimationScope) {
    function scopedAnimate(
        sequence: AnimationSequence,
        options?: SequenceOptions
    ): AnimationPlaybackControlsWithThen
    function scopedAnimate(
        value: string | MotionValue<string>,
        keyframes: string | UnresolvedValueKeyframe<string>[],
        options?: ValueAnimationTransition<string>
    ): AnimationPlaybackControlsWithThen
    function scopedAnimate(
        value: number | MotionValue<number>,
        keyframes: number | UnresolvedValueKeyframe<number>[],
        options?: ValueAnimationTransition<number>
    ): AnimationPlaybackControlsWithThen
    function scopedAnimate<V extends string | number>(
        value: V | MotionValue<V>,
        keyframes: V | UnresolvedValueKeyframe<V>[],
        options?: ValueAnimationTransition<V>
    ): AnimationPlaybackControlsWithThen
    function scopedAnimate(
        element: ElementOrSelector,
        keyframes: DOMKeyframesDefinition,
        options?: DynamicAnimationOptions
    ): AnimationPlaybackControlsWithThen
    function scopedAnimate<O extends {}>(
        object: O | O[],
        keyframes: ObjectTarget<O>,
        options?: DynamicAnimationOptions
    ): AnimationPlaybackControlsWithThen
    function scopedAnimate<O extends {}>(
        subjectOrSequence:
            | AnimationSequence
            | MotionValue<number>
            | MotionValue<string>
            | number
            | string
            | ElementOrSelector
            | O
            | O[],
        optionsOrKeyframes?:
            | SequenceOptions
            | number
            | string
            | UnresolvedValueKeyframe<number>[]
            | UnresolvedValueKeyframe<string>[]
            | DOMKeyframesDefinition
            | ObjectTarget<O>,
        options?:
            | ValueAnimationTransition<number>
            | ValueAnimationTransition<string>
            | DynamicAnimationOptions
    ): AnimationPlaybackControlsWithThen {
        let animations: AnimationPlaybackControlsWithThen[] = []
        let animationOnComplete: VoidFunction | undefined

        if (isSequence(subjectOrSequence)) {
            animations = animateSequence(
                subjectOrSequence,
                optionsOrKeyframes as SequenceOptions,
                scope
            )
        } else {
            // Implementation details
        }
    }
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-22T23:34:40.992Z
File: [3 files: Canvas.,  iPad OS., src-loader.test.js]
Functions Extracted: 3


Function 1: doSourceLoad
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function doSourceLoad (resolve, reject) {
  utils.srcLoader.validateSrc(src, loadImageCb, loadVideoCb);
  function loadImageCb (src) { self.loadImage(src, resolve); }
  function loadVideoCb (src) { self.loadVideo(src, resolve); }
}
--------------------------------------------------------------------------------


Function 2: loadCubeMapTexture
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
loadCubeMapTexture: function (srcs, cb) {
  var self = this;
  var loaded = 0;
  var cube = new THREE.CubeTexture();
  cube.colorSpace = THREE.SRGBColorSpace;

  function loadSide (index) {
    self.loadTextureSource(srcs[index], function (source) {
      cube.images[index] = source.data;
      loaded++;
      if (loaded === 6) {
        cube.needsUpdate = true;
        cb(cube);
      }
    });
  }

  if (srcs.length !== 6) {
    warn('Cube map texture requires exactly 6 sources, got only %s sources', srcs.length);
    return;
  }

  for (var i = 0; i < srcs.length; i++) {
    loadSide(i);
  }
}
--------------------------------------------------------------------------------


Function 3: isLandscape
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
export function isLandscape () {
  var orientation = window.orientation;
  if (isR7()) { orientation += 90; }
  return orientation === 90 || orientation === -90;
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-23T02:46:27.720Z
File: aframevr-aframe-7ac5af3/src/core/a-node.js
Functions Extracted: 1


Function 1: ANode
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
export class ANode extends HTMLElement {
  constructor () {
    super();
    this.computedMixinStr = '';
    this.hasLoaded = false;
    this.isANode = true;
    this.mixinEls = [];
  }
}
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T02:47:24.100Z
Question Type: true-false
Function: Unknown
Function Size: 41 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // File: The bloom intensity.\nwidth={300}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T02:47:29.054Z
Question Type: select-all
Function: Unknown
Function Size: 41 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // File: The bloom intensity.\nwidth={300}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T02:47:31.874Z
Question Type: order-sequence
Function: Unknown
Function Size: 666 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // File: n1k02-three-js-projects-279065e/car-show-react-three/src/App.js\nimport React, {Suspense, useEffect} from 'react';\nimport './style.css'\nimport {Canvas} from "@react-three/fiber";\nimport {CubeCamera, Environment, OrbitControls, PerspectiveCamera, spotLight} from "@react-three/drei";\nimport Gr
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T02:47:34.180Z
Question Type: function-variant
Function: Unknown
Function Size: 1888 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // File: Функция, которая запускает полноэкранный режим\nfunction enterFullscreen() {\n    if (element.requestFullscreen) {\n        element.requestFullscreen();\n    } else if (element.mozRequestFullScreen) {\n        element.mozRequestFullScreen();\n    } else if (element.webkitRequestFullscreen) {\n    
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T02:47:36.008Z
Question Type: select-all
Function: Unknown
Function Size: 2080 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // File: window.addEventListener('touchstart', eventHandler)\nresultsElement.addEventListener('click', (event)=> {\n    event.preventDefault()\n    startGame()\n})\nwindow.addEventListener('keydown', (event) => {\n    if (event.key == ' ') {\n        event.preventDefault()\n        eventHandler()\n        re
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T02:47:38.031Z
Question Type: true-false
Function: Unknown
Function Size: 2090 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // File: n1k02-three-js-projects-279065e/mini-games/stack-game/main.js\nimport * as THREE from 'three'\nimport * as CANNON from 'cannon-es'\nimport animation from "three/addons/renderers/common/Animation.js";\n\nwindow.focus()\n\nlet camera, scene, renderer\nlet world\nlet lastTime\nlet stack\nlet overhangs\nco
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T02:47:38.660Z
Question Type: function-variant
Function: Unknown
Function Size: 2090 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // File: n1k02-three-js-projects-279065e/mini-games/stack-game/main.js\nimport * as THREE from 'three'\nimport * as CANNON from 'cannon-es'\nimport animation from "three/addons/renderers/common/Animation.js";\n\nwindow.focus()\n\nlet camera, scene, renderer\nlet world\nlet lastTime\nlet stack\nlet overhangs\nco
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T02:47:41.584Z
Question Type: order-sequence
Function: Unknown
Function Size: 2080 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // File: window.addEventListener('touchstart', eventHandler)\nresultsElement.addEventListener('click', (event)=> {\n    event.preventDefault()\n    startGame()\n})\nwindow.addEventListener('keydown', (event) => {\n    if (event.key == ' ') {\n        event.preventDefault()\n        eventHandler()\n        re
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T02:47:44.453Z
Question Type: select-all
Function: Unknown
Function Size: 666 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // File: n1k02-three-js-projects-279065e/car-show-react-three/src/App.js\nimport React, {Suspense, useEffect} from 'react';\nimport './style.css'\nimport {Canvas} from "@react-three/fiber";\nimport {CubeCamera, Environment, OrbitControls, PerspectiveCamera, spotLight} from "@react-three/drei";\nimport Gr
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T02:47:44.590Z
Question Type: multiple-choice
Function: Unknown
Function Size: 1888 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // File: Функция, которая запускает полноэкранный режим\nfunction enterFullscreen() {\n    if (element.requestFullscreen) {\n        element.requestFullscreen();\n    } else if (element.mozRequestFullScreen) {\n        element.mozRequestFullScreen();\n    } else if (element.webkitRequestFullscreen) {\n    
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T02:47:48.522Z
Question Type: order-sequence
Function: Unknown
Function Size: 41 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // File: The bloom intensity.\nwidth={300}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T02:47:52.511Z
Question Type: select-all
Function: Unknown
Function Size: 1888 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // File: Функция, которая запускает полноэкранный режим\nfunction enterFullscreen() {\n    if (element.requestFullscreen) {\n        element.requestFullscreen();\n    } else if (element.mozRequestFullScreen) {\n        element.mozRequestFullScreen();\n    } else if (element.webkitRequestFullscreen) {\n    
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T02:47:54.602Z
Question Type: function-variant
Function: Unknown
Function Size: 666 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // File: n1k02-three-js-projects-279065e/car-show-react-three/src/App.js\nimport React, {Suspense, useEffect} from 'react';\nimport './style.css'\nimport {Canvas} from "@react-three/fiber";\nimport {CubeCamera, Environment, OrbitControls, PerspectiveCamera, spotLight} from "@react-three/drei";\nimport Gr
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T02:47:57.096Z
Question Type: order-sequence
Function: Unknown
Function Size: 2090 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // File: n1k02-three-js-projects-279065e/mini-games/stack-game/main.js\nimport * as THREE from 'three'\nimport * as CANNON from 'cannon-es'\nimport animation from "three/addons/renderers/common/Animation.js";\n\nwindow.focus()\n\nlet camera, scene, renderer\nlet world\nlet lastTime\nlet stack\nlet overhangs\nco
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T02:48:08.949Z
Question Type: function-variant
Function: Unknown
Function Size: 2080 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // File: window.addEventListener('touchstart', eventHandler)\nresultsElement.addEventListener('click', (event)=> {\n    event.preventDefault()\n    startGame()\n})\nwindow.addEventListener('keydown', (event) => {\n    if (event.key == ' ') {\n        event.preventDefault()\n        eventHandler()\n        re
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1761174989113
Repository: Unknown
Total Questions Generated: 11
Total Chunks Processed: 5
Ended: 2025-10-23T02:48:08.951Z
================================================================================


--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:31:10.477Z
Question Type: multiple-choice
Function: Unknown
Function Size: 1629 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // File: freeCodeCamp-freeCodeCamp-02e1e1c/client/src/components/profile/components/time-line.tsx\nimport Loadable from '@loadable/component';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport { reverse, sortBy } from 'lodash-es';\nimport React, { useMemo, useState } from 'react';\nimport type {
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:31:14.861Z
Question Type: select-all
Function: Unknown
Function Size: 58 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // File: @ts-expect-error Graphql needs typing\nsuperBlock,
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:31:16.145Z
Question Type: function-variant
Function: Unknown
Function Size: 1629 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // File: freeCodeCamp-freeCodeCamp-02e1e1c/client/src/components/profile/components/time-line.tsx\nimport Loadable from '@loadable/component';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport { reverse, sortBy } from 'lodash-es';\nimport React, { useMemo, useState } from 'react';\nimport type {
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:31:20.028Z
Question Type: order-sequence
Function: Unknown
Function Size: 50 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // File: @ts-expect-error Graphql needs typing\nid,
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:31:21.666Z
Question Type: select-all
Function: Unknown
Function Size: 2094 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // File: // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\nchallengeFiles:\n          completedChallenge?.challengeFiles?.map(\n            regenerateMissingProperties\n          ) ?? null\n      }\n    : null;\n\n  const id = challengeData?.id;\n  const startIndex = (pageNo - 1) * ITEMS_PER
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:31:22.994Z
Question Type: true-false
Function: Unknown
Function Size: 50 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // File: @ts-expect-error Graphql needs typing\nid,
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:31:23.935Z
Question Type: order-sequence
Function: Unknown
Function Size: 2056 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // File: Items per page in timeline.\nconst ITEMS_PER_PAGE = 15;\n\ninterface TimelineProps {\n  completedMap: CompletedChallenge[];\n  openModal: (arg: string) => void;\n  t: TFunction;\n  username: string;\n}\n\ninterface TimelineInnerProps extends TimelineProps {\n  idToNameMap: Map<string, NameMap>;\n  sort
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:31:30.685Z
Question Type: function-variant
Function: Unknown
Function Size: 2056 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // File: Items per page in timeline.\nconst ITEMS_PER_PAGE = 15;\n\ninterface TimelineProps {\n  completedMap: CompletedChallenge[];\n  openModal: (arg: string) => void;\n  t: TFunction;\n  username: string;\n}\n\ninterface TimelineInnerProps extends TimelineProps {\n  idToNameMap: Map<string, NameMap>;\n  sort
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:31:30.875Z
Question Type: function-variant
Function: Unknown
Function Size: 2094 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // File: // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\nchallengeFiles:\n          completedChallenge?.challengeFiles?.map(\n            regenerateMissingProperties\n          ) ?? null\n      }\n    : null;\n\n  const id = challengeData?.id;\n  const startIndex = (pageNo - 1) * ITEMS_PER
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:31:32.947Z
Question Type: function-variant
Function: Unknown
Function Size: 2056 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // File: Items per page in timeline.\nconst ITEMS_PER_PAGE = 15;\n\ninterface TimelineProps {\n  completedMap: CompletedChallenge[];\n  openModal: (arg: string) => void;\n  t: TFunction;\n  username: string;\n}\n\ninterface TimelineInnerProps extends TimelineProps {\n  idToNameMap: Map<string, NameMap>;\n  sort
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:31:35.505Z
Question Type: order-sequence
Function: Unknown
Function Size: 2094 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // File: // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\nchallengeFiles:\n          completedChallenge?.challengeFiles?.map(\n            regenerateMissingProperties\n          ) ?? null\n      }\n    : null;\n\n  const id = challengeData?.id;\n  const startIndex = (pageNo - 1) * ITEMS_PER
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:31:38.231Z
Question Type: select-all
Function: Unknown
Function Size: 1629 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // File: freeCodeCamp-freeCodeCamp-02e1e1c/client/src/components/profile/components/time-line.tsx\nimport Loadable from '@loadable/component';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport { reverse, sortBy } from 'lodash-es';\nimport React, { useMemo, useState } from 'react';\nimport type {
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:31:38.256Z
Question Type: select-all
Function: Unknown
Function Size: 50 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // File: @ts-expect-error Graphql needs typing\nid,
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:31:40.956Z
Question Type: true-false
Function: Unknown
Function Size: 58 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // File: @ts-expect-error Graphql needs typing\nsuperBlock,
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:31:43.192Z
Question Type: order-sequence
Function: Unknown
Function Size: 58 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // File: @ts-expect-error Graphql needs typing\nsuperBlock,
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1761174989113
Repository: Unknown
Total Questions Generated: 12
Total Chunks Processed: 5
Ended: 2025-10-23T21:31:43.194Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-23T21:57:28.121Z
File: not being used to render anything
Functions Extracted: 1


Function 1: courseCompletionStatus
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
const courseCompletionStatus = () => {
  if (completedCount === 0) {
    return t('learn.not-started');
  }
  if (isBlockCompleted) {
    return t('learn.completed');
  }
  return `${percentageCompleted}% ${t('learn.completed')}`;
};
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-23T21:57:29.292Z
File: freeCodeCamp-freeCodeCamp-02e1e1c/client/src/templates/Challenges/utils/awaitable-messenger.ts
Functions Extracted: 1


Function 1: awaitResponse
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export function awaitResponse<
  MessageOut,
  MessageIn extends { type: string; value: Value; error: string },
  Value
>({
  messenger,
  message,
  onMessage
}: {
  messenger: Messenger<MessageOut>;
  message: MessageOut;
  onMessage: (
    response: MessageIn,
    onSuccess: (res: Value) => void,
    onFailure: (err: Error) => void
  ) => void;
}): Promise<Value> {
  return new Promise(
    (resolve: (res: Value) => void, reject: (err: Error) => void) => {
      const channel = new MessageChannel();
      // Additional logic to handle message sending and response handling
    }
  );
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-23T21:57:37.073Z
File: freeCodeCamp-freeCodeCamp-02e1e1c/client/src/templates/Challenges/exam-download/show.tsx
Functions Extracted: 2


Function 1: handleDownloadLink
Language: TypeScript
Lines: 34
Full Code:
--------------------------------------------------------------------------------
function handleDownloadLink(downloadLinks: string[]) {
    const win = downloadLinks.find(link => link.match(/\.exe/));
    const macARM = downloadLinks.find(
      link => link.match(/aarch64/) && link.match(/\.dmg/)
    );
    const macX64 = downloadLinks.find(
      link => link.match(/x64/) && link.match(/\.dmg/)
    );
    const linuxARM = downloadLinks.find(
      link => link.match(/aarch64/) && link.match(/tar\.gz/)
    );
    const linuxX64 = downloadLinks.find(
      link => link.match(/amd64/) && link.match(/AppImage/)
    );

    if (os.os === 'WIN') {
      if (isEmpty(win)) return '';

      return win;
    }

    if (os.os === 'MAC') {
      if (os.architecture.toLowerCase() === 'arm') {
        if (isEmpty(macARM)) return '';

        return macARM;
      } else {
        if (isEmpty(macX64)) return '';

        return macX64;
      }
    }

    if (os.os === 'LINUX') {
      if (os.architecture.toLowerCase() === 'arm') {
        if (isEmpty(linuxARM)) return '';

        return linuxARM;
      } else {
        if (isEmpty(linuxX64)) return '';

        return linuxX64;
      }
    }

    return '';
  }
--------------------------------------------------------------------------------


Function 2: checkLatestVersion
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
async function checkLatestVersion() {
      try {
        const response = await fetch(
          'https://api.github.com/repos/freeCodeCamp/exam-env/releases/latest'
        );
        if (response.ok) {
          const data = (await response.json()) as GitProps;
          const { tag_name, assets } = data;
          setLatestVersion(tag_name);
          const urls = assets.map(link => link.browser_download_url);
          setDownloadLink(handleDownloadLink(urls));
          setDownloadLinks(urls);
        }
      } catch {
        setLatestVersion('...');
      }
    }
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:57:49.039Z
Question Type: select-all
Function: handleDownloadLink
Function Size: 1281 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: handleDownloadLink (TypeScript)\n// Determines the appropriate download link based on the user's operating system and architecture.\n\nfunction handleDownloadLink(downloadLinks: string[]) {\n    const win = downloadLinks.find(link => link.match(/\.exe/));\n    const macARM = downloadLinks.fi
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:57:49.611Z
Question Type: order-sequence
Function: handleDownloadLink
Function Size: 1281 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: handleDownloadLink (TypeScript)\n// Determines the appropriate download link based on the user's operating system and architecture.\n\nfunction handleDownloadLink(downloadLinks: string[]) {\n    const win = downloadLinks.find(link => link.match(/\.exe/));\n    const macARM = downloadLinks.fi
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:57:49.656Z
Question Type: order-sequence
Function: checkLatestVersion
Function Size: 748 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: checkLatestVersion (TypeScript)\n// Fetches the latest version of the exam environment from GitHub and updates the state with the version and download links.\n\nasync function checkLatestVersion() {\n      try {\n        const response = await fetch(\n          'https://api.github.com/repos/f
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:57:53.470Z
Question Type: true-false
Function: checkLatestVersion
Function Size: 748 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: checkLatestVersion (TypeScript)\n// Fetches the latest version of the exam environment from GitHub and updates the state with the version and download links.\n\nasync function checkLatestVersion() {\n      try {\n        const response = await fetch(\n          'https://api.github.com/repos/f
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:57:55.819Z
Question Type: select-all
Function: checkLatestVersion
Function Size: 748 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: checkLatestVersion (TypeScript)\n// Fetches the latest version of the exam environment from GitHub and updates the state with the version and download links.\n\nasync function checkLatestVersion() {\n      try {\n        const response = await fetch(\n          'https://api.github.com/repos/f
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:58:01.963Z
Question Type: select-all
Function: handleDownloadLink
Function Size: 1281 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: handleDownloadLink (TypeScript)\n// Determines the appropriate download link based on the user's operating system and architecture.\n\nfunction handleDownloadLink(downloadLinks: string[]) {\n    const win = downloadLinks.find(link => link.match(/\.exe/));\n    const macARM = downloadLinks.fi
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:58:07.177Z
Question Type: function-variant
Function: handleDownloadLink
Function Size: 1281 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: handleDownloadLink (TypeScript)\n// Determines the appropriate download link based on the user's operating system and architecture.\n\nfunction handleDownloadLink(downloadLinks: string[]) {\n    const win = downloadLinks.find(link => link.match(/\.exe/));\n    const macARM = downloadLinks.fi
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:58:14.486Z
Question Type: order-sequence
Function: checkLatestVersion
Function Size: 748 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: checkLatestVersion (TypeScript)\n// Fetches the latest version of the exam environment from GitHub and updates the state with the version and download links.\n\nasync function checkLatestVersion() {\n      try {\n        const response = await fetch(\n          'https://api.github.com/repos/f
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:58:17.837Z
Question Type: function-variant
Function: checkLatestVersion
Function Size: 748 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: checkLatestVersion (TypeScript)\n// Fetches the latest version of the exam environment from GitHub and updates the state with the version and download links.\n\nasync function checkLatestVersion() {\n      try {\n        const response = await fetch(\n          'https://api.github.com/repos/f
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1761174989113
Repository: Unknown
Total Questions Generated: 5
Total Chunks Processed: 2
Ended: 2025-10-23T21:58:17.929Z
================================================================================


--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:58:22.841Z
Question Type: multiple-choice
Function: handleDownloadLink
Function Size: 1281 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: handleDownloadLink (TypeScript)\n// Determines the appropriate download link based on the user's operating system and architecture.\n\nfunction handleDownloadLink(downloadLinks: string[]) {\n    const win = downloadLinks.find(link => link.match(/\.exe/));\n    const macARM = downloadLinks.fi
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:58:29.334Z
Question Type: true-false
Function: handleDownloadLink
Function Size: 1281 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: handleDownloadLink (TypeScript)\n// Determines the appropriate download link based on the user's operating system and architecture.\n\nfunction handleDownloadLink(downloadLinks: string[]) {\n    const win = downloadLinks.find(link => link.match(/\.exe/));\n    const macARM = downloadLinks.fi
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:58:30.437Z
Question Type: order-sequence
Function: checkLatestVersion
Function Size: 748 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: checkLatestVersion (TypeScript)\n// Fetches the latest version of the exam environment from GitHub and updates the state with the version and download links.\n\nasync function checkLatestVersion() {\n      try {\n        const response = await fetch(\n          'https://api.github.com/repos/f
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:58:30.473Z
Question Type: order-sequence
Function: handleDownloadLink
Function Size: 1281 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: handleDownloadLink (TypeScript)\n// Determines the appropriate download link based on the user's operating system and architecture.\n\nfunction handleDownloadLink(downloadLinks: string[]) {\n    const win = downloadLinks.find(link => link.match(/\.exe/));\n    const macARM = downloadLinks.fi
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:58:38.819Z
Question Type: select-all
Function: checkLatestVersion
Function Size: 748 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: checkLatestVersion (TypeScript)\n// Fetches the latest version of the exam environment from GitHub and updates the state with the version and download links.\n\nasync function checkLatestVersion() {\n      try {\n        const response = await fetch(\n          'https://api.github.com/repos/f
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:58:40.462Z
Question Type: select-all
Function: handleDownloadLink
Function Size: 1281 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: handleDownloadLink (TypeScript)\n// Determines the appropriate download link based on the user's operating system and architecture.\n\nfunction handleDownloadLink(downloadLinks: string[]) {\n    const win = downloadLinks.find(link => link.match(/\.exe/));\n    const macARM = downloadLinks.fi
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:58:44.223Z
Question Type: function-variant
Function: checkLatestVersion
Function Size: 748 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: checkLatestVersion (TypeScript)\n// Fetches the latest version of the exam environment from GitHub and updates the state with the version and download links.\n\nasync function checkLatestVersion() {\n      try {\n        const response = await fetch(\n          'https://api.github.com/repos/f
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:58:52.967Z
Question Type: order-sequence
Function: handleDownloadLink
Function Size: 1281 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: handleDownloadLink (TypeScript)\n// Determines the appropriate download link based on the user's operating system and architecture.\n\nfunction handleDownloadLink(downloadLinks: string[]) {\n    const win = downloadLinks.find(link => link.match(/\.exe/));\n    const macARM = downloadLinks.fi
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:58:56.735Z
Question Type: order-sequence
Function: checkLatestVersion
Function Size: 748 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: checkLatestVersion (TypeScript)\n// Fetches the latest version of the exam environment from GitHub and updates the state with the version and download links.\n\nasync function checkLatestVersion() {\n      try {\n        const response = await fetch(\n          'https://api.github.com/repos/f
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:58:57.081Z
Question Type: function-variant
Function: checkLatestVersion
Function Size: 748 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: checkLatestVersion (TypeScript)\n// Fetches the latest version of the exam environment from GitHub and updates the state with the version and download links.\n\nasync function checkLatestVersion() {\n      try {\n        const response = await fetch(\n          'https://api.github.com/repos/f
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:58:58.913Z
Question Type: true-false
Function: checkLatestVersion
Function Size: 748 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: checkLatestVersion (TypeScript)\n// Fetches the latest version of the exam environment from GitHub and updates the state with the version and download links.\n\nasync function checkLatestVersion() {\n      try {\n        const response = await fetch(\n          'https://api.github.com/repos/f
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:59:06.453Z
Question Type: select-all
Function: checkLatestVersion
Function Size: 748 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: checkLatestVersion (TypeScript)\n// Fetches the latest version of the exam environment from GitHub and updates the state with the version and download links.\n\nasync function checkLatestVersion() {\n      try {\n        const response = await fetch(\n          'https://api.github.com/repos/f
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:59:08.907Z
Question Type: function-variant
Function: handleDownloadLink
Function Size: 1281 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: handleDownloadLink (TypeScript)\n// Determines the appropriate download link based on the user's operating system and architecture.\n\nfunction handleDownloadLink(downloadLinks: string[]) {\n    const win = downloadLinks.find(link => link.match(/\.exe/));\n    const macARM = downloadLinks.fi
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:59:12.336Z
Question Type: select-all
Function: handleDownloadLink
Function Size: 1281 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: handleDownloadLink (TypeScript)\n// Determines the appropriate download link based on the user's operating system and architecture.\n\nfunction handleDownloadLink(downloadLinks: string[]) {\n    const win = downloadLinks.find(link => link.match(/\.exe/));\n    const macARM = downloadLinks.fi
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T21:59:28.963Z
Question Type: function-variant
Function: handleDownloadLink
Function Size: 1281 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: handleDownloadLink (TypeScript)\n// Determines the appropriate download link based on the user's operating system and architecture.\n\nfunction handleDownloadLink(downloadLinks: string[]) {\n    const win = downloadLinks.find(link => link.match(/\.exe/));\n    const macARM = downloadLinks.fi
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1761174989113
Repository: Unknown
Total Questions Generated: 9
Total Chunks Processed: 2
Ended: 2025-10-23T21:59:28.964Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-23T22:37:48.452Z
File: [8 files: FooterComponent.jsx, Execute callback, SpringbootBackendApplicationTests.java, EmployeeController.java, SpringbootBackendApplication.java, HeaderComponent.js, UpdateEmployeeComponent.jsx, index.js]
Functions Extracted: 3


Function 1: render
Language: JavaScript
Lines: 9
Full Code:
--------------------------------------------------------------------------------
render() {
        return (
            <div>
                <footer className = "footer">
                    <span className="text-muted">All Rights Reserved 2020 @JavaGuides</span>
                </footer>
            </div>
        )
    }
--------------------------------------------------------------------------------


Function 2: componentDidMount
Language: JavaScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
componentDidMount(){
        EmployeeService.getEmployeeById(this.state.id).then( (res) =>{
            let employee = res.data;
            this.setState({firstName: employee.firstName,
                lastName: employee.lastName,
                emailId : employee.emailId
            });
        });
    }
--------------------------------------------------------------------------------


Function 3: updateEmployee
Language: JavaScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
updateEmployee = (e) => {
        e.preventDefault();
        let employee = {firstName: this.state.firstName, lastName: this.state.lastName, emailId: this.state.emailId};
        console.log('employee => ' + JSON.stringify(employee));
        console.log('id => ' + JSON.stringify(this.state.id));
        EmployeeService.updateEmployee(employee, this.state.id).then( res => {
            this.props.history.push('/employees');
        });
    }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-23T22:37:59.201Z
File: [8 files: Execute callback, pom.xml, EmployeeService.js, Is not localhost. Just register service worker, ViewEmployeeComponent.jsx, HeaderComponent.js, Check if the service worker can be found. If it can't reload the page., FooterComponent.jsx]
Functions Extracted: 3


Function 1: componentDidMount
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
componentDidMount(){
        EmployeeService.getEmployeeById(this.state.id).then( res => {
            this.setState({employee: res.data});
        })
    }
--------------------------------------------------------------------------------


Function 2: render
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
render() {
        return (
            <div>
                <br></br>
                <div className = "card col-md-6 offset-md-3">
                    <h3 className = "text-center"> View Employee Details</h3>
                    <div className = "card-body">
                        <div className = "row">
                            <label> Employee First Name: </label>
                            <div> { this.state.employee.firstName }</div>
                        </div>
                        <div className = "row">
                            <label> Employee Last Name: </label>
                            <div> { this.state.employee.lastName }</div>
                        </div>
                        <div className = "row">
                            <label> Employee Email ID: </label>
                            <div> { this.state.employee.emailId }</div>
                        </div>
                    </div>
                </div>
            </div>
        )
    }
--------------------------------------------------------------------------------


Function 3: registerValidSW
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function registerValidSW(swUrl, config) {
  navigator.serviceWorker
    .register(swUrl)
    .then(registration => {
      registration.onupdatefound = () => {
        const installingWorker = registration.installing;
        if (installingWorker == null) {
          return;
        }
        installingWorker.onstatechange = () => {
          if (installingWorker.state === 'installed') {
            if (navigator.serviceWorker.controller) {

--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:38:01.439Z
Question Type: select-all
Function: updateEmployee
Function Size: 567 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: updateEmployee (JavaScript)\n// Handles the employee update process by sending updated data to the service.\n\nupdateEmployee = (e) => {\n        e.preventDefault();\n        let employee = {firstName: this.state.firstName, lastName: this.state.lastName, emailId: this.state.emailId};\n       
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:38:03.191Z
Question Type: function-variant
Function: render
Function Size: 337 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: render (JavaScript)\n// Renders the footer component with a copyright message.\n\nrender() {\n        return (\n            <div>\n                <footer className = "footer">\n                    <span className="text-muted">All Rights Reserved 2020 @JavaGuides</span>\n                </foote
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:38:03.355Z
Question Type: function-variant
Function: render
Function Size: 337 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: render (JavaScript)\n// Renders the footer component with a copyright message.\n\nrender() {\n        return (\n            <div>\n                <footer className = "footer">\n                    <span className="text-muted">All Rights Reserved 2020 @JavaGuides</span>\n                </foote
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:38:05.972Z
Question Type: multiple-choice
Function: componentDidMount
Function Size: 433 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches employee data by ID when the component mounts and updates the state.\n\ncomponentDidMount(){\n        EmployeeService.getEmployeeById(this.state.id).then( (res) =>{\n            let employee = res.data;\n            this.setState({firstName: employee
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:38:06.719Z
Question Type: true-false
Function: render
Function Size: 337 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: render (JavaScript)\n// Renders the footer component with a copyright message.\n\nrender() {\n        return (\n            <div>\n                <footer className = "footer">\n                    <span className="text-muted">All Rights Reserved 2020 @JavaGuides</span>\n                </foote
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:38:07.738Z
Question Type: select-all
Function: render
Function Size: 337 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: render (JavaScript)\n// Renders the footer component with a copyright message.\n\nrender() {\n        return (\n            <div>\n                <footer className = "footer">\n                    <span className="text-muted">All Rights Reserved 2020 @JavaGuides</span>\n                </foote
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:38:08.097Z
Question Type: order-sequence
Function: updateEmployee
Function Size: 567 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: updateEmployee (JavaScript)\n// Handles the employee update process by sending updated data to the service.\n\nupdateEmployee = (e) => {\n        e.preventDefault();\n        let employee = {firstName: this.state.firstName, lastName: this.state.lastName, emailId: this.state.emailId};\n       
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:38:11.213Z
Question Type: select-all
Function: updateEmployee
Function Size: 567 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: updateEmployee (JavaScript)\n// Handles the employee update process by sending updated data to the service.\n\nupdateEmployee = (e) => {\n        e.preventDefault();\n        let employee = {firstName: this.state.firstName, lastName: this.state.lastName, emailId: this.state.emailId};\n       
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:38:12.069Z
Question Type: true-false
Function: updateEmployee
Function Size: 567 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: updateEmployee (JavaScript)\n// Handles the employee update process by sending updated data to the service.\n\nupdateEmployee = (e) => {\n        e.preventDefault();\n        let employee = {firstName: this.state.firstName, lastName: this.state.lastName, emailId: this.state.emailId};\n       
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:38:18.568Z
Question Type: select-all
Function: componentDidMount
Function Size: 433 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches employee data by ID when the component mounts and updates the state.\n\ncomponentDidMount(){\n        EmployeeService.getEmployeeById(this.state.id).then( (res) =>{\n            let employee = res.data;\n            this.setState({firstName: employee
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:38:19.226Z
Question Type: order-sequence
Function: render
Function Size: 337 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: render (JavaScript)\n// Renders the footer component with a copyright message.\n\nrender() {\n        return (\n            <div>\n                <footer className = "footer">\n                    <span className="text-muted">All Rights Reserved 2020 @JavaGuides</span>\n                </foote
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:38:19.885Z
Question Type: function-variant
Function: updateEmployee
Function Size: 567 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: updateEmployee (JavaScript)\n// Handles the employee update process by sending updated data to the service.\n\nupdateEmployee = (e) => {\n        e.preventDefault();\n        let employee = {firstName: this.state.firstName, lastName: this.state.lastName, emailId: this.state.emailId};\n       
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:38:23.725Z
Question Type: order-sequence
Function: componentDidMount
Function Size: 433 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches employee data by ID when the component mounts and updates the state.\n\ncomponentDidMount(){\n        EmployeeService.getEmployeeById(this.state.id).then( (res) =>{\n            let employee = res.data;\n            this.setState({firstName: employee
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:38:29.714Z
Question Type: function-variant
Function: componentDidMount
Function Size: 433 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches employee data by ID when the component mounts and updates the state.\n\ncomponentDidMount(){\n        EmployeeService.getEmployeeById(this.state.id).then( (res) =>{\n            let employee = res.data;\n            this.setState({firstName: employee
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:38:31.737Z
Question Type: order-sequence
Function: componentDidMount
Function Size: 433 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches employee data by ID when the component mounts and updates the state.\n\ncomponentDidMount(){\n        EmployeeService.getEmployeeById(this.state.id).then( (res) =>{\n            let employee = res.data;\n            this.setState({firstName: employee
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1761174989113
Repository: Unknown
Total Questions Generated: 10
Total Chunks Processed: 3
Ended: 2025-10-23T22:38:31.738Z
================================================================================


--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:38:35.402Z
Question Type: true-false
Function: render
Function Size: 337 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: render (JavaScript)\n// Renders the footer component with a copyright message.\n\nrender() {\n        return (\n            <div>\n                <footer className = "footer">\n                    <span className="text-muted">All Rights Reserved 2020 @JavaGuides</span>\n                </foote
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:38:36.929Z
Question Type: select-all
Function: updateEmployee
Function Size: 567 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: updateEmployee (JavaScript)\n// Handles the employee update process by sending updated data to the service.\n\nupdateEmployee = (e) => {\n        e.preventDefault();\n        let employee = {firstName: this.state.firstName, lastName: this.state.lastName, emailId: this.state.emailId};\n       
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:38:37.743Z
Question Type: select-all
Function: componentDidMount
Function Size: 433 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches employee data by ID when the component mounts and updates the state.\n\ncomponentDidMount(){\n        EmployeeService.getEmployeeById(this.state.id).then( (res) =>{\n            let employee = res.data;\n            this.setState({firstName: employee
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:38:39.491Z
Question Type: true-false
Function: updateEmployee
Function Size: 567 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: updateEmployee (JavaScript)\n// Handles the employee update process by sending updated data to the service.\n\nupdateEmployee = (e) => {\n        e.preventDefault();\n        let employee = {firstName: this.state.firstName, lastName: this.state.lastName, emailId: this.state.emailId};\n       
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:38:41.991Z
Question Type: select-all
Function: updateEmployee
Function Size: 567 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: updateEmployee (JavaScript)\n// Handles the employee update process by sending updated data to the service.\n\nupdateEmployee = (e) => {\n        e.preventDefault();\n        let employee = {firstName: this.state.firstName, lastName: this.state.lastName, emailId: this.state.emailId};\n       
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:38:44.252Z
Question Type: order-sequence
Function: componentDidMount
Function Size: 433 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches employee data by ID when the component mounts and updates the state.\n\ncomponentDidMount(){\n        EmployeeService.getEmployeeById(this.state.id).then( (res) =>{\n            let employee = res.data;\n            this.setState({firstName: employee
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:38:45.333Z
Question Type: select-all
Function: render
Function Size: 337 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: render (JavaScript)\n// Renders the footer component with a copyright message.\n\nrender() {\n        return (\n            <div>\n                <footer className = "footer">\n                    <span className="text-muted">All Rights Reserved 2020 @JavaGuides</span>\n                </foote
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:38:50.080Z
Question Type: order-sequence
Function: render
Function Size: 337 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: render (JavaScript)\n// Renders the footer component with a copyright message.\n\nrender() {\n        return (\n            <div>\n                <footer className = "footer">\n                    <span className="text-muted">All Rights Reserved 2020 @JavaGuides</span>\n                </foote
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:38:51.886Z
Question Type: function-variant
Function: render
Function Size: 337 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: render (JavaScript)\n// Renders the footer component with a copyright message.\n\nrender() {\n        return (\n            <div>\n                <footer className = "footer">\n                    <span className="text-muted">All Rights Reserved 2020 @JavaGuides</span>\n                </foote
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1761174989113
Repository: Unknown
Total Questions Generated: 8
Total Chunks Processed: 3
Ended: 2025-10-23T22:38:52.037Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-23T22:47:53.006Z
File: [8 files: Try to read the founder tier document, Run: node check-user-premium.js, Make sure you have this file, Test 3: Claim a slot, Your Firebase config, Initialize Firebase Admin, Test 8: Try claiming when closed, Run tests if this script is executed directly]
Functions Extracted: 3


Function 1: checkUserPremiumStatus
Language: JavaScript
Lines: 20
Full Code:
--------------------------------------------------------------------------------
async function checkUserPremiumStatus(userId) {
  try {
    const userDoc = await db.collection('users').doc(userId).get();
    
    if (!userDoc.exists) {
      console.log('❌ User not found in Firebase');
      return;
    }
    
    const userData = userDoc.data();
    console.log('\n📊 Your User Document:');
    console.log('===================================');
    console.log('Email:', userData.email);
    console.log('Name:', userData.name);
    console.log('isPremium:', userData.isPremium);
    console.log('isFounder:', userData.isFounder);
    console.log('subscriptionStatus:', userData.subscriptionStatus);
    console.log('stripeCustomerId:', userData.stripeCustomerId);
    console.log('stripeSubscriptionId:', userData.stripeSubscriptionId);
    console.log('updatedAt:', userData.updatedAt);
    console.log('===================================\n');
    
    if (userData.isPremium) {
      console.log('✅ You ARE marked as premium in Firebase!');
    } else {
      console.log('❌ You are NOT marked as premium in Firebase');
      console.log('   This means the Stripe webhook did not update your account');
    }
  } catch (error) {
    console.error('❌ Error:', error.message);
  } finally {
    process.exit(0);
  }
--------------------------------------------------------------------------------


Function 2: debugFounderTier
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
async function debugFounderTier() {
  try {
    console.log('🔍 Testing Firebase connection...');
  } catch (error) {
    console.error('❌ Error:', error.message);
  }
}
--------------------------------------------------------------------------------


Function 3: runTests
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
if (require.main === module) {
  console.log('🚀 Starting Founder Tier Tests...\n');
  console.log('⚠️  Note: This will modify your Firebase database.');
  console.log('   Make sure you\'re using a test environment!\n');
  
  runTests()
    .then(() => {
      console.log('✅ Test suite finished successfully\n');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n❌ Test suite failed:', error);
      process.exit(1);
    });
}
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:47:58.877Z
Question Type: select-all
Function: debugFounderTier
Function Size: 247 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: debugFounderTier (JavaScript)\n// Tests the Firebase connection.\n\nasync function debugFounderTier() {\n  try {\n    console.log('🔍 Testing Firebase connection...');\n  } catch (error) {\n    console.error('❌ Error:', error.message);\n  }\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:47:59.108Z
Question Type: select-all
Function: debugFounderTier
Function Size: 247 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: debugFounderTier (JavaScript)\n// Tests the Firebase connection.\n\nasync function debugFounderTier() {\n  try {\n    console.log('🔍 Testing Firebase connection...');\n  } catch (error) {\n    console.error('❌ Error:', error.message);\n  }\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:48:03.675Z
Question Type: true-false
Function: runTests
Function Size: 540 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: runTests (JavaScript)\n// Runs tests if the script is executed directly.\n\nif (require.main === module) {\n  console.log('🚀 Starting Founder Tier Tests...\n');\n  console.log('⚠️  Note: This will modify your Firebase database.');\n  console.log('   Make sure you\'re using a test environment
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:48:05.542Z
Question Type: order-sequence
Function: checkUserPremiumStatus
Function Size: 1365 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: checkUserPremiumStatus (JavaScript)\n// Checks the premium status of a user in Firebase and logs the details.\n\nasync function checkUserPremiumStatus(userId) {\n  try {\n    const userDoc = await db.collection('users').doc(userId).get();\n    \n    if (!userDoc.exists) {\n      console.log('❌ 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:48:05.563Z
Question Type: order-sequence
Function: debugFounderTier
Function Size: 247 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: debugFounderTier (JavaScript)\n// Tests the Firebase connection.\n\nasync function debugFounderTier() {\n  try {\n    console.log('🔍 Testing Firebase connection...');\n  } catch (error) {\n    console.error('❌ Error:', error.message);\n  }\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:48:08.271Z
Question Type: multiple-choice
Function: checkUserPremiumStatus
Function Size: 1365 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: checkUserPremiumStatus (JavaScript)\n// Checks the premium status of a user in Firebase and logs the details.\n\nasync function checkUserPremiumStatus(userId) {\n  try {\n    const userDoc = await db.collection('users').doc(userId).get();\n    \n    if (!userDoc.exists) {\n      console.log('❌ 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:48:11.622Z
Question Type: order-sequence
Function: runTests
Function Size: 540 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: runTests (JavaScript)\n// Runs tests if the script is executed directly.\n\nif (require.main === module) {\n  console.log('🚀 Starting Founder Tier Tests...\n');\n  console.log('⚠️  Note: This will modify your Firebase database.');\n  console.log('   Make sure you\'re using a test environment
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:48:14.646Z
Question Type: function-variant
Function: debugFounderTier
Function Size: 247 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: debugFounderTier (JavaScript)\n// Tests the Firebase connection.\n\nasync function debugFounderTier() {\n  try {\n    console.log('🔍 Testing Firebase connection...');\n  } catch (error) {\n    console.error('❌ Error:', error.message);\n  }\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:48:21.830Z
Question Type: select-all
Function: runTests
Function Size: 540 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: runTests (JavaScript)\n// Runs tests if the script is executed directly.\n\nif (require.main === module) {\n  console.log('🚀 Starting Founder Tier Tests...\n');\n  console.log('⚠️  Note: This will modify your Firebase database.');\n  console.log('   Make sure you\'re using a test environment
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:48:23.572Z
Question Type: function-variant
Function: checkUserPremiumStatus
Function Size: 1365 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: checkUserPremiumStatus (JavaScript)\n// Checks the premium status of a user in Firebase and logs the details.\n\nasync function checkUserPremiumStatus(userId) {\n  try {\n    const userDoc = await db.collection('users').doc(userId).get();\n    \n    if (!userDoc.exists) {\n      console.log('❌ 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:48:23.663Z
Question Type: function-variant
Function: runTests
Function Size: 540 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: runTests (JavaScript)\n// Runs tests if the script is executed directly.\n\nif (require.main === module) {\n  console.log('🚀 Starting Founder Tier Tests...\n');\n  console.log('⚠️  Note: This will modify your Firebase database.');\n  console.log('   Make sure you\'re using a test environment
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:48:29.677Z
Question Type: function-variant
Function: runTests
Function Size: 540 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: runTests (JavaScript)\n// Runs tests if the script is executed directly.\n\nif (require.main === module) {\n  console.log('🚀 Starting Founder Tier Tests...\n');\n  console.log('⚠️  Note: This will modify your Firebase database.');\n  console.log('   Make sure you\'re using a test environment
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:48:29.767Z
Question Type: true-false
Function: debugFounderTier
Function Size: 247 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: debugFounderTier (JavaScript)\n// Tests the Firebase connection.\n\nasync function debugFounderTier() {\n  try {\n    console.log('🔍 Testing Firebase connection...');\n  } catch (error) {\n    console.error('❌ Error:', error.message);\n  }\n}
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1761174989113
Repository: Unknown
Total Questions Generated: 9
Total Chunks Processed: 3
Ended: 2025-10-23T22:48:34.338Z
================================================================================


--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:48:45.031Z
Question Type: function-variant
Function: debugFounderTier
Function Size: 247 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: debugFounderTier (JavaScript)\n// Tests the Firebase connection.\n\nasync function debugFounderTier() {\n  try {\n    console.log('🔍 Testing Firebase connection...');\n  } catch (error) {\n    console.error('❌ Error:', error.message);\n  }\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:48:46.852Z
Question Type: order-sequence
Function: checkUserPremiumStatus
Function Size: 1365 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: checkUserPremiumStatus (JavaScript)\n// Checks the premium status of a user in Firebase and logs the details.\n\nasync function checkUserPremiumStatus(userId) {\n  try {\n    const userDoc = await db.collection('users').doc(userId).get();\n    \n    if (!userDoc.exists) {\n      console.log('❌ 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:48:46.887Z
Question Type: order-sequence
Function: debugFounderTier
Function Size: 247 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: debugFounderTier (JavaScript)\n// Tests the Firebase connection.\n\nasync function debugFounderTier() {\n  try {\n    console.log('🔍 Testing Firebase connection...');\n  } catch (error) {\n    console.error('❌ Error:', error.message);\n  }\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:48:58.425Z
Question Type: order-sequence
Function: runTests
Function Size: 540 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: runTests (JavaScript)\n// Runs tests if the script is executed directly.\n\nif (require.main === module) {\n  console.log('🚀 Starting Founder Tier Tests...\n');\n  console.log('⚠️  Note: This will modify your Firebase database.');\n  console.log('   Make sure you\'re using a test environment
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:48:59.393Z
Question Type: order-sequence
Function: checkUserPremiumStatus
Function Size: 1365 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: checkUserPremiumStatus (JavaScript)\n// Checks the premium status of a user in Firebase and logs the details.\n\nasync function checkUserPremiumStatus(userId) {\n  try {\n    const userDoc = await db.collection('users').doc(userId).get();\n    \n    if (!userDoc.exists) {\n      console.log('❌ 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:49:02.463Z
Question Type: function-variant
Function: checkUserPremiumStatus
Function Size: 1365 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: checkUserPremiumStatus (JavaScript)\n// Checks the premium status of a user in Firebase and logs the details.\n\nasync function checkUserPremiumStatus(userId) {\n  try {\n    const userDoc = await db.collection('users').doc(userId).get();\n    \n    if (!userDoc.exists) {\n      console.log('❌ 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:49:03.554Z
Question Type: function-variant
Function: runTests
Function Size: 540 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: runTests (JavaScript)\n// Runs tests if the script is executed directly.\n\nif (require.main === module) {\n  console.log('🚀 Starting Founder Tier Tests...\n');\n  console.log('⚠️  Note: This will modify your Firebase database.');\n  console.log('   Make sure you\'re using a test environment
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:49:05.756Z
Question Type: multiple-choice
Function: checkUserPremiumStatus
Function Size: 1365 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: checkUserPremiumStatus (JavaScript)\n// Checks the premium status of a user in Firebase and logs the details.\n\nasync function checkUserPremiumStatus(userId) {\n  try {\n    const userDoc = await db.collection('users').doc(userId).get();\n    \n    if (!userDoc.exists) {\n      console.log('❌ 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:49:06.076Z
Question Type: select-all
Function: runTests
Function Size: 540 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: runTests (JavaScript)\n// Runs tests if the script is executed directly.\n\nif (require.main === module) {\n  console.log('🚀 Starting Founder Tier Tests...\n');\n  console.log('⚠️  Note: This will modify your Firebase database.');\n  console.log('   Make sure you\'re using a test environment
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:49:10.594Z
Question Type: true-false
Function: runTests
Function Size: 540 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: runTests (JavaScript)\n// Runs tests if the script is executed directly.\n\nif (require.main === module) {\n  console.log('🚀 Starting Founder Tier Tests...\n');\n  console.log('⚠️  Note: This will modify your Firebase database.');\n  console.log('   Make sure you\'re using a test environment
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:49:11.567Z
Question Type: select-all
Function: debugFounderTier
Function Size: 247 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: debugFounderTier (JavaScript)\n// Tests the Firebase connection.\n\nasync function debugFounderTier() {\n  try {\n    console.log('🔍 Testing Firebase connection...');\n  } catch (error) {\n    console.error('❌ Error:', error.message);\n  }\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:49:12.493Z
Question Type: select-all
Function: checkUserPremiumStatus
Function Size: 1365 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: checkUserPremiumStatus (JavaScript)\n// Checks the premium status of a user in Firebase and logs the details.\n\nasync function checkUserPremiumStatus(userId) {\n  try {\n    const userDoc = await db.collection('users').doc(userId).get();\n    \n    if (!userDoc.exists) {\n      console.log('❌ 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:49:14.863Z
Question Type: true-false
Function: debugFounderTier
Function Size: 247 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: debugFounderTier (JavaScript)\n// Tests the Firebase connection.\n\nasync function debugFounderTier() {\n  try {\n    console.log('🔍 Testing Firebase connection...');\n  } catch (error) {\n    console.error('❌ Error:', error.message);\n  }\n}
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1761174989113
Repository: Unknown
Total Questions Generated: 7
Total Chunks Processed: 3
Ended: 2025-10-23T22:49:16.885Z
================================================================================


--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:56:29.463Z
Question Type: true-false
Function: checkUserPremiumStatus
Function Size: 1365 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: checkUserPremiumStatus (JavaScript)\n// Checks the premium status of a user in Firebase and logs the details.\n\nasync function checkUserPremiumStatus(userId) {\n  try {\n    const userDoc = await db.collection('users').doc(userId).get();\n    \n    if (!userDoc.exists) {\n      console.log('❌ 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:56:31.070Z
Question Type: select-all
Function: checkUserPremiumStatus
Function Size: 1365 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: checkUserPremiumStatus (JavaScript)\n// Checks the premium status of a user in Firebase and logs the details.\n\nasync function checkUserPremiumStatus(userId) {\n  try {\n    const userDoc = await db.collection('users').doc(userId).get();\n    \n    if (!userDoc.exists) {\n      console.log('❌ 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:56:33.870Z
Question Type: true-false
Function: debugFounderTier
Function Size: 247 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: debugFounderTier (JavaScript)\n// Tests the Firebase connection.\n\nasync function debugFounderTier() {\n  try {\n    console.log('🔍 Testing Firebase connection...');\n  } catch (error) {\n    console.error('❌ Error:', error.message);\n  }\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:56:34.489Z
Question Type: order-sequence
Function: debugFounderTier
Function Size: 247 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: debugFounderTier (JavaScript)\n// Tests the Firebase connection.\n\nasync function debugFounderTier() {\n  try {\n    console.log('🔍 Testing Firebase connection...');\n  } catch (error) {\n    console.error('❌ Error:', error.message);\n  }\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:56:35.035Z
Question Type: order-sequence
Function: checkUserPremiumStatus
Function Size: 1365 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: checkUserPremiumStatus (JavaScript)\n// Checks the premium status of a user in Firebase and logs the details.\n\nasync function checkUserPremiumStatus(userId) {\n  try {\n    const userDoc = await db.collection('users').doc(userId).get();\n    \n    if (!userDoc.exists) {\n      console.log('❌ 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:56:35.649Z
Question Type: multiple-choice
Function: runTests
Function Size: 540 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: runTests (JavaScript)\n// Runs tests if the script is executed directly.\n\nif (require.main === module) {\n  console.log('🚀 Starting Founder Tier Tests...\n');\n  console.log('⚠️  Note: This will modify your Firebase database.');\n  console.log('   Make sure you\'re using a test environment
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:56:40.859Z
Question Type: select-all
Function: debugFounderTier
Function Size: 247 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: debugFounderTier (JavaScript)\n// Tests the Firebase connection.\n\nasync function debugFounderTier() {\n  try {\n    console.log('🔍 Testing Firebase connection...');\n  } catch (error) {\n    console.error('❌ Error:', error.message);\n  }\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:56:42.283Z
Question Type: function-variant
Function: runTests
Function Size: 540 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: runTests (JavaScript)\n// Runs tests if the script is executed directly.\n\nif (require.main === module) {\n  console.log('🚀 Starting Founder Tier Tests...\n');\n  console.log('⚠️  Note: This will modify your Firebase database.');\n  console.log('   Make sure you\'re using a test environment
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:56:46.351Z
Question Type: order-sequence
Function: debugFounderTier
Function Size: 247 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: debugFounderTier (JavaScript)\n// Tests the Firebase connection.\n\nasync function debugFounderTier() {\n  try {\n    console.log('🔍 Testing Firebase connection...');\n  } catch (error) {\n    console.error('❌ Error:', error.message);\n  }\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:56:46.969Z
Question Type: order-sequence
Function: runTests
Function Size: 540 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: runTests (JavaScript)\n// Runs tests if the script is executed directly.\n\nif (require.main === module) {\n  console.log('🚀 Starting Founder Tier Tests...\n');\n  console.log('⚠️  Note: This will modify your Firebase database.');\n  console.log('   Make sure you\'re using a test environment
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:56:51.430Z
Question Type: select-all
Function: checkUserPremiumStatus
Function Size: 1365 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: checkUserPremiumStatus (JavaScript)\n// Checks the premium status of a user in Firebase and logs the details.\n\nasync function checkUserPremiumStatus(userId) {\n  try {\n    const userDoc = await db.collection('users').doc(userId).get();\n    \n    if (!userDoc.exists) {\n      console.log('❌ 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:56:52.969Z
Question Type: function-variant
Function: debugFounderTier
Function Size: 247 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: debugFounderTier (JavaScript)\n// Tests the Firebase connection.\n\nasync function debugFounderTier() {\n  try {\n    console.log('🔍 Testing Firebase connection...');\n  } catch (error) {\n    console.error('❌ Error:', error.message);\n  }\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:56:55.035Z
Question Type: select-all
Function: runTests
Function Size: 540 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: runTests (JavaScript)\n// Runs tests if the script is executed directly.\n\nif (require.main === module) {\n  console.log('🚀 Starting Founder Tier Tests...\n');\n  console.log('⚠️  Note: This will modify your Firebase database.');\n  console.log('   Make sure you\'re using a test environment
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:57:06.584Z
Question Type: function-variant
Function: runTests
Function Size: 540 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: runTests (JavaScript)\n// Runs tests if the script is executed directly.\n\nif (require.main === module) {\n  console.log('🚀 Starting Founder Tier Tests...\n');\n  console.log('⚠️  Note: This will modify your Firebase database.');\n  console.log('   Make sure you\'re using a test environment
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:57:16.434Z
Question Type: function-variant
Function: checkUserPremiumStatus
Function Size: 1365 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: checkUserPremiumStatus (JavaScript)\n// Checks the premium status of a user in Firebase and logs the details.\n\nasync function checkUserPremiumStatus(userId) {\n  try {\n    const userDoc = await db.collection('users').doc(userId).get();\n    \n    if (!userDoc.exists) {\n      console.log('❌ 
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1761174989113
Repository: Unknown
Total Questions Generated: 9
Total Chunks Processed: 3
Ended: 2025-10-23T22:57:16.435Z
================================================================================


--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:57:23.328Z
Question Type: true-false
Function: checkUserPremiumStatus
Function Size: 1365 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: checkUserPremiumStatus (JavaScript)\n// Checks the premium status of a user in Firebase and logs the details.\n\nasync function checkUserPremiumStatus(userId) {\n  try {\n    const userDoc = await db.collection('users').doc(userId).get();\n    \n    if (!userDoc.exists) {\n      console.log('❌ 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:57:23.790Z
Question Type: select-all
Function: runTests
Function Size: 540 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: runTests (JavaScript)\n// Runs tests if the script is executed directly.\n\nif (require.main === module) {\n  console.log('🚀 Starting Founder Tier Tests...\n');\n  console.log('⚠️  Note: This will modify your Firebase database.');\n  console.log('   Make sure you\'re using a test environment
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:57:25.648Z
Question Type: select-all
Function: checkUserPremiumStatus
Function Size: 1365 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: checkUserPremiumStatus (JavaScript)\n// Checks the premium status of a user in Firebase and logs the details.\n\nasync function checkUserPremiumStatus(userId) {\n  try {\n    const userDoc = await db.collection('users').doc(userId).get();\n    \n    if (!userDoc.exists) {\n      console.log('❌ 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:57:27.623Z
Question Type: order-sequence
Function: debugFounderTier
Function Size: 247 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: debugFounderTier (JavaScript)\n// Tests the Firebase connection.\n\nasync function debugFounderTier() {\n  try {\n    console.log('🔍 Testing Firebase connection...');\n  } catch (error) {\n    console.error('❌ Error:', error.message);\n  }\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:57:29.957Z
Question Type: select-all
Function: debugFounderTier
Function Size: 247 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: debugFounderTier (JavaScript)\n// Tests the Firebase connection.\n\nasync function debugFounderTier() {\n  try {\n    console.log('🔍 Testing Firebase connection...');\n  } catch (error) {\n    console.error('❌ Error:', error.message);\n  }\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:57:33.011Z
Question Type: true-false
Function: runTests
Function Size: 540 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: runTests (JavaScript)\n// Runs tests if the script is executed directly.\n\nif (require.main === module) {\n  console.log('🚀 Starting Founder Tier Tests...\n');\n  console.log('⚠️  Note: This will modify your Firebase database.');\n  console.log('   Make sure you\'re using a test environment
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:57:34.602Z
Question Type: select-all
Function: checkUserPremiumStatus
Function Size: 1365 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: checkUserPremiumStatus (JavaScript)\n// Checks the premium status of a user in Firebase and logs the details.\n\nasync function checkUserPremiumStatus(userId) {\n  try {\n    const userDoc = await db.collection('users').doc(userId).get();\n    \n    if (!userDoc.exists) {\n      console.log('❌ 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-23T22:57:41.789Z
Question Type: function-variant
Function: debugFounderTier
Function Size: 247 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: debugFounderTier (JavaScript)\n// Tests the Firebase connection.\n\nasync function debugFounderTier() {\n  try {\n    console.log('🔍 Testing Firebase connection...');\n  } catch (error) {\n    console.error('❌ Error:', error.message);\n  }\n}
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1761174989113
Repository: Unknown
Total Questions Generated: 6
Total Chunks Processed: 3
Ended: 2025-10-23T22:57:41.896Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-23T23:35:34.425Z
File: [2 files: build-superblock.ts, help-modal.tsx]
Functions Extracted: 3


Function 1: validateChallenges
Language: TypeScript
Lines: 51
Full Code:
--------------------------------------------------------------------------------
export function validateChallenges(
  foundChallenges: Challenge[],
  meta: { challengeOrder: Challenge[]; dashedName: string },
  throwOnError?: boolean
) {
  const metaChallengeIds = new Set(meta.challengeOrder.map(c => c.id));
  const foundChallengeIds = new Set(foundChallenges.map(c => c.id));

  const throwOrLog = createValidator(throwOnError);

  throwOrLog(() => {
    const missingFromMeta = Array.from(foundChallengeIds).filter(
      id => !metaChallengeIds.has(id)
    );
    if (missingFromMeta.length > 0)
      throw Error(
        `Challenges found in directory but missing from meta: ${missingFromMeta.join(', ')}`
      );
  });

  throwOrLog(() => {
    const missingFromFiles = Array.from(metaChallengeIds).filter(
      id => !foundChallengeIds.has(id)
    );
    if (missingFromFiles.length > 0)
      throw Error(
        `Challenges in meta but missing files with id(s): ${missingFromFiles.join(', ')}`
      );
  });

  throwOrLog(() => {
    const duplicateIds = duplicates(foundChallenges.map(c => c.id));
    if (duplicateIds.length > 0)
      throw Error(
        `Duplicate challenges found in found challenges with id(s): ${duplicateIds.join(', ')}`
      );
  });

  throwOrLog(() => {
    const duplicateMetaIds = duplicates(meta.challengeOrder.map(c => c.id));
    if (duplicateMetaIds.length > 0)
      throw Error(
        `Duplicate challenges found in meta with id(s): ${duplicateMetaIds.join(', ')}`
      );
  });

  throwOrLog(() => {
    const duplicateTitles = duplicates(foundChallenges.map(c => c.title));
    if (duplicateTitles.length > 0)
      throw Error(
        `Duplicate titles found in found challenges with title(s): ${duplicateTitles.join(', ')} in block ${meta.dashedName}`
      );
  });

  throwOrLog(() => {
    const duplicateMetaTitles = duplicates(
      meta.challengeOrder.map(c => c.title)
    );
    if (duplicateMetaTitles.length > 0)
      throw Error(
        `Duplicate titles found in meta with title(s): ${duplicateMetaTitles.join(', ')}`
      );
  });
}
--------------------------------------------------------------------------------


Function 2: buildBlock
Language: TypeScript
Lines: 20
Full Code:
--------------------------------------------------------------------------------
export function buildBlock(foundChallenges: Challenge[], meta: Meta) {
  const challenges = meta.challengeOrder.map(challengeInfo => {
    const challenge = foundChallenges.find(c => c.id === challengeInfo.id);
    if (!challenge) {
      throw Error(
        `Challenge ${challengeInfo.id} (${challengeInfo.title}) not found in block`
      );
    }

    return challenge;
  });

  return {
    challenges,
    meta
  };
}
--------------------------------------------------------------------------------


Function 3: generateSearchLink
Language: TypeScript
Lines: 9
Full Code:
--------------------------------------------------------------------------------
export const generateSearchLink = (
  title: string,
  block: string,
  superBlock: string
) => {
  const titleText = t(`intro:${superBlock}.blocks.${block}.title`);
  const selector = 'in:title';
  const query = encodeURIComponent(`${titleText} - ${title} ${selector}`);

  const search = `${forumLocation}/search?q=${query}`;
  return search;
};
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T00:01:44.689Z
File: [2 files: to make use of the Response object (message, status, etc), awaitable-messenger.ts]
Functions Extracted: 5


Function 1: get
Language: TypeScript
Lines: 9
Full Code:
--------------------------------------------------------------------------------
async function get<T>(
  path: string,
  signal?: AbortSignal
): Promise<ResponseWithData<T>> {
  const response = await fetch(`${base}${path}`, {
    ...defaultOptions,
    headers: { 'CSRF-Token': getCSRFToken() },
    signal
  });

  return combineDataWithResponse(response);
}
--------------------------------------------------------------------------------


Function 2: combineDataWithResponse
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
async function combineDataWithResponse<T>(response: Response) {
  const data = (await response.json()) as T;
  return { response, data };
}
--------------------------------------------------------------------------------


Function 3: request
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
async function request<T>(
  method: 'POST' | 'PUT' | 'DELETE',
  path: string,
  body: unknown
): Promise<ResponseWithData<T>> {
  const options: RequestInit = {
    ...defaultOptions,
    method,
    headers: {
      'CSRF-Token': getCSRFToken(),
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(body)
  };

  const response = await fetch(`${base}${path}`, options);
  return combineDataWithResponse(response);
}
--------------------------------------------------------------------------------


Function 4: parseApiResponseToClientUser
Language: TypeScript
Lines: 11
Full Code:
--------------------------------------------------------------------------------
function parseApiResponseToClientUser(data: ApiUserResponse): User | null {
  const userData = data.user?.[data?.result ?? ''];
  let completedChallenges: CompletedChallenge[] = [];
  let savedChallenges: SavedChallenge[] = [];
  if (userData) {
    completedChallenges = mapFilesToChallengeFiles(
      userData.completedChallenges
    );
    savedChallenges = mapFilesToChallengeFiles(userData.savedChallenges);
  }
  return data.result
    ? { ...userData, completedChallenges, savedChallenges }
    : null;
}
--------------------------------------------------------------------------------


Function 5: awaitResponse
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export function awaitResponse<
  MessageOut,
  MessageIn extends { type: string; value: Value; error: string },
  Value
>({
  messenger,
  message,
  onMessage
}: {
  messenger: Messenger<MessageOut>;
  message: MessageOut;
  onMessage: (
    response: MessageIn,
    onSuccess: (res: Value) => void,
    onFailure: (err: Error) => void
  ) => void;
}): Promise<Value> {
  return new Promise(
    (resolve: (res: Value) => void, reject: (err: Error) => void) => {
      const channel = new MessageChannel();
      // Additional logic to handle message channel
    }
  );
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T00:01:56.069Z
File: [2 files: to make use of the Response object (message, status, etc), index.ts]
Functions Extracted: 6


Function 1: get
Language: TypeScript
Lines: 9
Full Code:
--------------------------------------------------------------------------------
async function get<T>(
  path: string,
  signal?: AbortSignal
): Promise<ResponseWithData<T>> {
  const response = await fetch(`${base}${path}`, {
    ...defaultOptions,
    headers: { 'CSRF-Token': getCSRFToken() },
    signal
  });

  return combineDataWithResponse(response);
}
--------------------------------------------------------------------------------


Function 2: combineDataWithResponse
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
async function combineDataWithResponse<T>(response: Response) {
  const data = (await response.json()) as T;
  return { response, data };
}
--------------------------------------------------------------------------------


Function 3: request
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
async function request<T>(
  method: 'POST' | 'PUT' | 'DELETE',
  path: string,
  body: unknown
): Promise<ResponseWithData<T>> {
  const options: RequestInit = {
    ...defaultOptions,
    method,
    headers: {
      'CSRF-Token': getCSRFToken(),
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(body)
  };

  const response = await fetch(`${base}${path}`, options);
  return combineDataWithResponse(response);
}
--------------------------------------------------------------------------------


Function 4: parseApiResponseToClientUser
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function parseApiResponseToClientUser(data: ApiUserResponse): User | null {
  const userData = data.user?.[data?.result ?? ''];
  let completedChallenges: CompletedChallenge[] = [];
  let savedChallenges: SavedChallenge[] = [];
  if (userData) {
    completedChallenges = mapFilesToChallengeFiles(
      userData.completedChallenges
    );
    savedChallenges = mapFilesToChallengeFiles(userData.savedChallenges);
  }
  return data.result
    ? { ...userData, completedChallenges, savedChallenges }
    : null;
}
--------------------------------------------------------------------------------


Function 5: mapErr
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
export async function mapErr<T>(promise: Promise<T>): Promise<Result<T>> {
  try {
    return { hasError: false, data: await promise };
  } catch (error) {
    return { hasError: true, error };
  }
}
--------------------------------------------------------------------------------


Function 6: syncMapErr
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
export function syncMapErr<T>(fn: () => T): Result<T> {
  try {
    return { hasError: false, data: fn() };
  } catch (error) {
    return { hasError: true, error };
  }
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T00:03:42.564Z
File: TryGhost-Ghost-cf25add/apps/portal/src/utils/helpers.js
Functions Extracted: 5


Function 1: getPortalLink
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
export function getPortalLink({page, siteUrl}) {
    const url = siteUrl || `${window.location.protocol}//${window.location.host}${window.location.pathname}`;
    const portalLinkPath = getPortalLinkPath({page});
    return `${url}${portalLinkPath}`;
}
--------------------------------------------------------------------------------


Function 2: getMemberSubscription
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
export function getMemberSubscription({member = {}}) {
    if (isPaidMember({member})) {
        const subscriptions = member.subscriptions || [];
        const activeSubscription = subscriptions.find((sub) => {
            return ['active', 'trialing', 'unpaid', 'past_due'].includes(sub.status);
        });
        if (!activeSubscription?.price && activeSubscription?.plan) {
            activeSubscription.price = activeSubscription.plan;
        }
        return activeSubscription;
    }
    return null;
}
--------------------------------------------------------------------------------


Function 3: getUpgradeProducts
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
export function getUpgradeProducts({site, member}) {
    const activePrice = getMemberActivePrice({member});
    const activePriceCurrency = activePrice?.currency;
    const availableProducts = getAvailableProducts({site});
    if (!activePrice?.id) {
        return availableProducts;
    }
    return availableProducts.filter((product) => {
        return (isSameCurrency(getProductCurrency({product}), activePriceCurrency));
    });
}
--------------------------------------------------------------------------------


Function 4: getCheckoutSessionDataFromPlanAttribute
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
export function getCheckoutSessionDataFromPlanAttribute(site, plan) {
    const products = getAvailableProducts({site});
    const defaultTier = products.find(p => p.type === 'paid');
    if (plan === 'monthly') {
        return {
            cadence: 'month',
            tierId: defaultTier.id
        };
    }
    if (plan === 'yearly') {
        return {
            cadence: 'year',
            tierId: defaultTier.id
        };
    }
    return {
        priceId: plan
    };
}
--------------------------------------------------------------------------------


Function 5: transformApiSiteData
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export function transformApiSiteData({site}) {
    try {
        if (!site) {
            return null;
        }

        if (site.tiers) {
            site.products = site.tiers;
        }

        site.products = site.products?.map((product) => {
            return {
                ...product,
                monthlyPrice: product.monthly_price,
                yearlyPrice: product.yearly_price
            };
        });

        site.is_stripe_configured = !!site.paid_members_enabled;
    } catch (error) {
        console.error('Error transforming site data:', error);
    }
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T00:03:53.596Z
File: Fire edited if this wasn't a change between resourceType
Functions Extracted: 3


Function 1: onDestroyed
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
async function onDestroyed(model, options) {
    ghostBookshelf.Model.prototype.onDestroyed.apply(this, arguments);

    if (model.previous('status') === 'published') {
        model.emitChange('unpublished', Object.assign({usePreviousAttribute: true}, options));
    }

    model.emitChange('deleted', Object.assign({usePreviousAttribute: true}, options));
}
--------------------------------------------------------------------------------


Function 2: handleAttachedModels
Language: JavaScript
Lines: 24
Full Code:
--------------------------------------------------------------------------------
function handleAttachedModels(model) {
    model.related('tags').once('detaching', function detachingTags(collection, tag) {
        model.related('tags').once('detached', function detachedTags(detachedCollection, response, options) {
            tag.emitChange('detached', options);
            model.emitChange('tag.detached', options);
        });
    });

    model.related('tags').once('attaching', function tagsAttaching(collection, tags) {
        model.related('tags').once('attached', function tagsAttached(detachedCollection, response, options) {
            tags.forEach((tag) => {
                tag.emitChange('attached', options);
                model.emitChange('tag.attached', options);
            });
        });
    });

    model.related('authors').once('detaching', function authorsDetaching(collection, author) {
        model.related('authors').once('detached', function authorsDetached(detachedCollection, response, options) {
            author.emitChange('detached', options);
        });
    });

    model.related('authors').once('attaching', function authorsAttaching(collection, authors) {
        model.related('authors').once('attached', function authorsAttached(detachedCollection, response, options) {
            authors.forEach(author => author.emitChange('attached', options));
        });
    });
}
--------------------------------------------------------------------------------


Function 3: handleStatusForAttachedModels
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function handleStatusForAttachedModels(model, options) {
    model.related('tags').forEach((tag) => {
        tag.emitChange('attached', options);
    });

    model.related('authors').forEach((author) => {
        author.emitChange('attached', options);
    });
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T02:39:53.071Z
File: [3 files: TODO: Convert to DELETE, awaitable-messenger.ts, link-ms-user.tsx]
Functions Extracted: 2


Function 1: awaitResponse
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export function awaitResponse<
  MessageOut,
  MessageIn extends { type: string; value: Value; error: string },
  Value
>({
  messenger,
  message,
  onMessage
}: {
  messenger: Messenger<MessageOut>;
  message: MessageOut;
  onMessage: (
    response: MessageIn,
    onSuccess: (res: Value) => void,
    onFailure: (err: Error) => void
  ) => void;
}): Promise<Value> {
  return new Promise(
    (resolve: (res: Value) => void, reject: (err: Error) => void) => {
      const channel = new MessageChannel();
      // Additional logic to handle message channel and response
    }
  );
}
--------------------------------------------------------------------------------


Function 2: LinkMsUser
Language: TypeScript
Lines: 50
Full Code:
--------------------------------------------------------------------------------
function LinkMsUser({
  isSignedIn,
  msUsername,
  linkMsUsername,
  unlinkMsUsername,
  isProcessing,
  setIsProcessing
}: Props): JSX.Element {
  const { t } = useTranslation();
  const [msTranscriptUrl, setMsTranscriptUrl] = useState('');

  function handleLinkUsername(e: React.FormEvent) {
    e.preventDefault();
    setIsProcessing(true);
    linkMsUsername({ msTranscriptUrl });
  }

  function handleInputChange(e: React.ChangeEvent<HTMLInputElement>) {
    e.preventDefault();
    setMsTranscriptUrl(e.target.value);
  }

  const isValid = isMicrosoftTranscriptLink(msTranscriptUrl);
  const isPristine = msTranscriptUrl === '';
  const isDisabled = isProcessing || !isValid;
  const showWarning = !isPristine && !isValid;

  return !isSignedIn ? (
    // JSX for not signed in
  ) : msUsername ? (
    // JSX for linked account
  ) : (
    <div>
      // JSX for linking account
      <form onSubmit={handleLinkUsername}>
        <FormGroup validationState={isValid ? 'success' : 'error'}>
          <ControlLabel htmlFor='transcript-link'>
            <strong>{t('learn.ms.transcript-label')}</strong>
          </ControlLabel>
          <FormControl
            id='transcript-link'
            type='url'
            onChange={handleInputChange}
            placeholder='https://learn.microsoft.com/en-us/users/username/transcript/transcriptId'
          />
        </FormGroup>
        <Button
          disabled={isDisabled}
          block={true}
          variant='primary'
          onClick={handleLinkUsername}
        >
          {t('buttons.link-account')}
        </Button>
        {showWarning && (
          <HelpBlock>
            <Trans i18nKey='learn.ms.invalid-transcript'>
              placeholder <code>placeholder</code> placeholder
            </Trans>
          </HelpBlock>
        )}
      </form>
    </div>
  );
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T02:41:09.923Z
File: [8 files: Controller.php, UserFactory.php, DatabaseSeeder.php, vite.config.js, use Illuminate\Foundation\Testing\RefreshDatabase;, ExampleTest.php, }, 0001_01_01_000000_create_users_table.php]
Functions Extracted: 5


Function 1: definition
Language: PHP
Lines: 7
Full Code:
--------------------------------------------------------------------------------
public function definition(): array
{
    return [
        'name' => fake()->name(),
        'email' => fake()->unique()->safeEmail(),
        'email_verified_at' => now(),
        'password' => static::$password ??= Hash::make('password'),
        'remember_token' => Str::random(10),
    ];
}
--------------------------------------------------------------------------------


Function 2: unverified
Language: PHP
Lines: 5
Full Code:
--------------------------------------------------------------------------------
public function unverified(): static
{
    return $this->state(fn (array $attributes) => [
        'email_verified_at' => null,
    ]);
}
--------------------------------------------------------------------------------


Function 3: test_the_application_returns_a_successful_response
Language: PHP
Lines: 6
Full Code:
--------------------------------------------------------------------------------
public function test_the_application_returns_a_successful_response(): void
{
    $response = $this->get('/');

    $response->assertStatus(200);
}
--------------------------------------------------------------------------------


Function 4: up
Language: PHP
Lines: 15
Full Code:
--------------------------------------------------------------------------------
public function up(): void
{
    Schema::create('users', function (Blueprint $table) {
        $table->id();
        $table->string('name');
        $table->string('email')->unique();
        $table->timestamp('email_verified_at')->nullable();
        $table->string('password');
        $table->rememberToken();
        $table->timestamps();
    });

    Schema::create('password_reset_tokens', function (Blueprint $table) {
        $table->string('email')->primary();
        $table->string('token');
        $table->timestamp('created_at')->nullable();
    });

    Schema::create('sessions', function (Blueprint $table) {
        $table->string('id')->primary();
        $table->foreignId('user_id')->nullable()->index();
        $table->string('ip_address', 45)->nullable();
        $table->text('user_agent')->nullable();
        $table->longText('payload');
        $table->integer('last_activity')->index();
    });
}
--------------------------------------------------------------------------------


Function 5: down
Language: PHP
Lines: 5
Full Code:
--------------------------------------------------------------------------------
public function down(): void
{
    Schema::dropIfExists('users');
    Schema::dropIfExists('password_reset_tokens');
    Schema::dropIfExists('sessions');
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T02:43:58.137Z
File: [8 files: UpdateEmployeeComponent.jsx, EmployeeController.java, index.js, ResourceNotFoundException.java, CreateEmployeeComponent.jsx, 8 are considered localhost for IPv4., Employee.java, Service worker found. Proceed as normal.]
Functions Extracted: 2


Function 1: componentDidMount
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
componentDidMount(){
    EmployeeService.getEmployeeById(this.state.id).then( (res) =>{
        let employee = res.data;
        this.setState({firstName: employee.firstName,
            lastName: employee.lastName,
            emailId : employee.emailId
        });
    });
}
--------------------------------------------------------------------------------


Function 2: updateEmployee
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
updateEmployee = (e) => {
        e.preventDefault();
        let employee = {firstName: this.state.firstName, lastName: this.state.lastName, emailId: this.state.emailId};
        console.log('employee => ' + JSON.stringify(employee));
        console.log('id => ' + JSON.stringify(this.state.id));
        EmployeeService.updateEmployee(employee, this.state.id).then( res => {
            this.props.history.push('/employees');
        });
    }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T03:01:01.171Z
File: [2 files: index.test.tsx, hover.ts]
Functions Extracted: 1


Function 1: hover
Language: TypeScript
Lines: 37
Full Code:
--------------------------------------------------------------------------------
export function hover(
    elementOrSelector: ElementOrSelector,
    onHoverStart: OnHoverStartEvent,
    options: EventOptions = {}
): VoidFunction {
    const [elements, eventOptions, cancel] = setupGesture(
        elementOrSelector,
        options
    )

    const onPointerEnter = (enterEvent: PointerEvent) => {
        if (!isValidHover(enterEvent)) return

        const { target } = enterEvent
        const onHoverEnd = onHoverStart(target as Element, enterEvent)

        if (typeof onHoverEnd !== "function" || !target) return

        const onPointerLeave = (leaveEvent: PointerEvent) => {
            if (!isValidHover(leaveEvent)) return

            onHoverEnd(leaveEvent)
            target.removeEventListener(
                "pointerleave",
                onPointerLeave as EventListener
            )
        }

        target.addEventListener(
            "pointerleave",
            onPointerLeave as EventListener,
            eventOptions
        )
    }

    elements.forEach((element) => {
        element.addEventListener(
            "pointerenter",
            onPointerEnter as EventListener,
            eventOptions
        )
    })

    return cancel
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T03:01:14.672Z
File: motiondivision-motion-b5df740/packages/framer-motion/src/value/use-transform.ts
Functions Extracted: 2


Function 1: useTransform
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export function useTransform<I, O>(
    input:
        | MotionValue<I>
        | MotionValue<string>[]
        | MotionValue<number>[]
        | MotionValue<AnyResolvedKeyframe>[]
        | (() => O),
    inputRangeOrTransformer?: InputRange | Transformer<I, O>,
    outputRange?: O[],
    options?: TransformOptions<O>
): MotionValue<O> {
    if (typeof input === "function") {
        return useComputed(input)
    }

    const transformer =
        typeof inputRangeOrTransformer === "function"
            ? inputRangeOrTransformer
            : transform(inputRangeOrTransformer!, outputRange!, options)

    return Array.isArray(input)
        ? useListTransform(
              input,
              transformer as MultiTransformer<AnyResolvedKeyframe, O>
          )
        : useListTransform([input], ([latest]) =>
              (transformer as SingleTransformer<I, O>)(latest)
          )
}
--------------------------------------------------------------------------------


Function 2: useListTransform
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function useListTransform<I, O>(
    values: MotionValue<I>[],
    transformer: MultiTransformer<I, O>
): MotionValue<O> {
    const latest = useConstant<I[]>(() => [])

    return useCombineMotionValues(values, () => {
        latest.length = 0
        const numValues = values.length
        for (let i = 0; i < numValues; i++) {
            latest[i] = values[i].get()
        }

        return transformer(latest)
    })
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T03:08:11.499Z
File: Fire edited if this wasn't a change between resourceType
Functions Extracted: 3


Function 1: onDestroyed
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
async function onDestroyed(model, options) {
    ghostBookshelf.Model.prototype.onDestroyed.apply(this, arguments);

    if (model.previous('status') === 'published') {
        model.emitChange('unpublished', Object.assign({usePreviousAttribute: true}, options));
    }

    model.emitChange('deleted', Object.assign({usePreviousAttribute: true}, options));
}
--------------------------------------------------------------------------------


Function 2: handleAttachedModels
Language: JavaScript
Lines: 24
Full Code:
--------------------------------------------------------------------------------
function handleAttachedModels(model) {
    model.related('tags').once('detaching', function detachingTags(collection, tag) {
        model.related('tags').once('detached', function detachedTags(detachedCollection, response, options) {
            tag.emitChange('detached', options);
            model.emitChange('tag.detached', options);
        });
    });

    model.related('tags').once('attaching', function tagsAttaching(collection, tags) {
        model.related('tags').once('attached', function tagsAttached(detachedCollection, response, options) {
            tags.forEach((tag) => {
                tag.emitChange('attached', options);
                model.emitChange('tag.attached', options);
            });
        });
    });

    model.related('authors').once('detaching', function authorsDetaching(collection, author) {
        model.related('authors').once('detached', function authorsDetached(detachedCollection, response, options) {
            author.emitChange('detached', options);
        });
    });

    model.related('authors').once('attaching', function authorsAttaching(collection, authors) {
        model.related('authors').once('attached', function authorsAttached(detachedCollection, response, options) {
            authors.forEach(author => author.emitChange('attached', options));
        });
    });
}
--------------------------------------------------------------------------------


Function 3: handleStatusForAttachedModels
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function handleStatusForAttachedModels(model, options) {
    model.related('tags').forEach((tag) => {
        tag.emitChange('attached', options);
    });

    model.related('authors').forEach((author) => {
        author.emitChange('attached', options);
    });
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T03:08:25.588Z
File: TryGhost-Ghost-cf25add/ghost/core/core/server/services/tiers/Tier.js
Functions Extracted: 3


Function 1: updatePricing
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
updatePricing({currency, monthlyPrice, yearlyPrice}) {
        if (this.#type !== 'paid' && (currency || monthlyPrice || yearlyPrice)) {
            throw new ValidationError({
                message: 'Cannot set pricing for free tiers'
            });
        }

        const newCurrency = validateCurrency(currency, this.#type);
        const newMonthlyPrice = validateMonthlyPrice(monthlyPrice, this.#type);
        const newYearlyPrice = validateYearlyPrice(yearlyPrice, this.#type);

        if (newCurrency === this.#currency && newMonthlyPrice === this.#monthlyPrice && newYearlyPrice === this.#yearlyPrice) {
            return;
        }

        this.#currency = newCurrency;
        this.#monthlyPrice = newMonthlyPrice;
        this.#yearlyPrice = newYearlyPrice;

        this.events.push(TierPriceChangeEvent.create({
            tier: this
        }));
    }
--------------------------------------------------------------------------------


Function 2: toJSON
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
toJSON() {
        return {
            id: this.#id.toHexString(),
            slug: this.#slug,
            name: this.#name,
            description: this.#description,
            welcomePageURL: this.#welcomePageURL,
            status: this.#status,
            visibility: this.#visibility,
            type: this.#type,
            trialDays: this.#trialDays,
            currency: this.#currency,
            monthlyPrice: this.#monthlyPrice,
            yearlyPrice: this.#yearlyPrice,
            createdAt: this.#createdAt,
            updatedAt: this.#updatedAt,
            benefits: this.#benefits
        };
    }
--------------------------------------------------------------------------------


Function 3: create
Language: JavaScript
Lines: 42
Full Code:
--------------------------------------------------------------------------------
static async create(data) {
        let id;
        let isNew = false;
        if (!data.id) {
            isNew = true;
            id = new ObjectID();
        } else if (typeof data.id === 'string') {
            id = ObjectID.createFromHexString(data.id);
        } else if (data.id instanceof ObjectID) {
            id = data.id;
        } else {
            throw new ValidationError({
                message: 'Invalid ID provided for Tier'
            });
        }

        let name = validateName(data.name);

        let slug = validateSlug(data.slug);
        let description = validateDescription(data.description);
        let welcomePageURL = validateWelcomePageURL(data.welcomePageURL);
        let status = validateStatus(data.status || 'active');
        let visibility = validateVisibility(data.visibility || 'public');
        let type = validateType(data.type || 'paid');
        let currency = validateCurrency(data.currency || null, type);
        let trialDays = validateTrialDays(data.trialDays || 0, type);
        let monthlyPrice = validateMonthlyPrice(data.monthlyPrice || null, type);
        let yearlyPrice = validateYearlyPrice(data.yearlyPrice || null , type);
        let createdAt = validateCreatedAt(data.createdAt);
        let updatedAt = validateUpdatedAt(data.updatedAt);
        let benefits = validateBenefits(data.benefits);

        const tier = new Tier({
            id,
            slug,
            name,
            description,
            welcome_page_url: welcomePageURL,
            status,
            visibility,
            type,
            trial_days: trialDays,
            currency,
            monthly_price: monthlyPrice,
            yearly_price: yearlyPrice,
            created_at: createdAt,
            updated_at: updatedAt,
            benefits
        });

        if (isNew) {
            tier.events.push(TierCreatedEvent.create({tier}));
        }

        return tier;
    }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T03:08:32.626Z
File: TryGhost-Ghost-cf25add/apps/shade/src/components/ui/field.tsx
Functions Extracted: 6


Function 1: FieldSet
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function FieldSet({className, ...props}: React.ComponentProps<'fieldset'>) {
    return (
        <fieldset
            className={cn(
                'flex flex-col gap-6',
                'has-[>[data-slot=checkbox-group]]:gap-3 has-[>[data-slot=radio-group]]:gap-3',
                className
            )}
            data-slot="field-set"
            {...props}
        />
    );
}
--------------------------------------------------------------------------------


Function 2: FieldLegend
Language: TypeScript
Lines: 9
Full Code:
--------------------------------------------------------------------------------
function FieldLegend({
    className,
    variant = 'legend',
    ...props
}: React.ComponentProps<'legend'> & { variant?: 'legend' | 'label' }) {
    return (
        <legend
            className={cn(
                'mb-3 font-medium',
                'data-[variant=legend]:text-base',
                'data-[variant=label]:text-sm',
                className
            )}
            data-slot="field-legend"
            data-variant={variant}
            {...props}
        />
    );
}
--------------------------------------------------------------------------------


Function 3: FieldGroup
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function FieldGroup({className, ...props}: React.ComponentProps<'div'>) {
    return (
        <div
            className={cn(
                'group/field-group @container/field-group flex w-full flex-col gap-7 data-[slot=checkbox-group]:gap-3 [&>[data-slot=field-group]]:gap-4',
                className
            )}
            data-slot="field-group"
            {...props}
        />
    );
}
--------------------------------------------------------------------------------


Function 4: Field
Language: TypeScript
Lines: 9
Full Code:
--------------------------------------------------------------------------------
function Field({
    className,
    orientation = 'vertical',
    ...props
}: React.ComponentProps<'div'> & VariantProps<typeof fieldVariants>) {
    return (
        <div
            className={cn(fieldVariants({orientation}), className)}
            data-orientation={orientation}
            data-slot="field"
            role="group"
            {...props}
        />
    );
}
--------------------------------------------------------------------------------


Function 5: FieldContent
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function FieldContent({className, ...props}: React.ComponentProps<'div'>) {
    return (
        <div
            className={cn(
                'group/field-content flex flex-1 flex-col gap-1.5 leading-snug',
                className
            )}
            data-slot="field-content"
            {...props}
        />
    );
}
--------------------------------------------------------------------------------


Function 6: FieldError
Language: TypeScript
Lines: 21
Full Code:
--------------------------------------------------------------------------------
function FieldError({
    className,
    children,
    errors,
    ...props
}: React.ComponentProps<'div'> & {
    errors?: Array<{ message?: string } | undefined>
}) {
    const content = useMemo(() => {
        if (children) {
            return children;
        }

        if (!errors) {
            return null;
        }

        if (errors?.length === 1 && errors[0]?.message) {
            return errors[0].message;
        }

        return (
            <ul className="ml-4 flex list-disc flex-col gap-1">
                {errors.map(
                    error => error?.message && <li key={error.message}>{error.message}</li>
                )}
            </ul>
        );
    }, [children, errors]);

    if (!content) {
        return null;
    }

    return (
        <div
            className={cn('text-destructive text-sm font-normal', className)}
            data-slot="field-error"
            role="alert"
            {...props}
        >
            {content}
        </div>
    );
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T03:08:32.934Z
File: [2 files: bulk-operations.js, do nothing]
Functions Extracted: 7


Function 1: createBulkOperation
Language: JavaScript
Lines: 32
Full Code:
--------------------------------------------------------------------------------
function createBulkOperation(singular, multiple) {
    return async function (knex, table, data, options) {
        const result = {
            successful: 0,
            unsuccessful: 0,
            unsuccessfulData: [],
            errors: []
        };

        for (const chunkedData of _.chunk(data, CHUNK_SIZE)) {
            try {
                await multiple(knex, table, chunkedData, options);
                result.successful += chunkedData.length;
            } catch (errToIgnore) {
                if (options.throwErrors) {
                    throw errToIgnore;
                }
                for (const singularData of chunkedData) {
                    try {
                        await singular(knex, table, singularData, options);
                        result.successful += 1;
                    } catch (err) {
                        err.errorDetails = singularData;
                        result.errors.push(err);
                        result.unsuccessfulData.push(singularData);
                        result.unsuccessful += 1;
                    }
                }
            }
        }

        return result;
    };
}
--------------------------------------------------------------------------------


Function 2: insertSingle
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
async function insertSingle(knex, table, record, options) {
    let k = knex(table);
    if (options.transacting) {
        k = k.transacting(options.transacting);
    }
    await k.insert(record);
}
--------------------------------------------------------------------------------


Function 3: insertMultiple
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
async function insertMultiple(knex, table, chunk, options) {
    let k = knex(table);
    if (options.transacting) {
        k = k.transacting(options.transacting);
    }
    await k.insert(chunk);
}
--------------------------------------------------------------------------------


Function 4: editSingle
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
async function editSingle(knex, table, id, options) {
    let k = knex(table);
    if (options.transacting) {
        k = k.transacting(options.transacting);
    }
    await k.where(options.column ?? 'id', id).update(options.data);
}
--------------------------------------------------------------------------------


Function 5: editMultiple
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
async function editMultiple(knex, table, chunk, options) {
    let k = knex(table);
    if (options.transacting) {
        k = k.transacting(options.transacting);
    }
    await k.whereIn(options.column ?? 'id', chunk).update(options.data);
}
--------------------------------------------------------------------------------


Function 6: delSingle
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
async function delSingle(knex, table, id, options) {
    try {
        let k = knex(table);
        if (options.transacting) {
            k = k.transacting(options.transacting);
        }
        await k.where(options.column ?? 'id', id).del();
    } catch (err) {
        const importError = new errors.DataImportError({
            message: `Failed to remove entry from ${table}`,
            context: `Entry id: ${id}`,
            err: err
        });
        logging.error(importError);
        throw importError;
    }
}
--------------------------------------------------------------------------------


Function 7: delMultiple
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
async function delMultiple(knex, table, chunk, options) {
    let k = knex(table);
    if (options.transacting) {
        k = k.transacting(options.transacting);
    }
    await k.whereIn(options.column ?? 'id', chunk).del();
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T03:09:02.429Z
File: TryGhost-Ghost-cf25add/ghost/core/test/unit/server/models/post.test.js
Functions Extracted: 1


Function 1: extraFilters
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
extraFilters: function extraFilters(options) {
    const filter = new models.Post().extraFilters(options);
    return filter;
},
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T03:09:08.832Z
File: TryGhost-Ghost-cf25add/apps/portal/src/utils/helpers.js
Functions Extracted: 9


Function 1: getPortalLink
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
export function getPortalLink({page, siteUrl}) {
    const url = siteUrl || `${window.location.protocol}//${window.location.host}${window.location.pathname}`;
    const portalLinkPath = getPortalLinkPath({page});
    return `${url}${portalLinkPath}`;
}
--------------------------------------------------------------------------------


Function 2: getMemberSubscription
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
export function getMemberSubscription({member = {}}) {
    if (isPaidMember({member})) {
        const subscriptions = member.subscriptions || [];
        const activeSubscription = subscriptions.find((sub) => {
            return ['active', 'trialing', 'unpaid', 'past_due'].includes(sub.status);
        });
        if (!activeSubscription?.price && activeSubscription?.plan) {
            activeSubscription.price = activeSubscription.plan;
        }
        return activeSubscription;
    }
    return null;
}
--------------------------------------------------------------------------------


Function 3: getUpgradeProducts
Language: JavaScript
Lines: 11
Full Code:
--------------------------------------------------------------------------------
export function getUpgradeProducts({site, member}) {
    const activePrice = getMemberActivePrice({member});
    const activePriceCurrency = activePrice?.currency;
    const availableProducts = getAvailableProducts({site});
    if (!activePrice?.id) {
        return availableProducts;
    }
    return availableProducts.filter((product) => {
        return (isSameCurrency(getProductCurrency({product}), activePriceCurrency));
    });
}
--------------------------------------------------------------------------------


Function 4: getFilteredPrices
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
export function getFilteredPrices({prices, currency}) {
    return prices.filter((d) => {
        return isSameCurrency((d.currency || ''), (currency || ''));
    });
}
--------------------------------------------------------------------------------


Function 5: getPriceFromSubscription
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
export function getPriceFromSubscription({subscription}) {
    if (subscription && subscription.price) {
        return {
            ...subscription.price,
            stripe_price_id: subscription.price.id,
            id: subscription.price.price_id,
            price: subscription.price.amount / 100,
            name: subscription.price.nickname,
            tierId: subscription.tier?.id,
            cadence: subscription.price?.interval === 'month' ? 'month' : 'year',
            currency: subscription.price.currency.toLowerCase(),
            currency_symbol: getCurrencySymbol(subscription.price.currency)
        };
    }
    return null;
}
--------------------------------------------------------------------------------


Function 6: getMemberActiveProduct
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
export function getMemberActiveProduct({member, site}) {
    const subscription = getMemberSubscription({member});
    const price = getPriceFromSubscription({subscription});
    const allProducts = getAllProductsForSite({site});
    return allProducts.find((product) => {
        return product.id === price?.product.product_id;
    });
}
--------------------------------------------------------------------------------


Function 7: getCheckoutSessionDataFromPlanAttribute
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
export function getCheckoutSessionDataFromPlanAttribute(site, plan) {
    const products = getAvailableProducts({site});
    const defaultTier = products.find(p => p.type === 'paid');
    if (plan === 'monthly') {
        return {
            cadence: 'month',
            tierId: defaultTier.id
        };
    }
    if (plan === 'yearly') {
        return {
            cadence: 'year',
            tierId: defaultTier.id
        };
    }
    return {
        priceId: plan
    };
}
--------------------------------------------------------------------------------


Function 8: capitalize
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
export function capitalize(str) {
    if (typeof str !== 'string' || !str) {
        return '';
    }
    return str.charAt(0).toUpperCase() + str.slice(1);
}
--------------------------------------------------------------------------------


Function 9: transformApiSiteData
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export function transformApiSiteData({site}) {
    try {
        if (!site) {
            return null;
        }

        if (site.tiers) {
            site.products = site.tiers;
        }

        site.products = site.products?.map((product) => {
            return {
                ...product,
                monthlyPrice: product.monthly_price,
                yearlyPrice: product.yearly_price
            };
        });

        site.is_stripe_configured = !!site.paid_members_enabled;
    } catch (error) {
        console.error('Error transforming site data:', error);
    }
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T03:09:20.197Z
File: ms
Functions Extracted: 1


Function 1: format
Language: JavaScript
Lines: 61
Full Code:
--------------------------------------------------------------------------------
format(formatStr) {
    const locale = this.$locale()

    if (!this.isValid()) return locale.invalidDate || C.INVALID_DATE_STRING

    const str = formatStr || C.FORMAT_DEFAULT
    const zoneStr = Utils.z(this)
    const { $H, $m, $M } = this
    const {
        weekdays, months, meridiem
    } = locale
    const getShort = (arr, index, full, length) => (
        (arr && (arr[index] || arr(this, str))) || full[index].slice(0, length)
    )
    const get$H = num => (
        Utils.s($H % 12 || 12, num, '0')
    )

    const meridiemFunc = meridiem || ((hour, minute, isLowercase) => {
        const m = (hour < 12 ? 'AM' : 'PM')
        return isLowercase ? m.toLowerCase() : m
    })

    const matches = (match) => {
        switch (match) {
            case 'YY':
                return String(this.$y).slice(-2)
            case 'YYYY':
                return Utils.s(this.$y, 4, '0')
            case 'M':
                return $M + 1
            case 'MM':
                return Utils.s($M + 1, 2, '0')
            case 'MMM':
                return getShort(locale.monthsShort, $M, months, 3)
            case 'MMMM':
                return getShort(months, $M)
            case 'D':
                return this.$D
            case 'DD':
                return Utils.s(this.$D, 2, '0')
            case 'd':
                return String(this.$W)
            case 'dd':
                return getShort(locale.weekdaysMin, this.$W, weekdays, 2)
            case 'ddd':
                return getShort(locale.weekdaysShort, this.$W, weekdays, 3)
            case 'dddd':
                return weekdays[this.$W]
            case 'H':
                return String($H)
            case 'HH':
                return Utils.s($H, 2, '0')
            case 'h':
                return get$H(1)
            case 'hh':
                return get$H(2)
            case 'a':
                return meridiemFunc($H, $m, true)
            case 'A':
                return meridiemFunc($H, $m, false)
            case 'm':
                return String($m)
            case 'mm':
                return Utils.s($m, 2, '0')
            case 's':
                return String(this.$s)
            case 'ss':
                return Utils.s(this.$s, 2, '0')
            case 'SSS':
                return Utils.s(this.$ms, 3, '0')
            case 'Z':
                return zoneStr
        }
    }
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T03:09:39.253Z
File: TryGhost-Ghost-cf25add/ghost/core/core/server/services/tiers/Tier.js
Functions Extracted: 3


Function 1: create
Language: JavaScript
Lines: 42
Full Code:
--------------------------------------------------------------------------------
static async create(data) {
        let id;
        let isNew = false;
        if (!data.id) {
            isNew = true;
            id = new ObjectID();
        } else if (typeof data.id === 'string') {
            id = ObjectID.createFromHexString(data.id);
        } else if (data.id instanceof ObjectID) {
            id = data.id;
        } else {
            throw new ValidationError({
                message: 'Invalid ID provided for Tier'
            });
        }

        let name = validateName(data.name);

        let slug = validateSlug(data.slug);
        let description = validateDescription(data.description);
        let welcomePageURL = validateWelcomePageURL(data.welcomePageURL);
        let status = validateStatus(data.status || 'active');
        let visibility = validateVisibility(data.visibility || 'public');
        let type = validateType(data.type || 'paid');
        let currency = validateCurrency(data.currency || null, type);
        let trialDays = validateTrialDays(data.trialDays || 0, type);
        let monthlyPrice = validateMonthlyPrice(data.monthlyPrice || null, type);
        let yearlyPrice = validateYearlyPrice(data.yearlyPrice || null , type);
        let createdAt = validateCreatedAt(data.createdAt);
        let updatedAt = validateUpdatedAt(data.updatedAt);
        let benefits = validateBenefits(data.benefits);

        const tier = new Tier({
            id,
            slug,
            name,
            description,
            welcome_page_url: welcomePageURL,
            status,
            visibility,
            type,
            trial_days: trialDays,
            currency,
            monthly_price: monthlyPrice,
            yearly_price: yearlyPrice,
            created_at: createdAt,
            updated_at: updatedAt,
            benefits
        });

        if (isNew) {
            tier.events.push(TierCreatedEvent.create({tier}));
        }

        return tier;
    }
--------------------------------------------------------------------------------


Function 2: updatePricing
Language: JavaScript
Lines: 22
Full Code:
--------------------------------------------------------------------------------
updatePricing({currency, monthlyPrice, yearlyPrice}) {
        if (this.#type !== 'paid' && (currency || monthlyPrice || yearlyPrice)) {
            throw new ValidationError({
                message: 'Cannot set pricing for free tiers'
            });
        }

        const newCurrency = validateCurrency(currency, this.#type);
        const newMonthlyPrice = validateMonthlyPrice(monthlyPrice, this.#type);
        const newYearlyPrice = validateYearlyPrice(yearlyPrice, this.#type);

        if (newCurrency === this.#currency && newMonthlyPrice === this.#monthlyPrice && newYearlyPrice === this.#yearlyPrice) {
            return;
        }

        this.#currency = newCurrency;
        this.#monthlyPrice = newMonthlyPrice;
        this.#yearlyPrice = newYearlyPrice;

        this.events.push(TierPriceChangeEvent.create({
            tier: this
        }));
    }
--------------------------------------------------------------------------------


Function 3: toJSON
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
toJSON() {
        return {
            id: this.#id.toHexString(),
            slug: this.#slug,
            name: this.#name,
            description: this.#description,
            welcomePageURL: this.#welcomePageURL,
            status: this.#status,
            visibility: this.#visibility,
            type: this.#type,
            trialDays: this.#trialDays,
            currency: this.#currency,
            monthlyPrice: this.#monthlyPrice,
            yearlyPrice: this.#yearlyPrice,
            createdAt: this.#createdAt,
            updatedAt: this.#updatedAt,
            benefits: this.#benefits
        };
    }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T03:31:59.210Z
File: [8 files: auth.ts, logout.post.ts, author.mapper.ts, index.get.ts, index.get.ts, http-exception.model.ts, [id].put.ts, profile.utils.ts]
Functions Extracted: 4


Function 1: authorMapper
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
const authorMapper = (author: any, id?: number) => ({
  username: author.username,
  bio: author.bio,
  image: author.image,
  following: id
    ? author?.followedBy.some((followingUser: Partial<User>) => followingUser.id === id)
    : false,
});

export default authorMapper;
--------------------------------------------------------------------------------


Function 2: buildFindAllQuery
Language: TypeScript
Lines: 34
Full Code:
--------------------------------------------------------------------------------
const buildFindAllQuery = (query: any, auth: {id: number} | undefined) => {
    const queries: any = [];
    const orAuthorQuery = [];
    const andAuthorQuery = [];

    orAuthorQuery.push({
        demo: {
            equals: true,
        },
    });

    if (auth?.id) {
        orAuthorQuery.push({
            id: {
                equals: auth?.id,
            },
        });
    }

    if ('author' in query) {
        andAuthorQuery.push({
            username: {
                equals: query.author,
            },
        });
    }

    const authorQuery = {
        author: {
            OR: orAuthorQuery,
            AND: andAuthorQuery,
        },
    };

    queries.push(authorQuery);

    if ('tag' in query) {
        queries.push({
            tagList: {
                some: {
                    name: query.tag,
                },
            },
        });
    }

    if ('favorited' in query) {
        queries.push({
            favoritedBy: {
                some: {
                    username: {
                        equals: query.favorited,
                    },
                },
            },
        });
    }

    return queries;
};
--------------------------------------------------------------------------------


Function 3: definePrivateEventHandler
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export default definePrivateEventHandler(async (event, {auth}) => {
    const user = (await usePrisma().user.findUnique({
        where: {
            id: auth.id,
        },
        select: {
            id: true,
            email: true,
            username: true,
            bio: true,
            image: true,
        },
    })) as User;

    return {
        user: {
            ...user,
            token: useGenerateToken(user.id),
        }
    };
});
--------------------------------------------------------------------------------


Function 4: profileMapper
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
const profileMapper = (user: any, id: number | undefined): Profile => ({
  username: user.username,
  bio: user.bio,
  image: user.image,
  following: id
    ? user?.followedBy.some((followingUser: Partial<User>) => followingUser.id === id)
    : false,
});

export default profileMapper;
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T03:31:59.215Z
File: [8 files: env.d.ts, author.mapper.ts, article.mapper.ts, generate-token.ts, index.get.ts, foo.ts, index.get.ts, http-exception.model.ts]
Functions Extracted: 6


Function 1: authorMapper
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
const authorMapper = (author: any, id?: number) => ({
  username: author.username,
  bio: author.bio,
  image: author.image,
  following: id
    ? author?.followedBy.some((followingUser: Partial<User>) => followingUser.id === id)
    : false,
});

export default authorMapper;
--------------------------------------------------------------------------------


Function 2: articleMapper
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
const articleMapper = (article: any, id?: number) => ({
  slug: article.slug,
  title: article.title,
  description: article.description,
  body: article.body,
  tagList: article.tagList.map((tag: any) => tag.name),
  createdAt: article.createdAt,
  updatedAt: article.updatedAt,
  favorited: article.favoritedBy.some((item: any) => item.id === id),
  favoritesCount: article.favoritedBy.length,
  author: authorMapper(article.author, id),
});

export default articleMapper;
--------------------------------------------------------------------------------


Function 3: useGenerateToken
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
export const useGenerateToken = (id: number): string =>
    jwt.sign({user: {id}}, process.env.JWT_SECRET, {
        expiresIn: '60d',
    });
--------------------------------------------------------------------------------


Function 4: definePrivateEventHandler
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export default definePrivateEventHandler(async (event, {auth}) => {
    const username = getRouterParam(event, 'username');

    const profile = await usePrisma().user.findUnique({
        where: {
            username,
        },
        include: {
            followedBy: true,
        },
    });

    if (!profile) {
        throw new HttpException(404, {});
    }

    return {profile: profileMapper(profile, auth.id)};
}, {requireAuth: false});
--------------------------------------------------------------------------------


Function 5: definePrivateEventHandler
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export default definePrivateEventHandler(async (event, {auth}) => {
    const user = (await usePrisma().user.findUnique({
        where: {
            id: auth.id,
        },
        select: {
            id: true,
            email: true,
            username: true,
            bio: true,
            image: true,
        },
    })) as User;

    return {
        user: {
            ...user,
            token: useGenerateToken(user.id),
        }
    };
});
--------------------------------------------------------------------------------


Function 6: HttpException
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
class HttpException extends Error {
  errorCode: number;
  constructor(
    errorCode: number,
    public readonly message: string | any,
  ) {
    super(message);
    this.errorCode = errorCode;
  }
}

export default HttpException;
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T03:54:21.019Z
File: motiondivision-motion-b5df740/packages/framer-motion/src/gestures/drag/__tests__/index.test.tsx
Functions Extracted: 4


Function 1: onDragStart
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
const onDragStart = jest.fn();
const Component = () => (
    <MockDrag>
        <motion.div drag onDragStart={onDragStart} />
    </MockDrag>
);
--------------------------------------------------------------------------------


Function 2: onDragEnd
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
const onDragEnd = jest.fn();
const Component = () => (
    <MockDrag>
        <motion.div drag onDragEnd={onDragEnd} />
    </MockDrag>
);
--------------------------------------------------------------------------------


Function 3: Component
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
const Component = () => {
    const willChange = useWillChange();
    return (
        <MockDrag>
            <motion.div
                data-testid="draggable"
                drag="y"
                dragTransition={{
                    bounceStiffness: 100000,
                    bounceDamping: 100000,
                }}
                initial={{ x: 0 }}
                animate={{ x: 100 }}
                transition={{ duration: 5 }}
                style={{ willChange }}
            />
        </MockDrag>
    );
};
--------------------------------------------------------------------------------


Function 4: Component
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
const Component = () => {
    const [increment, setIncrement] = useState(1);

    return (
        <MockDrag>
            <motion.div
                drag
                onDragStart={() => {
                    count += increment;
                    setIncrement(2);
                }}
                onDrag={() => {
                    count += increment;
                }}
                onDragEnd={() => {
                    count += increment + 1;
                    onDragEnd.resolve();
                }}
            />
        </MockDrag>
    );
};
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T03:54:24.570Z
File: [2 files: use-transform.ts, subject.ts]
Functions Extracted: 2


Function 1: useTransform
Language: TypeScript
Lines: 20
Full Code:
--------------------------------------------------------------------------------
export function useTransform<I, O>(
    input:
        | MotionValue<I>
        | MotionValue<string>[]
        | MotionValue<number>[]
        | MotionValue<AnyResolvedKeyframe>[]
        | (() => O),
    inputRangeOrTransformer?: InputRange | Transformer<I, O>,
    outputRange?: O[],
    options?: TransformOptions<O>
): MotionValue<O> {
    if (typeof input === "function") {
        return useComputed(input)
    }

    const transformer =
        typeof inputRangeOrTransformer === "function"
            ? inputRangeOrTransformer
            : transform(inputRangeOrTransformer!, outputRange!, options)

    return Array.isArray(input)
        ? useListTransform(
              input,
              transformer as MultiTransformer<AnyResolvedKeyframe, O>
          )
        : useListTransform([input], ([latest]) =>
              (transformer as SingleTransformer<I, O>)(latest)
          )
}
--------------------------------------------------------------------------------


Function 2: animateSubject
Language: TypeScript
Lines: 48
Full Code:
--------------------------------------------------------------------------------
export function animateSubject<O extends Object>(
    subject:
        | MotionValue<number>
        | MotionValue<string>
        | number
        | string
        | ElementOrSelector
        | O
        | O[],
    keyframes:
        | number
        | string
        | UnresolvedValueKeyframe<number>[]
        | UnresolvedValueKeyframe<string>[]
        | DOMKeyframesDefinition
        | ObjectTarget<O>,
    options?:
        | ValueAnimationTransition<number>
        | ValueAnimationTransition<string>
        | DynamicAnimationOptions,
    scope?: AnimationScope
): AnimationPlaybackControlsWithThen[] {
    const animations: AnimationPlaybackControlsWithThen[] = []

    if (isSingleValue(subject, keyframes)) {
        animations.push(
            animateSingleValue(
                subject,
                isDOMKeyframes(keyframes)
                    ? (keyframes as any).default || keyframes
                    : keyframes,
                options ? (options as any).default || options : options
            )
        )
    } else {
        const subjects = resolveSubjects(
            subject,
            keyframes as DOMKeyframesDefinition,
            scope
        )

        const numSubjects = subjects.length

        invariant(
            Boolean(numSubjects),
            "No valid elements provided.",
            "no-valid-elements"
        )

        for (let i = 0; i < numSubjects; i++) {
            const thisSubject = subjects[i]

            invariant(
                thisSubject !== null,
                "You're trying to perform an animation on null. Ensure that selectors are correctly finding elements and refs are correctly hydrated.",
                "animate-null"
            )

            const createVisualElement =
                thisSubject instanceof Element
                    ? createDOMVisualElement
                    : createObjectVisualElement

            if (!visualElementStore.has(thisSubject)) {
                createVisualElement(thisSubject as any)
            }

            const visualElement = visualElementStore.get(thisSubject)!
            const transition = { ...options }

            if (
                "delay" in transition &&
                typeof transition.delay === "function"
            ) {
                transition.delay = transition.delay(i, numSubjects)
            }

            animations.push(
                ...animateTarget(
                    visualElement,
                    { ...(keyframes as {}), transition } as TargetAndTransition,
                    {}
                )
            )
        }
    }

    return animations
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T03:54:36.614Z
File: just allows us to look at the results of animations when everything has wrapped up
Functions Extracted: 5


Function 1: Component
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
const Component = () => {
    const animation = useAnimation();
    const x = useMotionValue(0);

    React.useEffect(() => {
        animation.start({ x: 100 });
    }, []);

    return (
        <motion.div
            animate={animation}
            style={{ x }}
            onAnimationComplete={() => resolve(x.get())}
        />
    );
}
--------------------------------------------------------------------------------


Function 2: Component
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
const Component = () => {
    const animation = useAnimation();
    const x = useMotionValue(0);
    const variants = {
        foo: { x: 200 },
    };

    useEffect(() => {
        animation.start("foo").then(() => resolve(x.get()));
    }, []);

    return (
        <motion.div
            variants={variants}
            animate={animation}
            style={{ x }}
        />
    );
}
--------------------------------------------------------------------------------


Function 3: Component
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
const Component = () => {
    const controls = useAnimation();
    const variants = {
        foo: { x: 100 },
    };

    const childVariants = {
        foo: { backgroundColor: "#fff" },
    };

    const x = useMotionValue(0);
    const backgroundColor = useMotionValue("#000");

    useEffect(() => {
        controls
            .start("foo")
            .then(() => resolve([x.get(), backgroundColor.get()]));
    }, []);

    return (
        <motion.div
            animate={controls}
            variants={variants}
            style={{ x }}
        >
            <motion.div
                variants={childVariants}
                style={{ backgroundColor }}
            />
        </motion.div>
    );
}
--------------------------------------------------------------------------------


Function 4: Component
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
const Component = () => {
    const xa = useMotionValue(0);
    const xb = useMotionValue(0);
    const controls = useAnimation();

    useEffect(() => {
        controls.set({ x: 1 });
        resolve([xa.get(), xb.get()]);
    });

    return (
        <>
            <motion.div animate={controls} style={{ x: xa }} />
            <motion.div animate={controls} style={{ x: xb }} />
        </>
    );
}
--------------------------------------------------------------------------------


Function 5: Component
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
const Component = () => {
    const xa = useMotionValue(0);
    const xb = useMotionValue(0);
    const controls = useAnimation();

    useEffect(() => {
        controls
            .start((custom) => {
                return { x: 1 * custom };
            })
            .then(() => {
                resolve([xa.get(), xb.get()]);
            });
    });

    return (
        <>
            <motion.div
                animate={controls}
                custom={1}
                style={{ x: xa }}
            />
            <motion.div
                animate={controls}
                custom={2}
                style={{ x: xb }}
            />
        </>
    );
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T03:56:26.229Z
File: greensock-GSAP-9f8eca1/esm/GSDevTools.js
Functions Extracted: 5


Function 1: _createElement
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function _createElement(type, container, cssText) {
  var element = _doc.createElementNS ? _doc.createElementNS(type === "svg" ? _svgNS : _domNS, type) : _doc.createElement(type);

  if (container) {
    if (_isString(container)) {
      container = _doc.querySelector(container);
    }

    container.appendChild(element);
  }

  if (type === "svg") {
    element.setAttribute("xmlns", _svgNS);
    element.setAttribute("xmlns:xlink", _domNS);
  }

  cssText && (element.style.cssText = cssText);
  return element;
}
--------------------------------------------------------------------------------


Function 2: _getChildrenOf
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function _getChildrenOf(timeline, includeTimelines) {
  var a = [],
      cnt = 0,
      Tween = gsap.core.Tween,
      tween = timeline._first;

  while (tween) {
    if (tween instanceof Tween) {
      if (tween.vars.id) {
        a[cnt++] = tween;
      }
    } else {
      if (includeTimelines && tween.vars.id) {
        a[cnt++] = tween;
      }

      a = a.concat(_getChildrenOf(tween, includeTimelines));
      cnt = a.length;
    }

    tween = tween._next;
  }

  return a;
}
--------------------------------------------------------------------------------


Function 3: _merge
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function _merge() {
  var t = _globalTimeline._first,
      duration,
      next,
      target;

  if (_rootInstance) {
    duration = _recordedRoot._dur;

    while (t) {
      next = t._next;
      target = t._targets && t._targets[0];

      if (!(_isFunction(target) && target === t.vars.onComplete && !t._dur) && !(target && target._gsIgnore)) {
        _recordedRoot.add(t, t._start - t._delay);
      }

      t = next;
    }

    return duration !== _recordedRoot.duration();
  }
}
--------------------------------------------------------------------------------


Function 4: _updateRootDuration
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function _updateRootDuration() {
  if (_rootInstance) {
    _rootInstance.update();

    _rootIsDirty = false;
  }

  gsap.ticker.remove(_updateRootDuration);
}
--------------------------------------------------------------------------------


Function 5: _buildPlayPauseMorph
Language: JavaScript
Lines: 20
Full Code:
--------------------------------------------------------------------------------
function _buildPlayPauseMorph(svg) {
  var tl = gsap.timeline({
    data: "root",
    parent: _independentRoot,
    onComplete: function onComplete() {
      return tl.kill();
    }
  }, _independentRoot._time);
  tl.to(svg.querySelector(".play-1"), {
    duration: 0.4,
    attr: {
      d: "M5.75,3.13 C5.75,9.79 5.75,16.46 5.75,23.13 4.08,23.13 2.41,23.13 0.75,23.13 0.75,16.46 0.75,9.79 0.75,3.12 2.41,3.12 4.08,3.12 5.75,3.12"
    },
    ease: "power2.inOut",
    rotation: 360,
    transformOrigin: "50% 50%"
  }).to(svg.querySelector(".play-2"), {
    duration: 0.4,
    attr: {
      d: "M16.38,3.13 C16.38,9.79 16.38,16.46 16.38,23.13 14.71,23.13 13.04,23.13 11.38,23.13 11.38,16.46 11.38,9.79 11.38,3.12 13.04,3.12 14.71,3.12 16.38,3.12"
    },
    ease: "power2.inOut",
    rotation: 360,
    transformOrigin: "50% 50%"
  }, 0.05);
  return tl;
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T03:57:42.745Z
File: [4 files: show.tsx, help-modal.tsx, social-icons.tsx, to make use of the Response object (message, status, etc)]
Functions Extracted: 5


Function 1: handleDownloadLink
Language: TypeScript
Lines: 30
Full Code:
--------------------------------------------------------------------------------
function handleDownloadLink(downloadLinks: string[]) {
    const win = downloadLinks.find(link => link.match(/\.exe/));
    const macARM = downloadLinks.find(
      link => link.match(/aarch64/) && link.match(/\.dmg/)
    );
    const macX64 = downloadLinks.find(
      link => link.match(/x64/) && link.match(/\.dmg/)
    );
    const linuxARM = downloadLinks.find(
      link => link.match(/aarch64/) && link.match(/tar\.gz/)
    );
    const linuxX64 = downloadLinks.find(
      link => link.match(/amd64/) && link.match(/AppImage/)
    );

    if (os.os === 'WIN') {
      if (isEmpty(win)) return '';

      return win;
    }

    if (os.os === 'MAC') {
      if (os.architecture.toLowerCase() === 'arm') {
        if (isEmpty(macARM)) return '';

        return macARM;
      } else {
        if (isEmpty(macX64)) return '';

        return macX64;
      }
    }

    if (os.os === 'LINUX') {
      if (os.architecture.toLowerCase() === 'arm') {
        if (isEmpty(linuxARM)) return '';

        return linuxARM;
      } else {
        if (isEmpty(linuxX64)) return '';

        return linuxX64;
      }
    }

    return '';
  }
--------------------------------------------------------------------------------


Function 2: checkLatestVersion
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
async function checkLatestVersion() {
      try {
        const response = await fetch(
          'https://api.github.com/repos/freeCodeCamp/exam-env/releases/latest'
        );
        if (response.ok) {
          const data = (await response.json()) as GitProps;
          const { tag_name, assets } = data;
          setLatestVersion(tag_name);
          const urls = assets.map(link => link.browser_download_url);
          setDownloadLink(handleDownloadLink(urls));
          setDownloadLinks(urls);
        }
      } catch {
        setLatestVersion('...');
      }
    }
--------------------------------------------------------------------------------


Function 3: generateSearchLink
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
export const generateSearchLink = (
  title: string,
  block: string,
  superBlock: string
) => {
  const titleText = t(`intro:${superBlock}.blocks.${block}.title`);
  const selector = 'in:title';
  const query = encodeURIComponent(`${titleText} - ${title} ${selector}`);

  const search = `${forumLocation}/search?q=${query}`;
  return search;
};
--------------------------------------------------------------------------------


Function 4: request
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
async function request<T>(
  method: 'POST' | 'PUT' | 'DELETE',
  path: string,
  body: unknown
): Promise<ResponseWithData<T>> {
  const options: RequestInit = {
    ...defaultOptions,
    method,
    headers: {
      'CSRF-Token': getCSRFToken(),
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(body)
  };

  const response = await fetch(`${base}${path}`, options);
  return combineDataWithResponse(response);
}
--------------------------------------------------------------------------------


Function 5: parseApiResponseToClientUser
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function parseApiResponseToClientUser(data: ApiUserResponse): User | null {
  const userData = data.user?.[data?.result ?? ''];
  let completedChallenges: CompletedChallenge[] = [];
  let savedChallenges: SavedChallenge[] = [];
  if (userData) {
    completedChallenges = mapFilesToChallengeFiles(
      userData.completedChallenges
    );
    savedChallenges = mapFilesToChallengeFiles(userData.savedChallenges);
  }
  return data.result
    ? { ...userData, completedChallenges, savedChallenges }
    : null;
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T04:07:00.454Z
File: [3 files: the API is ~stable, so this should be fine, This function has to be called initially., >]
Functions Extracted: 3


Function 1: init
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
export function init(opts: {
  ts: TypeScript
  info: tsModule.server.PluginCreateInfo
}) {
  const projectDir = opts.info.project.getCurrentDirectory()
  ts = opts.ts
  info = opts.info
  appDirRegExp = new RegExp(
    '^' + (projectDir + '(/src)?/app').replace(/[\/]/g, '[\/]')
  )

  log('Initialized Next.js TypeScript plugin: ' + projectDir)
}
--------------------------------------------------------------------------------


Function 2: getTypeChecker
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
export function getTypeChecker() {
  const program = info.languageService.getProgram()
  if (!program) {
    log('Failed to get program while while running getTypeChecker.')
    return
  }
  const typeChecker = program.getTypeChecker()
  if (!typeChecker) {
    log('Failed to get type checker while running getTypeChecker.')
    return
  }
  return typeChecker
}
--------------------------------------------------------------------------------


Function 3: connect
Language: TypeScript
Lines: 34
Full Code:
--------------------------------------------------------------------------------
export function connect({
  addMessageListener,
  sendMessage,
  onUpdateError = console.error,
}: ClientOptions) {
  addMessageListener((msg) => {
    switch (msg.type) {
      case 'turbopack-connected':
        handleSocketConnected(sendMessage)
        break
      default:
        try {
          if (Array.isArray(msg.data)) {
            for (let i = 0; i < msg.data.length; i++) {
              handleSocketMessage(msg.data[i] as ServerMessage)
            }
          } else {
            handleSocketMessage(msg.data as ServerMessage)
          }
          applyAggregatedUpdates()
        } catch (e: unknown) {
          console.warn(
            '[Fast Refresh] performing full reload\n\n' +
              "Fast Refresh will perform a full reload when you edit a file that's imported by modules outside of the React rendering tree.\n" +
              'You might have a file which exports a React component but also exports a value that is imported by a non-React component file.\n' +
              'Consider migrating the non-React component export to a separate file and importing it into both files.\n\n' +
              'It is also possible the parent component of the component you edited is a class component, which disables Fast Refresh.\n' +
              'Fast Refresh requires at least one parent function component in your React tree.'
          )
          onUpdateError(e)
          location.reload()
        }
        break
    }
  })

  const queued = globalThis.TURBOPACK_CHUNK_UPDATE_LISTENERS
  if (queued != null && !Array.isArray(queued)) {
    throw new Error('A separate HMR handler was already registered')
  }
  globalThis.TURBOPACK_CHUNK_UPDATE_LISTENERS = {
    push: ([chunkPath, callback]: [ChunkListPath, UpdateCallback]) => {
      subscribeToChunkUpdate(chunkPath, sendMessage, callback)
    },
  }

  if (Array.isArray(queued)) {
    for (const [chunkPath, callback] of queued) {
      subscribeToChunkUpdate(chunkPath, sendMessage, callback)
    }
  }
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T04:12:51.276Z
File: [2 files: help-modal.tsx, certification with projects.]
Functions Extracted: 4


Function 1: generateSearchLink
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
export const generateSearchLink = (title: string, block: string, superBlock: string) => {
  const titleText = t(`intro:${superBlock}.blocks.${block}.title`);
  const selector = 'in:title';
  const query = encodeURIComponent(`${titleText} - ${title} ${selector}`);

  const search = `${forumLocation}/search?q=${query}`;
  return search;
};
--------------------------------------------------------------------------------


Function 2: handleClaim
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
const handleClaim = (certSlug: keyof typeof certSlugTypeMap) => (e: MouseEvent<HTMLButtonElement>) => {
  e.preventDefault();

  return isHonest
    ? verifyCert(certSlug)
    : createFlashMessage(honestyInfoMessage);
};
--------------------------------------------------------------------------------


Function 3: initialiseState
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function initialiseState() {
  setProjectTitle('');
  setChallengeFiles(null);
  setSolution(null);
  setExamResults(null);
  setIsOpen(false);
}
--------------------------------------------------------------------------------


Function 4: getProjectSolution
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
const getProjectSolution = (projectId: string, projectTitle: string) => {
  const { completedChallenges, openModal } = props;
  const completedProject = find(completedChallenges, ({ id }) => projectId === id);
  if (!completedProject) {
    return null;
  }
  const { solution, challengeFiles, examResults } = completedProject;
  const showUserCode = () => {
    setProjectTitle(projectTitle);
    setChallengeFiles(challengeFiles);
    setSolution(solution);
    setIsOpen(true);
  };
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T04:12:59.072Z
File: freeCodeCamp-freeCodeCamp-dd08d1a/client/src/templates/Challenges/redux/completion-epic.js
Functions Extracted: 4


Function 1: postChallenge
Language: JavaScript
Lines: 43
Full Code:
--------------------------------------------------------------------------------
function postChallenge(update) {
  const {
    payload: { challengeType }
  } = update;
  const saveChallenge = postUpdate$(update).pipe(
    retry(3),
    switchMap(({ data }) => {
      const {
        type,
        completedDailyCodingChallenges,
        savedChallenges,
        message,
        examResults
      } = data;
      const payloadWithClientProperties = {
        ...omit(update.payload, ['files'])
      };
      if (update.payload.files) {
        payloadWithClientProperties.challengeFiles = update.payload.files.map(
          ({ key, ...rest }) => ({
            ...rest,
            fileKey: key
          })
        );
      }

      let actions = [
        submitComplete({
          submittedChallenge: payloadWithClientProperties,
          completedDailyCodingChallenges,
          savedChallenges: mapFilesToChallengeFiles(savedChallenges),
          examResults
        }),
        updateComplete(),
        submitChallengeComplete()
      ];

      if (
        type === 'error' ||
        (message && challengeType === challengeTypes.msTrophy)
      ) {
        actions = [];
        if (message) {
          actions.push(createFlashMessage(data));
        }
        actions.push(submitChallengeError());
      } else if (challengeType === challengeTypes.msTrophy) {
        actions.push(createFlashMessage(msTrophyVerified));
      }

      return of(...actions);
    }),
    catchError(() => of(updateFailed(update), submitChallengeError()))
  );
  return saveChallenge;
}
--------------------------------------------------------------------------------


Function 2: submitModern
Language: JavaScript
Lines: 36
Full Code:
--------------------------------------------------------------------------------
function submitModern(type, state) {
  const tests = challengeTestsSelector(state);
  if (tests.length === 0 || tests.every(test => test.pass && !test.err)) {
    if (type === actionTypes.checkChallenge) {
      return of({ type: 'this was a check challenge' });
    }

    if (type === actionTypes.submitChallenge) {
      const { id, block, challengeType } = challengeMetaSelector(state);

      let update;

      if (getIsDailyCodingChallenge(challengeType)) {
        const language = getDailyCodingChallengeLanguage(challengeType);

        const body = {
          id,
          challengeType,
          language
        };

        update = {
          endpoint: '/daily-coding-challenge-completed',
          payload: body
        };
      } else {
        const challengeFiles = challengeFilesSelector(state);

        let body;
        if (
          block === 'javascript-algorithms-and-data-structures-projects' ||
          canSaveToDB(challengeType)
        ) {
          body = standardizeRequestBody({ id, challengeType, challengeFiles });
        } else {
          body = {
            id,
            challengeType
          };
        }

        update = {
          endpoint: '/encoded/modern-challenge-completed',
          payload: body
        };
      }
      return postChallenge(update);
    }
  }
  return empty();
}
--------------------------------------------------------------------------------


Function 3: submitProject
Language: JavaScript
Lines: 31
Full Code:
--------------------------------------------------------------------------------
function submitProject(type, state) {
  if (type === actionTypes.checkChallenge) {
    return empty();
  }

  const { solution, githubLink } = projectFormValuesSelector(state);
  const { id, challengeType } = challengeMetaSelector(state);
  const { username } = userSelector(state);
  const challengeInfo = { id, challengeType, solution };
  if (challengeType === challengeTypes.backEndProject) {
    challengeInfo.githubLink = githubLink;
  }

  const update = {
    endpoint: '/project-completed',
    payload: challengeInfo
  };
  return postChallenge(update, username).pipe(
    concat(of(updateSolutionFormValues({})))
  );
}
--------------------------------------------------------------------------------


Function 4: submitBackendChallenge
Language: JavaScript
Lines: 31
Full Code:
--------------------------------------------------------------------------------
function submitBackendChallenge(type, state) {
  const tests = challengeTestsSelector(state);
  if (tests.length > 0 && tests.every(test => test.pass && !test.err)) {
    if (type === actionTypes.submitChallenge) {
      const { id } = challengeMetaSelector(state);
      const {
        solution: { value: solution }
      } = projectFormValuesSelector(state);
      const challengeInfo = { id, solution };

      const update = {
        endpoint: '/backend-challenge-completed',
        payload: challengeInfo
      };
      return postChallenge(update);
    }
  }
  return empty();
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T04:13:01.196Z
File: not being used to render anything
Functions Extracted: 1


Function 1: courseCompletionStatus
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
const courseCompletionStatus = () => {
  if (completedCount === 0) {
    return t('learn.not-started');
  }
  if (isBlockCompleted) {
    return t('learn.completed');
  }
  return `${percentageCompleted}% ${t('learn.completed')}`;
};
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T04:17:27.361Z
File: fastapi-fastapi-cd40c5b/docs_src/sql_databases/tutorial002_py310.py
Functions Extracted: 5


Function 1: create_hero
Language: Python
Lines: 9
Full Code:
--------------------------------------------------------------------------------
@app.post("/heroes/", response_model=HeroPublic)

def create_hero(hero: HeroCreate, session: Session = Depends(get_session)):
    db_hero = Hero.model_validate(hero)
    session.add(db_hero)
    session.commit()
    session.refresh(db_hero)
    return db_hero
--------------------------------------------------------------------------------


Function 2: read_heroes
Language: Python
Lines: 11
Full Code:
--------------------------------------------------------------------------------
@app.get("/heroes/", response_model=list[HeroPublic])

def read_heroes(
    session: Session = Depends(get_session),
    offset: int = 0,
    limit: int = Query(default=100, le=100),
):
    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()
    return heroes
--------------------------------------------------------------------------------


Function 3: read_hero
Language: Python
Lines: 9
Full Code:
--------------------------------------------------------------------------------
@app.get("/heroes/{hero_id}", response_model=HeroPublic)

def read_hero(hero_id: int, session: Session = Depends(get_session)):
    hero = session.get(Hero, hero_id)
    if not hero:
        raise HTTPException(status_code=404, detail="Hero not found")
    return hero
--------------------------------------------------------------------------------


Function 4: update_hero
Language: Python
Lines: 15
Full Code:
--------------------------------------------------------------------------------
@app.patch("/heroes/{hero_id}", response_model=HeroPublic)

def update_hero(
    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)
):
    hero_db = session.get(Hero, hero_id)
    if not hero_db:
        raise HTTPException(status_code=404, detail="Hero not found")
    hero_data = hero.model_dump(exclude_unset=True)
    hero_db.sqlmodel_update(hero_data)
    session.add(hero_db)
    session.commit()
    session.refresh(hero_db)
    return hero_db
--------------------------------------------------------------------------------


Function 5: delete_hero
Language: Python
Lines: 11
Full Code:
--------------------------------------------------------------------------------
@app.delete("/heroes/{hero_id}")

def delete_hero(hero_id: int, session: Session = Depends(get_session)):
    hero = session.get(Hero, hero_id)
    if not hero:
        raise HTTPException(status_code=404, detail="Hero not found")
    session.delete(hero)
    session.commit()
    return {"ok": True}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T04:23:45.097Z
File: [3 files: load-manifest.external.ts, context.ts, This keeps autocompletion working for static routes.]
Functions Extracted: 4


Function 1: loadManifest
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export function loadManifest<T extends object>(
  path: string,
  shouldCache: boolean = true,
  cache = sharedCache,
  skipParse = false
): T {
  const cached = shouldCache && cache.get(path);
  if (cached) {
    return cached as T;
  }

  let manifest: any = readFileSync(/* turbopackIgnore: true */ path, 'utf8');

  if (!skipParse) {
    manifest = JSON.parse(manifest);
  }
  const frozenManifest = deepFreeze(manifest);
  if (shouldCache) {
    cache.set(path, frozenManifest);
  }
  return frozenManifest;
}
--------------------------------------------------------------------------------


Function 2: clearAllModuleContexts
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
export async function clearAllModuleContexts() {
  intervalsManager.removeAll();
  timeoutsManager.removeAll();
  moduleContexts.clear();
  pendingModuleCaches.clear();
}
--------------------------------------------------------------------------------


Function 3: clearModuleContext
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
export async function clearModuleContext(path: string) {
  intervalsManager.removeAll();
  timeoutsManager.removeAll();

  const handleContext = (
    key: string,
    cache: ReturnType<(typeof moduleContexts)['get']>,
    context: typeof moduleContexts | typeof pendingModuleCaches
  ) => {
    if (cache?.paths.has(path)) {
      context.delete(key);
    }
  };

  for (const [key, cache] of moduleContexts) {
    handleContext(key, cache, moduleContexts);
  }
  for (const [key, cache] of pendingModuleCaches) {
    handleContext(key, await cache, pendingModuleCaches);
  }
}
--------------------------------------------------------------------------------


Function 4: generateValidatorFile
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
export function generateValidatorFile(
  routesManifest: RouteTypesManifest
): string {
  const generateValidations = (
    paths: string[],
    type:
      | 'AppPageConfig'
      | 'PagesPageConfig'
      | 'LayoutConfig'
      | 'RouteHandlerConfig'
      | 'ApiRouteConfig',
    pathToRouteMap?: Map<string, string>
  ) =>
    paths
      .sort();
  // Additional logic would be here
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T04:23:54.880Z
File: If we end up here, there was no work store or work unit store present.
Functions Extracted: 4


Function 1: makeHangingHeaders
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function makeHangingHeaders(
  workStore: WorkStore,
  prerenderStore: PrerenderStoreModern
): Promise<ReadonlyHeaders> {
  const cachedHeaders = CachedHeaders.get(prerenderStore);
  if (cachedHeaders) {
    return cachedHeaders;
  }

  const promise = makeHangingPromise<ReadonlyHeaders>(
    prerenderStore.renderSignal,
    workStore.route,
    '`headers()`'
  );
  CachedHeaders.set(prerenderStore, promise);

  return promise;
}
--------------------------------------------------------------------------------


Function 2: makeUntrackedHeadersWithDevWarnings
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function makeUntrackedHeadersWithDevWarnings(
  underlyingHeaders: ReadonlyHeaders,
  route: string | undefined,
  requestStore: RequestStore
): Promise<ReadonlyHeaders> {
  if (requestStore.asyncApiPromises) {
    const promise = requestStore.asyncApiPromises.headers;
    return instrumentHeadersPromiseWithDevWarnings(promise, route);
  }

  const cachedHeaders = CachedHeaders.get(underlyingHeaders);
  if (cachedHeaders) {
    return cachedHeaders;
  }

  const promise = makeDevtoolsIOAwarePromise(
    underlyingHeaders,
    requestStore,
    RenderStage.Runtime
  );

  const proxiedPromise = instrumentHeadersPromiseWithDevWarnings(promise, route);

  CachedHeaders.set(underlyingHeaders, proxiedPromise);

  return proxiedPromise;
}
--------------------------------------------------------------------------------


Function 3: instrumentHeadersPromiseWithDevWarnings
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function instrumentHeadersPromiseWithDevWarnings(
  promise: Promise<ReadonlyHeaders>,
  route: string | undefined
) {
  Object.defineProperties(promise, {
    [Symbol.iterator]: replaceableWarningDescriptorForSymbolIterator(
      promise,
      route
    ),
    append: replaceableWarningDescriptor(promise, 'append', route),
    delete: replaceableWarningDescriptor(promise, 'delete', route),
    get: replaceableWarningDescriptor(promise, 'get', route),
    has: replaceableWarningDescriptor(promise, 'has', route),
    set: replaceableWarningDescriptor(promise, 'set', route),
    getSetCookie: replaceableWarningDescriptor(promise, 'getSetCookie', route),
    forEach: replaceableWarningDescriptor(promise, 'forEach', route),
    keys: replaceableWarningDescriptor(promise, 'keys', route),
    values: replaceableWarningDescriptor(promise, 'values', route),
    entries: replaceableWarningDescriptor(promise, 'entries', route),
  });
  return promise;
}
--------------------------------------------------------------------------------


Function 4: createHeadersAccessError
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function createHeadersAccessError(
  route: string | undefined,
  expression: string
) {
  const prefix = route ? `Route "${route}" ` : 'This route ';
  return new Error(
    `${prefix}used ${expression}. ` +
      `\`headers()\` returns a Promise and must be unwrapped with \`await\` or \`React.use()\` before accessing its properties. ` +
      `Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis`
  );
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T05:54:39.193Z
File: [8 files: ResourceNotFoundException.java, FooterComponent.jsx, Employee.java, EmployeeController.java, ViewEmployeeComponent.jsx, Is not localhost. Just register service worker, EmployeeService.js, CreateEmployeeComponent.jsx]
Functions Extracted: 1


Function 1: componentDidMount
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
componentDidMount(){
        EmployeeService.getEmployeeById(this.state.id).then( res => {
            this.setState({employee: res.data});
        })
    }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T14:32:25.975Z
File: [2 files: index.js, errors.d.ts]
Functions Extracted: 3


Function 1: decode
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function decode(data) {
  const str = decode_base64(data);
  try {
    return JSON.parse(str);
  } catch(e) {
    return str;
  };
}
--------------------------------------------------------------------------------


Function 2: auth
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function auth(pusher, channel_name, socket_id) {
  const channel_data = {
    user_id: socket_id,
    user_info: {
      name: `Integration ${socket_id}`,
      email: `integration-${socket_id}@example.com`
    }
  };
  return pusher.authorizeChannel(socket_id, channel_name, channel_data);
}
--------------------------------------------------------------------------------


Function 3: start_app
Language: JavaScript
Lines: 20
Full Code:
--------------------------------------------------------------------------------
function start_app(port, pusher_config) {
  const app = express();

  app.use(express.json());
  app.use(express.urlencoded({extended: true}));

  const pusher = new Pusher(pusher_config);

  app.options('/auth', (req, res) => {
    res.set({
      'Allow': 'GET,POST,OPTIONS',
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Headers': 'Accepts,Content-Type'
    });
    res.sendStatus(200);
  });

  app.post('/auth', (req, res) => {
    const channel_name = req.body.channel_name;
    const socket_id = req.body.socket_id;
    res.set({
      'Allow': 'GET,POST,OPTIONS',
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Headers': 'Accepts,Content-Type',
      'Content-Type': 'application/json'
    });
    res.send(auth(pusher, channel_name, socket_id));
  });
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T14:40:00.860Z
File: [3 files: and disabling the 3 failing tests in safari, Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work, best_connected_ever_strategy.ts]
Functions Extracted: 3


Function 1: connect
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function connect(
  strategies: Strategy[],
  minPriority: number,
  callbackBuilder: Function
) {
  var runners = Collections.map(strategies, function(strategy, i, _, rs) {
    return strategy.connect(minPriority, callbackBuilder(i, rs));
  });
  return {
    abort: function() {
      Collections.apply(runners, abortRunner);
    },
    forceMinPriority: function(p) {
      Collections.apply(runners, function(runner) {
        runner.forceMinPriority(p);
      });
    }
  };
}
--------------------------------------------------------------------------------


Function 2: allRunnersFailed
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function allRunnersFailed(runners): boolean {
  return Collections.all(runners, function(runner) {
    return Boolean(runner.error);
  });
}
--------------------------------------------------------------------------------


Function 3: abortRunner
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function abortRunner(runner) {
  if (!runner.error && !runner.aborted) {
    runner.abort();
    runner.aborted = true;
  }
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T14:40:01.652Z
File: [5 files: errors.d.ts, jsonp_request.ts, collections.d.ts, best_connected_ever_strategy.ts, channels.ts]
Functions Extracted: 4


Function 1: send
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
send(receiver: ScriptReceiver) {
    if (this.request) {
      return;
    }

    var query = Collections.buildQueryString(this.data);
    var url = this.url + '/' + receiver.number + '?' + query;
    this.request = Runtime.createScriptRequest(url);
    this.request.send(receiver);
  }
--------------------------------------------------------------------------------


Function 2: connect
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function connect(
  strategies: Strategy[],
  minPriority: number,
  callbackBuilder: Function,
) {
  var runners = Collections.map(strategies, function (strategy, i, _, rs) {
    return strategy.connect(minPriority, callbackBuilder(i, rs));
  });
  return {
    abort: function () {
      Collections.apply(runners, abortRunner);
    },
    forceMinPriority: function (p) {
      Collections.apply(runners, function (runner) {
        runner.forceMinPriority(p);
      });
    },
  };
}
--------------------------------------------------------------------------------


Function 3: allRunnersFailed
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function allRunnersFailed(runners): boolean {
  return Collections.all(runners, function (runner) {
    return Boolean(runner.error);
  });
}
--------------------------------------------------------------------------------


Function 4: add
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
add(name: string, pusher: Pusher) {
    if (!this.channels[name]) {
      this.channels[name] = createChannel(name, pusher);
    }
    return this.channels[name];
  }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T15:03:29.637Z
File: [8 files: UpdateEmployeeComponent.jsx, ListEmployeeComponent.jsx, 8 are considered localhost for IPv4., CreateEmployeeComponent.jsx, SpringbootBackendApplication.java, Is not localhost. Just register service worker, ViewEmployeeComponent.jsx, HeaderComponent.js]
Functions Extracted: 2


Function 1: updateEmployee
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
updateEmployee = (e) => {
        e.preventDefault();
        let employee = {firstName: this.state.firstName, lastName: this.state.lastName, emailId: this.state.emailId};
        console.log('employee => ' + JSON.stringify(employee));
        console.log('id => ' + JSON.stringify(this.state.id));
        EmployeeService.updateEmployee(employee, this.state.id).then( res => {
            this.props.history.push('/employees');
        });
    }
--------------------------------------------------------------------------------


Function 2: registerValidSW
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function registerValidSW(swUrl, config) {
  navigator.serviceWorker
    .register(swUrl)
    .then(registration => {
      registration.onupdatefound = () => {
        const installingWorker = registration.installing;
        if (installingWorker == null) {
          return;
        }
        installingWorker.onstatechange = () => {
          if (installingWorker.state === 'installed') {
            if (navigator.serviceWorker.controller) {

--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T15:25:24.298Z
File: Make them available to the helpers.
Functions Extracted: 5


Function 1: readContext
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function readContext(Ctx) {
  const dispatcher =
    React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE
      .H;
  return dispatcher.readContext(Ctx);
}
--------------------------------------------------------------------------------


Function 2: App
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
const App = () => (
  <div>
    <Theme.Provider value="light">
      <Language.Provider value="english">
        <Theme.Provider value="dark">
          <Theme.Consumer>
            {theme => <div id="theme1">{theme}</div>}
          </Theme.Consumer>
        </Theme.Provider>
      </Language.Provider>
    </Theme.Provider>
    <Language.Consumer>
      {language => <div id="language3">{language}</div>}
    </Language.Consumer>
  </div>
);
--------------------------------------------------------------------------------


Function 3: Parent
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
class Parent extends React.Component {
  render() {
    return (
      <Theme.Provider value="light">
        <Child />
      </Theme.Provider>
    );
  }
}
--------------------------------------------------------------------------------


Function 4: Child
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function Child() {
  return (
    <Language.Provider value="english">
      <Grandchild />
    </Language.Provider>
  );
}
--------------------------------------------------------------------------------


Function 5: Grandchild
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
const Grandchild = props => {
  return (
    <div>
      <Theme.Consumer>
        {theme => <div id="theme">{theme}</div>}
      </Theme.Consumer>
      <Language.Consumer>
        {language => <div id="language">{language}</div>}
      </Language.Consumer>
    </div>
  );
};
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T15:41:06.845Z
File: django-django-6fcbbe0/tests/apps/query_performing_app/apps.py
Functions Extracted: 4


Function 1: _perform_query
Language: Python
Lines: 6
Full Code:
--------------------------------------------------------------------------------
def _perform_query(self):
        from ..models import TotallyNormal

        queryset = TotallyNormal.objects.using(self.database)
        queryset.update_or_create(name="new name")
        self.query_results = list(queryset.values_list("name"))
--------------------------------------------------------------------------------


Function 2: _perform_query
Language: Python
Lines: 6
Full Code:
--------------------------------------------------------------------------------
def _perform_query(self):
        connection = connections[self.database]
        with connection.cursor() as cursor:
            cursor.execute("SELECT 42" + connection.features.bare_select_suffix)
            self.query_results = cursor.fetchall()
--------------------------------------------------------------------------------


Function 3: _perform_query
Language: Python
Lines: 13
Full Code:
--------------------------------------------------------------------------------
def _perform_query(self):
        from ..models import TotallyNormal

        connection = connections[self.database]
        table_meta = TotallyNormal._meta
        with connection.cursor() as cursor:
            cursor.executemany(
                "INSERT INTO %s (%s) VALUES(%%s)"
                % (
                    connection.introspection.identifier_converter(table_meta.db_table),
                    connection.ops.quote_name(table_meta.get_field("name").column),
                ),
                [("test name 1",), ("test name 2",)],
            )
            self.query_results = []
--------------------------------------------------------------------------------


Function 4: _perform_query
Language: Python
Lines: 5
Full Code:
--------------------------------------------------------------------------------
def _perform_query(self):
        with connections[self.database].cursor() as cursor:
            cursor.callproc("test_procedure")
            self.query_results = []
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T15:41:23.007Z
File: django-django-6fcbbe0/django/apps/registry.py
Functions Extracted: 6


Function 1: populate
Language: Python
Lines: 39
Full Code:
--------------------------------------------------------------------------------
def populate(self, installed_apps=None):
        """
        Load application configurations and models.

        Import each application module and then each model module.

        It is thread-safe and idempotent, but not reentrant.
        """
        if self.ready:
            return

        with self._lock:
            if self.ready:
                return

            if self.loading:
                raise RuntimeError("populate() isn't reentrant")
            self.loading = True

            for entry in installed_apps:
                if isinstance(entry, AppConfig):
                    app_config = entry
                else:
                    app_config = AppConfig.create(entry)
                if app_config.label in self.app_configs:
                    raise ImproperlyConfigured(
                        "Application labels aren't unique, "
                        "duplicates: %s" % app_config.label
                    )

                self.app_configs[app_config.label] = app_config
                app_config.apps = self

            counts = Counter(
                app_config.name for app_config in self.app_configs.values()
            )
            duplicates = [name for name, count in counts.most_common() if count > 1]
            if duplicates:
                raise ImproperlyConfigured(
                    "Application names aren't unique, "
                    "duplicates: %s" % ", ".join(duplicates)
                )

            self.apps_ready = True

            for app_config in self.app_configs.values():
                app_config.import_models()

            self.clear_cache()

            self.models_ready = True

            for app_config in self.get_app_configs():
                app_config.ready()

            self.ready = True
            self.ready_event.set()
--------------------------------------------------------------------------------


Function 2: get_app_config
Language: Python
Lines: 15
Full Code:
--------------------------------------------------------------------------------
def get_app_config(self, app_label):
        """
        Import applications and returns an app config for the given label.

        Raise LookupError if no application exists with this label.
        """
        self.check_apps_ready()
        try:
            return self.app_configs[app_label]
        except KeyError:
            message = "No installed app with label '%s'." % app_label
            for app_config in self.get_app_configs():
                if app_config.name == app_label:
                    message += " Did you mean '%s'?" % app_config.label
                    break
            raise LookupError(message)
--------------------------------------------------------------------------------


Function 3: get_models
Language: Python
Lines: 17
Full Code:
--------------------------------------------------------------------------------
def get_models(self, include_auto_created=False, include_swapped=False):
        """
        Return a list of all installed models.

        By default, the following models aren't included:

        - auto-created models for many-to-many relations without
          an explicit intermediate table,
        - models that have been swapped out.

        Set the corresponding keyword argument to True to include such models.
        """
        self.check_models_ready()

        result = []
        for app_config in self.app_configs.values():
            result.extend(app_config.get_models(include_auto_created, include_swapped))
        return result
--------------------------------------------------------------------------------


Function 4: register_model
Language: Python
Lines: 24
Full Code:
--------------------------------------------------------------------------------
def register_model(self, app_label, model):
        model_name = model._meta.model_name
        app_models = self.all_models[app_label]
        if model_name in app_models:
            if (
                model.__name__ == app_models[model_name].__name__
                and model.__module__ == app_models[model_name].__module__
            ):
                warnings.warn(
                    "Model '%s.%s' was already registered. Reloading models is not "
                    "advised as it can lead to inconsistencies, most notably with "
                    "related models." % (app_label, model_name),
                    RuntimeWarning,
                    stacklevel=2,
                )
            else:
                raise RuntimeError(
                    "Conflicting '%s' models in application '%s': %s and %s." %
                    (model_name, app_label, app_models[model_name], model)
                )
        app_models[model_name] = model
        self.do_pending_operations(model)
        self.clear_cache()
--------------------------------------------------------------------------------


Function 5: lazy_model_operation
Language: Python
Lines: 25
Full Code:
--------------------------------------------------------------------------------
def lazy_model_operation(self, function, *model_keys):
        """
        Take a function and a number of ("app_label", "modelname") tuples, and
        when all the corresponding models have been imported and registered,
        call the function with the model classes as its arguments.

        The function passed to this method must accept exactly n models as
        arguments, where n=len(model_keys).
        """
        if not model_keys:
            function()
        else:
            next_model, *more_models = model_keys

            def apply_next_model(model):
                next_function = partial(apply_next_model.func, model)
                self.lazy_model_operation(next_function, *more_models)

            apply_next_model.func = function

            try:
                model_class = self.get_registered_model(*next_model)
            except LookupError:
                self._pending_operations[next_model].append(apply_next_model)
            else:
                apply_next_model(model_class)
--------------------------------------------------------------------------------


Function 6: do_pending_operations
Language: Python
Lines: 10
Full Code:
--------------------------------------------------------------------------------
def do_pending_operations(self, model):
        """
        Take a newly-prepared model and pass it to each function waiting for
        it. This is called at the very end of Apps.register_model().
        """
        key = model._meta.app_label, model._meta.model_name
        for function in self._pending_operations.pop(key, []):
            function(model)
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T16:40:01.161Z
File: [8 files: prisma.ts, auth.ts, index.get.ts, auth-event-handler.ts, foo.ts, comment.model.ts, env.d.ts, author.mapper.ts]
Functions Extracted: 3


Function 1: usePrisma
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
export const usePrisma = () => {
    if (!_prisma) {
        _prisma = new PrismaClient();
    }
    return _prisma;
}
--------------------------------------------------------------------------------


Function 2: definePrivateEventHandler
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
export function definePrivateEventHandler<T>(
    handler: (event: H3Event, cxt: PrivateContext) => T,
    options: { requireAuth: boolean } = {requireAuth: true}
) {
    return defineEventHandler(async (event) => {
        // Implementation details
    });
}
--------------------------------------------------------------------------------


Function 3: authorMapper
Language: JavaScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
const authorMapper = (author: any, id?: number) => ({
  username: author.username,
  bio: author.bio,
  image: author.image,
  following: id
    ? author?.followedBy.some((followingUser: Partial<User>) => followingUser.id === id)
    : false,
});

export default authorMapper;
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T16:47:11.506Z
File: Return directly if sync
Functions Extracted: 3


Function 1: finalizeProfiling
Language: TypeScript
Lines: 9
Full Code:
--------------------------------------------------------------------------------
function finalizeProfiling(key: string, start: [number, number], currentEntry: string[], completeProfiler: () => Promise<void>) {
  const elapsed = process.hrtime(start);
  const stats = (bucketStats[key] || (bucketStats[key] = {
    time: 0.0,
    count: 0,
    isOther: false,
  }));
  stats.time += elapsed[0] * 1000 + elapsed[1] / 1_000_000;
  stats.count++;
  currentEntry.pop();
  completeProfiler();
}
--------------------------------------------------------------------------------


Function 2: _runAsync
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
async function _runAsync<TResult>(bucket: string, f: () => TResult) {
    runningName = bucket;
    print(`(#${reportNum}) Profiling: ${runningName}`);
    start();
    try {
      return await time(bucket, f);
    } finally {
      report();
      reportNum++;
    }
  }
--------------------------------------------------------------------------------


Function 3: _runSync
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function _runSync<TResult>(bucket: string, f: () => TResult) {
    runningName = bucket;
    print(`(#${reportNum}) Profiling: ${runningName}`);
    start();
    try {
      return time(bucket, f);
    } finally {
      report();
      reportNum++;
    }
  }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T16:47:31.631Z
File: [2 files: and should probably keep doing so, but if we mess up, warn and continue., method call too.]
Functions Extracted: 4


Function 1: report
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function report() {
    if (! Profile.enabled) {
      return;
    }
    running = false;
    print('');
    setupReport();
    reportHierarchy();
    print('');
    reportHotLeaves();
    print('');
    print(`(#${reportNum}) Total: ${formatMs(getTopLevelTotal())}` +
          ` (${runningName})`);
    print('');
  }
--------------------------------------------------------------------------------


Function 2: reportOn
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function reportOn(entry: Entry, isLastLeafStack: boolean[] = []) {
  const stats = entryStats(entry);
  const isParent = hasSignificantChildren(entry);
  const name = entryName(entry);

  print((isParent ? leftRightDots : leftRightAlign)
        (printIndentation(isLastLeafStack) + name, formatMs(stats.time), 70)
        + (stats.isOther ? '' : (' (' + stats.count + ')')));

  if (isParent) {
    const childrenList = children(entry).filter(entry => {
      return entryStats(entry).time > filter;
    });
    childrenList.forEach((child, i) => {
      const isLastLeaf = i === childrenList.length - 1;
      reportOn(child, isLastLeafStack.concat(isLastLeaf));
    });
  }
}
--------------------------------------------------------------------------------


Function 3: registerClientLoginFunction
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
registerClientLoginFunction(funcName, func) {
    if (this._loginFuncs[funcName]) {
      throw new Error(`${funcName} has been defined already`);
    }
    this._loginFuncs[funcName] = func;
  }
--------------------------------------------------------------------------------


Function 4: callLoginFunction
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
callLoginFunction(funcName, ...funcArgs) {
    if (!this._loginFuncs[funcName]) {
      throw new Error(`${funcName} was not defined`);
    }
    return this._loginFuncs[funcName].apply(this, funcArgs);
  }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T16:58:52.136Z
File: meteor-meteor-6f48b86/packages/accounts-base/accounts-base.d.ts
Functions Extracted: 6


Function 1: createUser
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function createUser(
    options: {
      username?: string | undefined;
      email?: string | undefined;
      password?: string | undefined;
      profile?: Meteor.UserProfile | undefined;
    },
    callback?: (error?: Error | Meteor.Error | Meteor.TypedError) => void
  ): Promise<string>;
--------------------------------------------------------------------------------


Function 2: changePassword
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function changePassword(
    oldPassword: string,
    newPassword: string,
    callback?: (error?: Error | Meteor.Error | Meteor.TypedError) => void
  ): Promise<void>;
--------------------------------------------------------------------------------


Function 3: forgotPassword
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function forgotPassword(
    options: { email?: string | undefined },
    callback?: (error?: Error | Meteor.Error | Meteor.TypedError) => void
  ): Promise<void>;
--------------------------------------------------------------------------------


Function 4: resetPassword
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function resetPassword(
    token: string,
    newPassword: string,
    callback?: (error?: Error | Meteor.Error | Meteor.TypedError) => void
  ): Promise<void>;
--------------------------------------------------------------------------------


Function 5: sendEnrollmentEmail
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function sendEnrollmentEmail(
    userId: string,
    email?: string,
    extraTokenData?: Record<string, unknown>,
    extraParams?: Record<string, unknown>
  ): Promise<SendEmailResult>;
--------------------------------------------------------------------------------


Function 6: registerLoginHandler
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
function registerLoginHandler(
    handler: (options: any) => undefined | LoginMethodResult
  ): void;
  function registerLoginHandler(
    name: string,
    handler: (options: any) => undefined | LoginMethodResult
  ): void;
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T17:12:14.526Z
File: [2 files: Using plain Class.forName can cause problems., Anonymous class. Replace the whole `new Correspondence` with a Correspondence.from call.]
Functions Extracted: 2


Function 1: loadClass
Language: Java
Lines: 5
Full Code:
--------------------------------------------------------------------------------
private static Class<?> loadClass(String name) throws ClassNotFoundException {
    ClassLoader loader =
        firstNonNull(
            currentThread().getContextClassLoader(), StackTraceCleaner.class.getClassLoader());
    return loader.loadClass(name);
}
--------------------------------------------------------------------------------


Function 2: createStreakReplacementFrame
Language: Java
Lines: 7
Full Code:
--------------------------------------------------------------------------------
private static StackTraceElementWrapper createStreakReplacementFrame(
      StackFrameType stackFrameType, int length) {
    return new StackTraceElementWrapper(
        new StackTraceElement(
            "[["
                + stackFrameType.getName()
                + ": "
                + length
                + " frames collapsed ("
                + CLEANER_LINK
                + ")]]",
            "",
            "",
            0),
        stackFrameType);
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T17:12:19.254Z
File: code to check whether records should be considered equivalent for testing purposes
Functions Extracted: 2


Function 1: compare
Language: Java
Lines: 6
Full Code:
--------------------------------------------------------------------------------
@Override
public boolean compare(Number actual, Number expected) {
    double actualDouble = checkNotNull(actual).doubleValue();
    double expectedDouble = checkNotNull(expected).doubleValue();
    return equalWithinTolerance(actualDouble, expectedDouble, tolerance);
}
--------------------------------------------------------------------------------


Function 2: checkTolerance
Language: Java
Lines: 5
Full Code:
--------------------------------------------------------------------------------
private static void checkTolerance(double tolerance) {
    checkArgument(!Double.isNaN(tolerance), "tolerance cannot be NaN");
    checkArgument(Double.compare(tolerance, 0.0) >= 0, "tolerance (%s) cannot be negative", tolerance);
    checkArgument(tolerance != Double.POSITIVE_INFINITY, "tolerance cannot be POSITIVE_INFINITY");
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T17:12:20.559Z
File: google-truth-8d25ede/core/src/main/java/com/google/common/truth/PrimitiveFloatArraySubject.java
Functions Extracted: 2


Function 1: usingTolerance
Language: Java
Lines: 7
Full Code:
--------------------------------------------------------------------------------
public FloatArrayAsIterable usingTolerance(double tolerance) {
    if (actual == null) {
      failWithoutActual(simpleFact("cannot perform assertions on the contents of a null array"));
      return ignoreCheck().that(new float[0]).usingTolerance(tolerance);
    }
    return FloatArrayAsIterable.create(tolerance(tolerance), iterableSubject(actual));
  }
--------------------------------------------------------------------------------


Function 2: usingExactEquality
Language: Java
Lines: 7
Full Code:
--------------------------------------------------------------------------------
public FloatArrayAsIterable usingExactEquality() {
    if (actual == null) {
      failWithoutActual(simpleFact("cannot perform assertions on the contents of a null array"));
      return ignoreCheck().that(new float[0]).usingExactEquality();
    }
    return FloatArrayAsIterable.create(EXACT_EQUALITY_CORRESPONDENCE, iterableSubject(actual));
  }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T17:12:28.411Z
File: code to format the diff between the records
Functions Extracted: 2


Function 1: addCompareException
Language: Java
Lines: 8
Full Code:
--------------------------------------------------------------------------------
void addCompareException(
        Class<?> callingClass,
        Exception exception,
        @Nullable Object actual,
        @Nullable Object expected) {
      if (firstCompareException == null) {
        truncateStackTrace(exception, callingClass);
        firstCompareException =
            StoredException.create(exception, "compare", asList(actual, expected));
      }
    }
--------------------------------------------------------------------------------


Function 2: addFormatDiffException
Language: Java
Lines: 8
Full Code:
--------------------------------------------------------------------------------
void addFormatDiffException(
        Class<?> callingClass,
        Exception exception,
        @Nullable Object actual,
        @Nullable Object expected) {
      if (firstFormatDiffException == null) {
        truncateStackTrace(exception, callingClass);
        firstFormatDiffException =
            StoredException.create(exception, "formatDiff", asList(actual, expected));
      }
    }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T17:12:32.186Z
File: Each of these is overridden by a subclass:
Functions Extracted: 3


Function 1: visitEnd
Language: Java
Lines: 10
Full Code:
--------------------------------------------------------------------------------
public void visitEnd() {
      if (seenJump) {
        super.visitEnd();
        return;
      }
      ImmutableSetMultimap<Label, Integer> lineNumbersAtLabel = this.lineNumbersAtLabel.build();
      for (Entry<ImmutableList<Label>, StackEntry> e : actualValueAtLocation.build().entries()) {
        for (int lineNumber : lineNumbers(e.getKey(), lineNumbersAtLabel)) {
          actualValueAtLine.put(lineNumber, e.getValue());
        }
      }
      super.visitEnd();
    }
--------------------------------------------------------------------------------


Function 2: visitInsn
Language: Java
Lines: 15
Full Code:
--------------------------------------------------------------------------------
public void visitInsn(int opcode) {
      switch (opcode) {
        case Opcodes.NOP:
        case Opcodes.INEG:
        case Opcodes.LNEG:
        case Opcodes.FNEG:
        case Opcodes.DNEG:
        case Opcodes.I2B:
        case Opcodes.I2C:
        case Opcodes.I2S:
        case Opcodes.RETURN:
          break;
        // Additional cases omitted for brevity
        default:
          throw new RuntimeException("Unhandled opcode " + opcode);
      }
      super.visitInsn(opcode);
    }
--------------------------------------------------------------------------------


Function 3: visitVarInsn
Language: Java
Lines: 15
Full Code:
--------------------------------------------------------------------------------
public void visitVarInsn(int opcode, int var) {
      switch (opcode) {
        case Opcodes.ILOAD:
          push(InferredType.INT);
          break;
        // Additional cases omitted for brevity
        default:
          throw new RuntimeException("Unhandled opcode " + opcode);
      }
      super.visitVarInsn(opcode, var);
    }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T17:25:12.407Z
File: briannesbitt-Carbon-60356b1/src/Carbon/PHPStan/MacroMethodReflection.php
Functions Extracted: 2


Function 1: __construct
Language: PHP
Lines: 15
Full Code:
--------------------------------------------------------------------------------
public function __construct(
        ClassReflection $declaringClass,
        string $methodName,
        ParametersAcceptor $macroClosureType,
        bool $static,
        bool $final,
        bool $deprecated,
        ?string $docComment
    ) {
        $this->declaringClass = $declaringClass;
        $this->methodName = $methodName;
        $this->macroClosureType = $macroClosureType;
        $this->static = $static;
        $this->final = $final;
        $this->deprecated = $deprecated;
        $this->docComment = $docComment;
    }
--------------------------------------------------------------------------------


Function 2: isDeprecated
Language: PHP
Lines: 8
Full Code:
--------------------------------------------------------------------------------
public function isDeprecated(): TrinaryLogic
    {
        return TrinaryLogic::createFromBoolean(
            $this->deprecated ||
            preg_match('/@deprecated/i', $this->getDocComment() ?: '')
        );
    }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T17:25:23.606Z
File: You can specify precision among: minute, second, millisecond and microsecond
Functions Extracted: 4


Function 1: toArray
Language: PHP
Lines: 15
Full Code:
--------------------------------------------------------------------------------
public function toArray(): array {
        return [
            'year' => $this->year,
            'month' => $this->month,
            'day' => $this->day,
            'dayOfWeek' => $this->dayOfWeek,
            'dayOfYear' => $this->dayOfYear,
            'hour' => $this->hour,
            'minute' => $this->minute,
            'second' => $this->second,
            'micro' => $this->micro,
            'timestamp' => $this->timestamp,
            'formatted' => $this->rawFormat(\defined('static::DEFAULT_TO_STRING_FORMAT') ? static::DEFAULT_TO_STRING_FORMAT : CarbonInterface::DEFAULT_TO_STRING_FORMAT),
            'timezone' => $this->timezone,
        ];
    }
--------------------------------------------------------------------------------


Function 2: toISOString
Language: PHP
Lines: 12
Full Code:
--------------------------------------------------------------------------------
public function toISOString(bool $keepOffset = false): ?string {
        if (!$this->isValid()) {
            return null;
        }

        $yearFormat = $this->year < 0 || $this->year > 9999 ? 'YYYYYY' : 'YYYY';
        $timezoneFormat = $keepOffset ? 'Z' : '[Z]';
        $date = $keepOffset ? $this : $this->avoidMutation()->utc();

        return $date->isoFormat("$yearFormat-MM-DD[T]HH:mm:ss.SSSSSS$timezoneFormat");
    }
--------------------------------------------------------------------------------


Function 3: toDateTime
Language: PHP
Lines: 5
Full Code:
--------------------------------------------------------------------------------
public function toDateTime(): DateTime {
        return DateTime::createFromFormat('U.u', $this->rawFormat('U.u'))
            ->setTimezone($this->getTimezone());
    }
--------------------------------------------------------------------------------


Function 4: toPeriod
Language: PHP
Lines: 15
Full Code:
--------------------------------------------------------------------------------
public function toPeriod($end = null, $interval = null, $unit = null): CarbonPeriod {
        if ($unit) {
            $interval = CarbonInterval::make("$interval ".static::pluralUnit($unit));
        }

        $isDefaultInterval = !$interval;
        $interval ??= CarbonInterval::day();
        $class = $this->isMutable() ? CarbonPeriod::class : CarbonPeriodImmutable::class;

        if (\is_int($end) || (\is_string($end) && ctype_digit($end))) {
            $end = (int) $end;
        }

        $end ??= 1;

        if (!\is_int($end)) {
            $end = $this->resolveCarbon($end);
        }

        return new $class(
            raw: [$this, CarbonInterval::make($interval), $end],
            dateClass: static::class,
            isDefaultInterval: $isDefaultInterval,
        );
    }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T17:50:58.308Z
File: method call too.
Functions Extracted: 4


Function 1: registerClientLoginFunction
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
registerClientLoginFunction(funcName, func) {
    if (this._loginFuncs[funcName]) {
      throw new Error(`${funcName} has been defined already`);
    }
    this._loginFuncs[funcName] = func;
  }
--------------------------------------------------------------------------------


Function 2: callLoginFunction
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
callLoginFunction(funcName, ...funcArgs) {
    if (!this._loginFuncs[funcName]) {
      throw new Error(`${funcName} was not defined`);
    }
    return this._loginFuncs[funcName].apply(this, funcArgs);
  }
--------------------------------------------------------------------------------


Function 3: applyLoginFunction
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
applyLoginFunction(funcName, funcArgs) {
    if (!this._loginFuncs[funcName]) {
      throw new Error(`${funcName} was not defined`);
    }
    return this._loginFuncs[funcName].apply(this, funcArgs);
  }
--------------------------------------------------------------------------------


Function 4: logout
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
logout(callback) {
    this._loggingOut.set(true);

    this.connection.applyAsync('logout', [], {
      // Additional code omitted for brevity
    });
  }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T17:51:02.859Z
File: meteor-meteor-6f48b86/packages/accounts-base/accounts-base.d.ts
Functions Extracted: 4


Function 1: createUser
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function createUser(
    options: {
      username?: string | undefined;
      email?: string | undefined;
      password?: string | undefined;
      profile?: Meteor.UserProfile | undefined;
    },
    callback?: (error?: Error | Meteor.Error | Meteor.TypedError) => void
  ): Promise<string>;
--------------------------------------------------------------------------------


Function 2: changePassword
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function changePassword(
    oldPassword: string,
    newPassword: string,
    callback?: (error?: Error | Meteor.Error | Meteor.TypedError) => void
  ): Promise<void>;
--------------------------------------------------------------------------------


Function 3: forgotPassword
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function forgotPassword(
    options: { email?: string | undefined },
    callback?: (error?: Error | Meteor.Error | Meteor.TypedError) => void
  ): Promise<void>;
--------------------------------------------------------------------------------


Function 4: sendEnrollmentEmail
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function sendEnrollmentEmail(
    userId: string,
    email?: string,
    extraTokenData?: Record<string, unknown>,
    extraParams?: Record<string, unknown>
  ): Promise<SendEmailResult>;
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T17:51:16.836Z
File: [2 files: meteor.d.ts, and should probably keep doing so, but if we mess up, warn and continue.]
Functions Extracted: 3


Function 1: report
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function report() {
    if (! Profile.enabled) {
      return;
    }
    running = false;
    print('');
    setupReport();
    reportHierarchy();
    print('');
    reportHotLeaves();
    print('');
    print(`(#${reportNum}) Total: ${formatMs(getTopLevelTotal())}` +
          ` (${runningName})`);
    print('');
  }
--------------------------------------------------------------------------------


Function 2: reportOn
Language: JavaScript
Lines: 14
Full Code:
--------------------------------------------------------------------------------
function reportOn(entry: Entry, isLastLeafStack: boolean[] = []) {
    const stats = entryStats(entry);
    const isParent = hasSignificantChildren(entry);
    const name = entryName(entry);

    print((isParent ? leftRightDots : leftRightAlign)
          (printIndentation(isLastLeafStack) + name, formatMs(stats.time), 70)
          + (stats.isOther ? '' : (' (' + stats.count + ')')));

    if (isParent) {
      const childrenList = children(entry).filter(entry => {
        return entryStats(entry).time > filter;
      });
      childrenList.forEach((child, i) => {
        const isLastLeaf = i === childrenList.length - 1;
        reportOn(child, isLastLeafStack.concat(isLastLeaf));
      });
    }
  }
--------------------------------------------------------------------------------


Function 3: reportHotLeaves
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function reportHotLeaves() {
    print('Top leaves:');

    const totals = allLeafs().map(leaf => {
      const info = leafTotals(leaf);
      return {
        name: leaf,
        time: info.time,
        count: info.count,
      };
    }).sort((a, b) => {
      return a.time === b.time ? 0 : a.time > b.time ? -1 : 1;
    });

    totals.forEach(total => {
      if (total.time < 100) {
        //...
      }
    });
  }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T19:02:39.958Z
File: freeCodeCamp-freeCodeCamp-380003c/client/src/templates/Challenges/components/help-modal.tsx
Functions Extracted: 2


Function 1: generateSearchLink
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
export const generateSearchLink = (
  title: string,
  block: string,
  superBlock: string
) => {
  const titleText = t(`intro:${superBlock}.blocks.${block}.title`);
  const selector = 'in:title';
  const query = encodeURIComponent(`${titleText} - ${title} ${selector}`);

  const search = `${forumLocation}/search?q=${query}`;
  return search;
};
--------------------------------------------------------------------------------


Function 2: Checkbox
Language: TypeScript
Lines: 13
Full Code:
--------------------------------------------------------------------------------
function Checkbox({
  name,
  i18nKey,
  onChange,
  value,
  href,
  label
}: CheckboxProps) {
  const { t } = useTranslation();

  return (
    <div className='checkbox-container'>
      <input
        id={name}
        name={name}
        type='checkbox'
        onChange={onChange}
        checked={value}
        required
      />
      <label htmlFor={name}>{t(i18nKey)}</label>
      <a href={href}>{label}</a>
    </div>
  );
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T19:10:48.058Z
File: google-gson-569279f/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java
Functions Extracted: 2


Function 1: registerSubtype
Language: Java
Lines: 8
Full Code:
--------------------------------------------------------------------------------
public RuntimeTypeAdapterFactory<T> registerSubtype(Class<? extends T> type, String label) {
    if (type == null || label == null) {
        throw new NullPointerException();
    }
    if (subtypeToLabel.containsKey(type) || labelToSubtype.containsKey(label)) {
        throw new IllegalArgumentException("types and labels must be unique");
    }
    labelToSubtype.put(label, type);
    subtypeToLabel.put(type, label);
    return this;
}
--------------------------------------------------------------------------------


Function 2: create
Language: Java
Lines: 30
Full Code:
--------------------------------------------------------------------------------
@Override
public <R> TypeAdapter<R> create(Gson gson, TypeToken<R> type) {
    if (type == null) {
        return null;
    }
    Class<?> rawType = type.getRawType();
    boolean handle = recognizeSubtypes ? baseType.isAssignableFrom(rawType) : baseType.equals(rawType);
    if (!handle) {
        return null;
    }

    TypeAdapter<JsonElement> jsonElementAdapter = gson.getAdapter(JsonElement.class);
    Map<String, TypeAdapter<?>> labelToDelegate = new LinkedHashMap<>();
    Map<Class<?>, TypeAdapter<?>> subtypeToDelegate = new LinkedHashMap<>();
    for (Map.Entry<String, Class<?>> entry : labelToSubtype.entrySet()) {
        TypeAdapter<?> delegate = gson.getDelegateAdapter(this, TypeToken.get(entry.getValue()));
        labelToDelegate.put(entry.getKey(), delegate);
        subtypeToDelegate.put(entry.getValue(), delegate);
    }

    return new TypeAdapter<R>() {
        @Override
        public R read(JsonReader in) throws IOException {
            JsonElement jsonElement = jsonElementAdapter.read(in);
            JsonElement labelJsonElement;
            if (maintainType) {
                labelJsonElement = jsonElement.getAsJsonObject().get(typeFieldName);
            } else {
                labelJsonElement = jsonElement.getAsJsonObject().remove(typeFieldName);
            }

            if (labelJsonElement == null) {
                throw new JsonParseException(
                    "cannot deserialize " + baseType + " because it does not define a field named " + typeFieldName);
            }
            String label = labelJsonElement.getAsString();
            @SuppressWarnings("unchecked")
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T19:10:48.207Z
File: google-gson-569279f/gson/src/main/java/com/google/gson/ReflectionAccessFilter.java
Functions Extracted: 4


Function 1: BLOCK_INACCESSIBLE_JAVA
Language: Java
Lines: 8
Full Code:
--------------------------------------------------------------------------------
ReflectionAccessFilter BLOCK_INACCESSIBLE_JAVA = new ReflectionAccessFilter() {
    @Override
    public FilterResult check(Class<?> rawClass) {
        return ReflectionAccessFilterHelper.isJavaType(rawClass)
            ? FilterResult.BLOCK_INACCESSIBLE
            : FilterResult.INDECISIVE;
    }

    @Override
    public String toString() {
        return "ReflectionAccessFilter#BLOCK_INACCESSIBLE_JAVA";
    }
};
--------------------------------------------------------------------------------


Function 2: BLOCK_ALL_JAVA
Language: Java
Lines: 8
Full Code:
--------------------------------------------------------------------------------
ReflectionAccessFilter BLOCK_ALL_JAVA = new ReflectionAccessFilter() {
    @Override
    public FilterResult check(Class<?> rawClass) {
        return ReflectionAccessFilterHelper.isJavaType(rawClass)
            ? FilterResult.BLOCK_ALL
            : FilterResult.INDECISIVE;
    }

    @Override
    public String toString() {
        return "ReflectionAccessFilter#BLOCK_ALL_JAVA";
    }
};
--------------------------------------------------------------------------------


Function 3: BLOCK_ALL_ANDROID
Language: Java
Lines: 8
Full Code:
--------------------------------------------------------------------------------
ReflectionAccessFilter BLOCK_ALL_ANDROID = new ReflectionAccessFilter() {
    @Override
    public FilterResult check(Class<?> rawClass) {
        return ReflectionAccessFilterHelper.isAndroidType(rawClass)
            ? FilterResult.BLOCK_ALL
            : FilterResult.INDECISIVE;
    }

    @Override
    public String toString() {
        return "ReflectionAccessFilter#BLOCK_ALL_ANDROID";
    }
};
--------------------------------------------------------------------------------


Function 4: BLOCK_ALL_PLATFORM
Language: Java
Lines: 8
Full Code:
--------------------------------------------------------------------------------
ReflectionAccessFilter BLOCK_ALL_PLATFORM = new ReflectionAccessFilter() {
    @Override
    public FilterResult check(Class<?> rawClass) {
        return ReflectionAccessFilterHelper.isAnyPlatformType(rawClass)
            ? FilterResult.BLOCK_ALL
            : FilterResult.INDECISIVE;
    }

    @Override
    public String toString() {
        return "ReflectionAccessFilter#BLOCK_ALL_PLATFORM";
    }
};
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T19:11:03.552Z
File: For backward compatibility change to LENIENT if writer has default strictness LEGACY_STRICT
Functions Extracted: 3


Function 1: newJsonWriter
Language: Java
Lines: 12
Full Code:
--------------------------------------------------------------------------------
public JsonWriter newJsonWriter(Writer writer) throws IOException {
    if (generateNonExecutableJson) {
      writer.write(JSON_NON_EXECUTABLE_PREFIX);
    }
    JsonWriter jsonWriter = new JsonWriter(writer);
    jsonWriter.setFormattingStyle(formattingStyle);
    jsonWriter.setHtmlSafe(htmlSafe);
    jsonWriter.setStrictness(strictness == null ? Strictness.LEGACY_STRICT : strictness);
    jsonWriter.setSerializeNulls(serializeNulls);
    return jsonWriter;
  }
--------------------------------------------------------------------------------


Function 2: fromJson
Language: Java
Lines: 8
Full Code:
--------------------------------------------------------------------------------
public <T> T fromJson(String json, TypeToken<T> typeOfT) throws JsonSyntaxException {
    if (json == null) {
      return null;
    }
    StringReader reader = new StringReader(json);
    return fromJson(reader, typeOfT);
  }
--------------------------------------------------------------------------------


Function 3: fromJson
Language: Java
Lines: 9
Full Code:
--------------------------------------------------------------------------------
public <T> T fromJson(Reader json, TypeToken<T> typeOfT) throws JsonIOException, JsonSyntaxException {
    JsonReader jsonReader = newJsonReader(json);
    T object = fromJson(jsonReader, typeOfT);
    assertFullConsumption(object, jsonReader);
    return object;
  }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T21:37:15.565Z
File: };
Functions Extracted: 6


Function 1: findComp
Language: JavaScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
function findComp(id, comps) {
            var i = 0;
            var len = comps.length;
            while (i < len) {
              if (comps[i].id === id) {
                return comps[i];
              }
              i += 1;
            }
            return null;
          }
--------------------------------------------------------------------------------


Function 2: findCompLayers
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function findCompLayers(id, comps) {
            var comp = findComp(id, comps);
            if (comp) {
              if (!comp.layers.__used) {
                comp.layers.__used = true;
                return comp.layers;
              }
              return JSON.parse(JSON.stringify(comp.layers));
            }
            return null;
          }
--------------------------------------------------------------------------------


Function 3: completeShapes
Language: JavaScript
Lines: 20
Full Code:
--------------------------------------------------------------------------------
function completeShapes(arr) {
            var i;
            var len = arr.length;
            var j;
            var jLen;
            for (i = len - 1; i >= 0; i -= 1) {
              if (arr[i].ty === 'sh') {
                if (arr[i].ks.k.i) {
                  convertPathsToAbsoluteValues(arr[i].ks.k);
                } else {
                  jLen = arr[i].ks.k.length;
                  for (j = 0; j < jLen; j += 1) {
                    if (arr[i].ks.k[j].s) {
                      convertPathsToAbsoluteValues(arr[i].ks.k[j].s[0]);
                    }
                    if (arr[i].ks.k[j].e) {
                      convertPathsToAbsoluteValues(arr[i].ks.k[j].e[0]);
                    }
                  }
                }
              } else if (arr[i].ty === 'gr') {
                completeShapes(arr[i].it);
              }
            }
          }
--------------------------------------------------------------------------------


Function 4: convertPathsToAbsoluteValues
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function convertPathsToAbsoluteValues(path) {
            var i;
            var len = path.i.length;
            for (i = 0; i < len; i += 1) {
              path.i[i][0] += path.v[i][0];
              path.i[i][1] += path.v[i][1];
              path.o[i][0] += path.v[i][0];
              path.o[i][1] += path.v[i][1];
            }
          }
--------------------------------------------------------------------------------


Function 5: checkVersion
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function checkVersion(minimum, animVersionString) {
            var animVersion = animVersionString ? animVersionString.split('.') : [100, 100, 100];
            if (minimum[0] > animVersion[0]) {
              return true;
            } if (animVersion[0] > minimum[0]) {
              return false;
            }
            if (minimum[1] > animVersion[1]) {
              return true;
            } if (animVersion[1] > minimum[1]) {
              return false;
            }
            if (minimum[2] > animVersion[2]) {
              return true;
            } if (animVersion[2] > minimum[2]) {
              return false;
            }
            return null;
          }
--------------------------------------------------------------------------------


Function 6: completeData
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function completeData(animationData) {
            if (animationData.__complete) {
              return;
            }
            checkColors(animationData);
            checkText(animationData);
            checkChars(animationData);
            checkPathProperties(animationData);
            checkShapes(animationData);
            completeLayers(animationData.layers, animationData.assets);
            completeChars(animationData.chars, animationData.assets);
            animationData.__complete = true;
          }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-24T21:37:20.541Z
File: airbnb-lottie-web-bede03d/player/js/module.js
Functions Extracted: 2


Function 1: setQuality
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function setQuality(value) {
  if (typeof value === 'string') {
    switch (value) {
      case 'high':
        setDefaultCurveSegments(200);
        break;
      default:
      case 'medium':
        setDefaultCurveSegments(50);
        break;
      case 'low':
        setDefaultCurveSegments(10);
        break;
    }
  } else if (!isNaN(value) && value > 1) {
    setDefaultCurveSegments(value);
  }
  if (getDefaultCurveSegments() >= 50) {
    roundValues(false);
  } else {
    roundValues(true);
  }
}
--------------------------------------------------------------------------------


Function 2: getFactory
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function getFactory(name) {
  switch (name) {
    case 'propertyFactory':
      return PropertyFactory;
    case 'shapePropertyFactory':
      return ShapePropertyFactory;
    case 'matrix':
      return Matrix;
    default:
      return null;
  }
}
--------------------------------------------------------------------------------

================================================================================
