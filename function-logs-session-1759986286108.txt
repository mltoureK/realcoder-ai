=== FUNCTION EXTRACTION & QUESTION GENERATION LOG ===
Session ID: session-1759986286108
Started: 2025-10-09T05:04:46.108Z


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-09T05:04:46.110Z
File: mltoureK-realcoder-ai-9e3b1f5/src/lib/question-plugins/multipleChoice.ts
Functions Extracted: 2


Function 1: createUserPrompt
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function createUserPrompt(chunk: string): string {
  return `Generate 3 hard difficulty multiple-choice question based on this code chunk:

${chunk}

CRITICAL: Return ONLY valid JSON array. No text before or after. No markdown. No explanations.

IMPORTANT REQUIREMENTS:
1. IGNORE any code that is not in the primary programming language of this repository.
2. ONLY generate questions about functions that actually exist in the provided code chunk
3. The function name in "snippet" must match a real function from the code
4. Include the actual function code in the "codeContext" field with PROPER FORMATTING
5. The correct answer should be based on the actual function implementation
6. Create realistic incorrect options that are plausible but wrong
7. SCENARIO CONTEXT: Create realistic development scenarios that explain WHY this function exists
8. CODE FORMATTING: Format the codeContext with proper indentation and line breaks for readability
9. CHALLENGING DISTRACTORS: Make incorrect options subtle and plausible - they should test understanding of the function's behavior, not just obvious differences
10. RANDOMIZE ANSWERS: CRITICAL - Place the correct answer in a random position (1-4), not always first or last
11. AVOID PATTERNS: Do NOT make the correct answer always the longest, shortest, or most detailed option
12. TEST UNDERSTANDING: Focus on edge cases, side effects, data flow, or implementation details rather than obvious function purposes
13. SUBTLE DIFFERENCES: Incorrect options should differ in subtle ways - wrong data types, missing edge cases, incorrect side effects, wrong return values, or different execution order
14. RANDOM POSITIONING: MANDATORY - Vary the correct answer position across questions (sometimes A, B, C, or D)
15. EQUAL LENGTH OPTIONS: Make all options roughly the same length to avoid length-based guessing

FOCUS ON UNIVERSAL PROGRAMMING CONCEPTS:



AVOID:
- Repository-specific trivia


EXPLANATION REQUIREMENTS:
- Explain WHY the correct answer is right
- Explain WHY incorrect answers are wrong
- Focus on learning value

Format:
[
  {
    "snippet": "function name from code",
    "quiz": {
      "type": "multiple-choice",
      "question": "In a [REALISTIC_APP_CONTEXT], what does the function [FUNCTION_NAME] do?",
      "codeContext": "Display full function from the code chunk",
      "options": [
        "Subtly incorrect description that sounds plausible",
        "Correct description of what the function actually does", 
        "Subtly incorrect description that sounds plausible",
        "Subtle but incorrect description that sounds plausible"
      ],
      "answer": "2",
      "explanation": "why this is correct (at least 5 sentences) based on the actual function code"
    }
  }
]`;
}
--------------------------------------------------------------------------------


Function 2: formatCodeContext
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function formatCodeContext(codeContext: string): string {
  if (!codeContext) return codeContext;

  // Format the code context for better readability
  return codeContext.trim();
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-09T05:05:14.142Z
File: mltoureK-realcoder-ai-9e3b1f5/src/lib/question-plugins/functionVariant.ts
Functions Extracted: 1


Function 1: generate
Language: TypeScript
Lines: 47
Full Code:
--------------------------------------------------------------------------------
async generate(params: GenerateParams): Promise<RawQuestion[]> {
    const { chunk, apiKey, timeoutMs, retry, abortSignal } = params;
    const questionsPerChunk = 3;
    const randomTextForPrompt = [" longer", "sameish length", "slightly longer"];

    const generated: RawQuestion[] = [];
    try {
      let response: Response | null = null;
      for (let attempt = 0; attempt < retry.attempts; attempt++) {
        const controller = new AbortController();
        const onAbort = () => controller.abort();
        if (abortSignal) abortSignal.addEventListener('abort', onAbort);
        const timeoutId = setTimeout(() => controller.abort(), timeoutMs);
        try {
          response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${apiKey}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              model: 'gpt-4o-mini',
              messages: [
                { role: 'system', content: 'You are a JSON generator. You MUST return ONLY valid JSON with no additional text, explanations, or markdown formatting.' },
                { role: 'user', content: `Generate ${questionsPerChunk} hard difficulty function-variant quiz questions that can be answered based on the json snippet function that the question uses from the code chunk:\n\n${chunk}\n\nCRITICAL: Return ONLY valid JSON array. No text before or after. No markdown. No explanations.\n\nIMPORTANT REQUIREMENTS:\n1. ONLY generate questions about functions that actually exist in the provided code chunk\n2. The function name in "snippet" A functionfrom the code\n3. The correct variant must be the actual function implementation from the code\n4. Incorrect variants should have realistic bugs\n                 The correct answer should NEVER be obviously longer or more detailed than incorrect options.\n\nFOCUS ON UNIVERSAL PROGRAMMING CONCEPTS:\n\n\nAVOID:\n- Repository-specific trivia\n\n\nEXPLANATION REQUIREMENTS:\n- Explain WHY the correct answer is right\n- Explain WHY incorrect answers are wrong\n- Include practical examples\n- Focus on learning value\n\nFormat:\n[\n  {\n    \"snippet\": \"show complete function(and code)  that the question uses from the code chunk\",\n    \"quiz\": {\n      \"type\": \"function-variant\",\n      \"question\": \"Ask the user to select the function that accomplishes very specific instructions that only the correct answer accomplishes [insert function purpose] and watchout for [List 3 errors that the wrong answers have]"\,\n      \"variants\": [\n        {\n          \"id\": \"A\",\n          \"code\": \"Display full function from the code chunk\",\n          \"isCorrect\": true,\n          \"explanation\": \"Detailed explanation (3-5 sentences) with a humorous snarky tone that makes user feel smart for getting it right\"\n        },\n        {\n          \"id\": \"B\",\n          \"code\": \"Display full correct function from the code chunk with a functional error added to it\",\n          \"isCorrect\": false,\n          \"explanation\": \"Longer explanation (3-5 sentences) on why this specific bug is wrong in a condescending tone\"\n        },\n        {\n          \"id\": \"C\",\n          \"code\": \"Display full correct function from the code chunk with a functional error added to it\\\",\n          \"isCorrect\": false,\n          \"explanation\": \"Encouraging and funny explanation (3-5 sentences) on why this specific bug is wrong. \"\n        },\n        {\n          \"id\": \"D\",\n          \"code\": \"correct function with a functional error added to it\",\n          \"isCorrect\": false,\n          \"explanation\": \"Here is why this specific bug is wrong (3-5 sentences), and here is an example to further explain that\"\n        }\n      ]\n    }\n  }\n]` }
            ],
            temperature: 0.7,
            max_tokens: 2500
          });
          const data = await response.json();
          generated.push(...data);
          break;
        } catch (error) {
          if (attempt === retry.attempts - 1) throw error;
        } finally {
          clearTimeout(timeoutId);
          if (abortSignal) abortSignal.removeEventListener('abort', onAbort);
        }
      }
    } catch (error) {
      console.error('Error generating questions:', error);
    }
    return generated;
  }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-09T05:05:34.120Z
File: mltoureK-realcoder-ai-9e3b1f5/src/components/QuizHistory.tsx
Functions Extracted: 5


Function 1: loadQuizData
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
const loadQuizData = async () => {
    try {
      setLoading(true);
      const [history, stats, user, usage] = await Promise.all([
        getQuizHistory(userId, 20),
        getUserQuizStats(userId),
        getUser(userId),
        canUserTakeQuiz(userId)
      ]);

      setQuizHistory(history);
      setUserStats(stats);
      setUserInfo(user);
      setUsageInfo(usage);
    } catch (err) {
      console.error('Error loading quiz data:', err);
      setError('Failed to load quiz history');
    } finally {
      setLoading(false);
    }
  };
--------------------------------------------------------------------------------


Function 2: formatDate
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
const formatDate = (timestamp: any) => {
    if (!timestamp) return 'Unknown date';
    const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };
--------------------------------------------------------------------------------


Function 3: getScoreColor
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
const getScoreColor = (score: number, total: number) => {
    const percentage = (score / total) * 100;
    if (percentage >= 80) return 'text-green-600 dark:text-green-400';
    if (percentage >= 60) return 'text-yellow-600 dark:text-yellow-400';
    return 'text-red-600 dark:text-red-400';
  };
--------------------------------------------------------------------------------


Function 4: getScoreBg
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
const getScoreBg = (score: number, total: number) => {
    const percentage = (score / total) * 100;
    if (percentage >= 80) return 'bg-green-100 dark:bg-green-900/20';
    if (percentage >= 60) return 'bg-yellow-100 dark:bg-yellow-900/20';
    return 'bg-red-100 dark:bg-red-900/20';
  };
--------------------------------------------------------------------------------


Function 5: filteredHistory
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
const filteredHistory = () => {
    let filtered = [...quizHistory];
    
    switch (filter) {
      case 'recent':
        // logic for recent filtering
        break;
      case 'top':
        // logic for top filtering
        break;
      default:
        break;
    }
    return filtered;
  };
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-09T05:06:39.152Z
File: mltoureK-realcoder-ai-9e3b1f5/src/lib/question-plugins/orderSequence.ts
Functions Extracted: 1


Function 1: generate
Language: TypeScript
Lines: 65
Full Code:
--------------------------------------------------------------------------------
async generate(params: GenerateParams): Promise<RawQuestion[]> {
    const { chunk, apiKey, timeoutMs, retry, abortSignal } = params;
    const questionsPerChunk = 1;

    const generated: RawQuestion[] = [];
    try {
      let response: Response | null = null;
      for (let attempt = 0; attempt < retry.attempts; attempt++) {
        const controller = new AbortController();
        const onAbort = () => controller.abort();
        if (abortSignal) abortSignal.addEventListener('abort', onAbort);
        const timeoutId = setTimeout(() => controller.abort(), timeoutMs);
        try {
          response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${apiKey}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              model: 'gpt-4o-mini',
              messages: [
                { role: 'system', content: 'You are a JSON generator. You MUST return ONLY valid JSON with no additional text, explanations, or markdown formatting.' },
                { role: 'user', content: `Generate ${questionsPerChunk} order-sequence quiz questions (with detailed necessary context to answer question fairly) that test UNIVERSAL programming concepts inspired by this code:
                \n\n${chunk}\n\nCRITICAL: Return ONLY valid JSON array. No text before or after. No markdown. No explanations.\n\nIMPORTANT REQUIREMENTS:\n1. Use the SAME programming language as the code chunk provided\n2. Test PROGRAMMING KNOWLEDGE, not repository-specific function names or trivia\n3. Use GENERIC code patterns that could apply to any codebase\n4. Focus on UNIVERSAL concepts:\n5. Steps should be REALISTIC code in the same language as the chunk\n6. Include 2-3 educational distractors that test common programming mistakes\n7. Make questions about CODING ABILITY, not memorizing specific variable names\n8. Test logical thinking and execution flow understanding\n9. Avoid repository-specific function signatures, variable names, or business logic\n10. Prepend a brief, neutral background context (1-2 sentences) directly in the question string, describing what the function is supposed to do and the realistic scenario. Do not include code/file names or repo-specific terms\n11. If multiple valid execution orders exist, include either an "acceptableOrders" field (array of arrays of step IDs) or a "constraints" field (array of precedence pairs like ["A","B"] or {"before":"A","after":"B"}) so the grader can accept all valid answers\n12. When alternates exist (e.g., step1 and step2 are independent), you MUST populate "acceptableOrders" with all valid sequences (or provide "constraints"); do NOT leave it empty\n                 BREAKDOWN APPROACH:\n- Analyze the function's logical flow and dependencies\n- Identify initialization, processing, and cleanup phases\n- Consider async operations, error handling, and resource management\n- Break down into 4-6 logical steps that must happen in sequence\n- Include 2 realistic distractors that represent common mistakes\n- Focus on the actual execution order, not just code structure\n\nFormat:\n[\n  {\n    "snippet": "actual function name from the code chunk",\n    "quiz": {\n      "type": "order-sequence",\n      "question": "[Background: Provide a concise, neutral 1-2 sentence context that explains what the function is intended to do and the realistic scenario, without using code/file names or repo-specific terms.] In this context, what is the correct execution order for this function?",\n      "steps": [\n        {\n          "id": "step1",\n          "code": "[First logical step in the same programming language as the code chunk]",\n          "explanation": "[Why this step comes first]"\n        },\n        {\n          "id": "step2",\n          "code": "[Second logical step in the same programming language as the code chunk]",\n          "explanation": "[Why this step comes second]"\n        },\n        {\n          "id": "step3",\n          "code": "[Third logical step in the same programming language as the code chunk]",\n          "explanation": "[Why this step comes third]"\n        },\n        {\n          "id": "step4",\n          "code": "[Final logical step in the same programming language as the code chunk]",\n          "explanation": "[Why this step comes last]"\n        },\n        {\n          "id": "distractor1",\n          "code": "[Realistic but incorrect step that tests a common mistake]",\n          "explanation": "[Why this step would fail or cause issues]",\n          "isDistractor": true\n        },\n        {\n          "id": "distractor2",\n          "code": "[Another realistic but incorrect step that tests a different mistake]",\n          "explanation": "[Why this step would fail or cause issues]",\n          "isDistractor": true\n        }\n      ],\n      "correctOrder": ["step1", "step2", "step3", "step4"],\n      "acceptableOrders": [\n        ["step1", "step2", "step3", "step4"],\n        ["step2", "step1", "step3", "step4"]\n      ],\n      "constraints": [],\n      "explanation": "[Clear explanation (at least 5 sentences) of why this order is correct and what would happen if steps were reordered]"
    }
  }\n]` }
              ],
              temperature: 0.7,
              max_tokens: 2000
            }),
            signal: controller.signal
          });
          clearTimeout(timeoutId);
          if (abortSignal) abortSignal.removeEventListener('abort', onAbort);
          if (response && (response.ok || response.status !== 429)) break;
        } catch (e: any) {
          clearTimeout(timeoutMs as unknown as NodeJS.Timeout);
          if (abortSignal) abortSignal.removeEventListener('abort', onAbort);
          if (e && e.name === 'AbortError') throw e;
        }
        const backoff = retry.backoffBaseMs * Math.pow(2, attempt);
        await delay(backoff);
      }

      if (response && response.ok) {
        const data = await response.json();
        const content = data.choices[0].message.content as string;
        try {
          let cleanContent = content.trim();
          if (cleanContent.startsWith('```json')) cleanContent = cleanContent.replace(/^```json\s*/, '');
          if (cleanContent.startsWith('```')) cleanContent = cleanContent.replace(/^```\s*/, '');
          if (cleanContent.endsWith('```')) cleanContent = cleanContent.replace(/\s*```$/, '');
          const jsonStart = cleanContent.indexOf('[');
          if (jsonStart > 0) cleanContent = cleanContent.substring(jsonStart);
          const jsonEnd = cleanContent.lastIndexOf(']');
          if (jsonEnd > 0 && jsonEnd < cleanContent.length - 1) cleanContent = cleanContent.substring(0, jsonEnd + 1);
          const parsed = JSON.parse(cleanContent);

          parsed.forEach((question: any) => {
            if (!validateQuestionStructure(question)) return;}
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:06:44.027Z
Question Type: select-all
Function: filteredHistory
Function Size: 405 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: filteredHistory (TypeScript)\n// Filters quiz history based on the selected filter criteria.\n\nconst filteredHistory = () => {\n    let filtered = [...quizHistory];\n    \n    switch (filter) {\n      case 'recent':\n        // logic for recent filtering\n        break;\n      case 'top':\n      
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:06:54.418Z
Question Type: order-sequence
Function: createUserPrompt
Function Size: 2870 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: createUserPrompt (TypeScript)\n// Creates the user prompt for multiple choice question generation\n\nfunction createUserPrompt(chunk: string): string {\n  return `Generate 3 hard difficulty multiple-choice question based on this code chunk:\n\n${chunk}\n\nCRITICAL: Return ONLY valid JSON array.
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:06:59.736Z
Question Type: multiple-choice
Function: createUserPrompt
Function Size: 2870 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: createUserPrompt (TypeScript)\n// Creates the user prompt for multiple choice question generation\n\nfunction createUserPrompt(chunk: string): string {\n  return `Generate 3 hard difficulty multiple-choice question based on this code chunk:\n\n${chunk}\n\nCRITICAL: Return ONLY valid JSON array.
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:07:03.831Z
Question Type: function-variant
Function: loadQuizData
Function Size: 663 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: loadQuizData (TypeScript)\n// Loads quiz data asynchronously and updates state with the results.\n\nconst loadQuizData = async () => {\n    try {\n      setLoading(true);\n      const [history, stats, user, usage] = await Promise.all([\n        getQuizHistory(userId, 20),\n        getUserQuizSt
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:07:23.275Z
Question Type: select-all
Function: filteredHistory
Function Size: 405 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: filteredHistory (TypeScript)\n// Filters quiz history based on the selected filter criteria.\n\nconst filteredHistory = () => {\n    let filtered = [...quizHistory];\n    \n    switch (filter) {\n      case 'recent':\n        // logic for recent filtering\n        break;\n      case 'top':\n      
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:07:29.773Z
Question Type: function-variant
Function: formatCodeContext
Function Size: 273 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: formatCodeContext (TypeScript)\n// Formats code context for better readability\n\nfunction formatCodeContext(codeContext: string): string {\n  if (!codeContext) return codeContext;\n\n  // Format the code context for better readability\n  return codeContext.trim();\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:07:33.274Z
Question Type: true-false
Function: generate
Function Size: 7053 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: generate (TypeScript)\n// Generates order-sequence quiz questions based on provided code chunk.\n\nasync generate(params: GenerateParams): Promise<RawQuestion[]> {\n    const { chunk, apiKey, timeoutMs, retry, abortSignal } = params;\n    const questionsPerChunk = 1;\n\n    const generated: Ra
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:07:48.800Z
Question Type: order-sequence
Function: getScoreColor
Function Size: 403 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getScoreColor (TypeScript)\n// Determines the CSS class for score color based on percentage.\n\nconst getScoreColor = (score: number, total: number) => {\n    const percentage = (score / total) * 100;\n    if (percentage >= 80) return 'text-green-600 dark:text-green-400';\n    if (percentage 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:07:49.786Z
Question Type: multiple-choice
Function: loadQuizData
Function Size: 663 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: loadQuizData (TypeScript)\n// Loads quiz data asynchronously and updates state with the results.\n\nconst loadQuizData = async () => {\n    try {\n      setLoading(true);\n      const [history, stats, user, usage] = await Promise.all([\n        getQuizHistory(userId, 20),\n        getUserQuizSt
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:07:57.895Z
Question Type: select-all
Function: generate
Function Size: 4517 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: generate (TypeScript)\n// Generates quiz questions based on a code chunk using OpenAI API.\n\nasync generate(params: GenerateParams): Promise<RawQuestion[]> {\n    const { chunk, apiKey, timeoutMs, retry, abortSignal } = params;\n    const questionsPerChunk = 3;\n    const randomTextForPrompt
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1759986286108
Repository: Unknown
Total Questions Generated: 7
Total Chunks Processed: 9
Ended: 2025-10-09T05:07:57.897Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-09T05:15:32.884Z
File: + 3 = 14
Functions Extracted: 11


Function 1: test
Language: JavaScript
Lines: 17
Full Code:
--------------------------------------------------------------------------------
test("dragEnd returns transformed pointer", async () => {
        const onDragEnd = deferred<Point>()
        const p: Point = { x: 0, y: 0 }

        const Component = () => (
            <MockDrag>
                <motion.div
                    data-testid="draggable"
                    drag
                    onDrag={(_e, { point }) => {
                        p.x = point.x
                        p.y = point.y
                    }}
                    onDragEnd={(_e, { point }) => {
                        onDragEnd.resolve(point)
                    }}
                    style={{ x: 100, y: 100 }}
                />
            </MockDrag>
        )

        const { getByTestId, rerender } = render(<Component />)
        rerender(<Component />)

        const pointer = await drag(getByTestId("draggable")).to(50, 50)
        pointer.end()

        await expect(onDragEnd.promise).resolves.toEqual(p)
    })
--------------------------------------------------------------------------------


Function 2: test
Language: JavaScript
Lines: 17
Full Code:
--------------------------------------------------------------------------------
test("dragTransitionEnd fires", async () => {
        const onDragTransitionEnd = deferred<boolean>()
        const Component = () => (
            <MockDrag>
                <motion.div
                    drag
                    onDragTransitionEnd={() =>
                        onDragTransitionEnd.resolve(true)
                    }
                    dragConstraints={{
                        top: 0,
                        left: 0,
                        right: 0,
                        bottom: 0,
                    }}
                    dragTransition={{
                        bounceStiffness: 100000,
                        bounceDamping: 100000,
                    }}
                />
            </MockDrag>
        )

        const { container, rerender } = render(<Component />)
        rerender(<Component />)

        const pointer = await drag(container.firstChild).to(1, 1)
        await pointer.to(50, 50)
        pointer.end()

        expect(onDragTransitionEnd.promise).resolves.toBe(true)
    })
--------------------------------------------------------------------------------


Function 3: test
Language: JavaScript
Lines: 17
Full Code:
--------------------------------------------------------------------------------
test("drag momentum is applied", async () => {
        const x = motionValue(0)
        const Component = () => (
            <MockDrag>
                <motion.div drag="x" style={{ x }} />
            </MockDrag>
        )

        const { container, rerender } = render(<Component />)
        rerender(<Component />)

        const pointer = await drag(container.firstChild).to(1, 1)
        await pointer.to(50, 50)
        pointer.end()

        const endValue = await new Promise<number>((resolve) => {
            setTimeout(() => {
                resolve(x.get())
            }, 40)
        })

        return expect(endValue).toBeGreaterThan(50)
    })
--------------------------------------------------------------------------------


Function 4: test
Language: JavaScript
Lines: 17
Full Code:
--------------------------------------------------------------------------------
test("limit to initial direction: x", async () => {
        const x = motionValue(0)
        const y = motionValue(0)
        const Component = () => (
            <MockDrag>
                <motion.div drag dragDirectionLock style={{ x, y }} />
            </MockDrag>
        )

        const { container, rerender } = render(<Component />)
        rerender(<Component />)

        const pointer = await drag(container.firstChild).to(100, 0)
        await pointer.to(50, 4)
        await pointer.to(200, 10)
        pointer.end()

        expect({
            x: x.get(),
            y: y.get(),
        }).toEqual({
            x: 200,
            y: 0,
        })
    })
--------------------------------------------------------------------------------


Function 5: test
Language: JavaScript
Lines: 17
Full Code:
--------------------------------------------------------------------------------
test("block drag propagation", async () => {
        const childX = motionValue(0)
        const parentX = motionValue(0)
        const Component = () => (
            <MockDrag>
                <motion.div drag="x" style={{ x: parentX }}>
                    <motion.div
                        data-testid="child"
                        drag
                        style={{ x: childX }}
                    />
                </motion.div>
            </MockDrag>
        )

        const { getByTestId, rerender } = render(<Component />)
        rerender(<Component />)

        const pointer = await drag(getByTestId("child")).to(10, 0)
        await pointer.to(20, 0)
        pointer.end()

        expect({
            parentX: parentX.get(),
            childX: childX.get(),
        }).toEqual({
            parentX: 0,
            childX: 20,
        })
    })
--------------------------------------------------------------------------------


Function 6: test
Language: JavaScript
Lines: 17
Full Code:
--------------------------------------------------------------------------------
test("enable drag propagation", async () => {
        const childX = motionValue(0)
        const parentX = motionValue(0)
        const Component = () => (
            <MockDrag>
                <motion.div drag="x" style={{ x: parentX }}>
                    <motion.div
                        data-testid="child"
                        drag="x"
                        dragPropagation
                        style={{ x: childX }}
                    />
                </motion.div>
            </MockDrag>
        )

        const { getByTestId, rerender } = render(<Component />)
        rerender(<Component />)

        const pointer = await drag(getByTestId("child")).to(10, 0)
        await pointer.to(20, 0)
        pointer.end()

        expect({
            parentX: parentX.get(),
            childX: childX.get(),
        }).toEqual({
            parentX: 20,
            childX: 20,
        })
    })
--------------------------------------------------------------------------------


Function 7: test
Language: JavaScript
Lines: 17
Full Code:
--------------------------------------------------------------------------------
test("impose left drag constraint", async () => {
        const x = motionValue(0)
        const y = motionValue(0)
        const Component = () => (
            <MockDrag>
                <motion.div
                    drag
                    dragConstraints={{ left: -100 }}
                    dragElastic={false}
                    style={{ x, y }}
                />
            </MockDrag>
        )

        const { container, rerender } = render(<Component />)
        rerender(<Component />)

        const pointer = await drag(container.firstChild).to(1, 1)
        await pointer.to(-200, 50)
        pointer.end()

        expect({
            x: x.get(),
            y: y.get(),
        }).toEqual({
            x: -100,
            y: 50,
        })
    })
--------------------------------------------------------------------------------


Function 8: test
Language: JavaScript
Lines: 17
Full Code:
--------------------------------------------------------------------------------
test("impose right drag constraint", async () => {
        const x = motionValue(0)
        const y = motionValue(0)
        const Component = () => (
            <MockDrag>
                <motion.div
                    drag
                    dragConstraints={{ right: 300 }}
                    dragElastic={false}
                    style={{ x, y }}
                />
            </MockDrag>
        )

        const { container, rerender } = render(<Component />)
        rerender(<Component />)

        const pointer = await drag(container.firstChild).to(1, 1)
        await pointer.to(500, 50)
        pointer.end()

        expect({
            x: x.get(),
            y: y.get(),
        }).toEqual({
            x: 300,
            y: 50,
        })
    })
--------------------------------------------------------------------------------


Function 9: test
Language: JavaScript
Lines: 17
Full Code:
--------------------------------------------------------------------------------
test("impose top drag constraint", async () => {
        const x = motionValue(0)
        const y = motionValue(0)
        const Component = () => (
            <MockDrag>
                <motion.div
                    drag
                    dragConstraints={{ top: -100 }}
                    dragElastic={false}
                    style={{ x, y }}
                />
            </MockDrag>
        )

        const { container, rerender } = render(<Component />)
        rerender(<Component />)

        const pointer = await drag(container.firstChild).to(1, 1)
        await pointer.to(500, -500)
        pointer.end()

        expect({
            x: x.get(),
            y: y.get(),
        }).toEqual({
            x: 500,
            y: -100,
        })
    })
--------------------------------------------------------------------------------


Function 10: test
Language: JavaScript
Lines: 17
Full Code:
--------------------------------------------------------------------------------
test("impose bottom drag constraint", async () => {
        const x = motionValue(0)
        const y = motionValue(0)
        const Component = () => (
            <MockDrag>
                <motion.div
                    drag
                    dragConstraints={{ bottom: 100 }}
                    dragElastic={false}
                    style={{ x, y }}
                />
            </MockDrag>
        )

        const { container, rerender } = render(<Component />)
        rerender(<Component />)

        const pointer = await drag(container.firstChild).to(1, 1)
        await pointer.to(500, 500)
        pointer.end()

        expect({
            x: x.get(),
            y: y.get(),
        }).toEqual({
            x: 500,
            y: 100,
        })
    })
--------------------------------------------------------------------------------


Function 11: test
Language: JavaScript
Lines: 17
Full Code:
--------------------------------------------------------------------------------
test("drag constraints can be updated", async () => {
        const x = motionValue(0)
        const y = motionValue(0)
        const Component = ({
            constraints,
        }: {
            constraints: Partial<BoundingBox>
        }) => (
            <MockDrag>
                <motion.div
                    drag
                    dragConstraints={constraints}
                    dragElastic={false}
                    style={{ x, y }}
                />
            </MockDrag>
        )

        const { container, rerender } = render(
            <Component constraints={{ top: -100, bottom: 0 }} />
        )
        rerender(<Component constraints={{ top: -100, bottom: 0 }} />)
        rerender(<Component constraints={{ top: -50, bottom: 0 }} />)
        rerender(<Component constraints={{ top: -50, bottom: 0 }} />)

        const pointer = await drag(container.firstChild).to(1, 1)
        await pointer.to(500, -500)
        pointer.end()

        expect({
            x: x.get(),
            y: y.get(),
        }).toEqual({
            x: 500,
            y: -50,
        })
    })
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-09T05:15:54.556Z
File: motiondivision-motion-4069086/packages/framer-motion/src/value/use-transform.ts
Functions Extracted: 2


Function 1: useTransform
Language: TypeScript
Lines: 21
Full Code:
--------------------------------------------------------------------------------
export function useTransform<I, O>(
    input:
        | MotionValue<I>
        | MotionValue<string>[]
        | MotionValue<number>[]
        | MotionValue<AnyResolvedKeyframe>[]
        | (() => O),
    inputRangeOrTransformer?: InputRange | Transformer<I, O>,
    outputRange?: O[],
    options?: TransformOptions<O>
): MotionValue<O> {
    if (typeof input === "function") {
        return useComputed(input)
    }

    const transformer =
        typeof inputRangeOrTransformer === "function"
            ? inputRangeOrTransformer
            : transform(inputRangeOrTransformer!, outputRange!, options)

    return Array.isArray(input)
        ? useListTransform(
              input,
              transformer as MultiTransformer<AnyResolvedKeyframe, O>
          )
        : useListTransform([input], ([latest]) =>
              (transformer as SingleTransformer<I, O>)(latest)
          )
}
--------------------------------------------------------------------------------


Function 2: useListTransform
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function useListTransform<I, O>(
    values: MotionValue<I>[],
    transformer: MultiTransformer<I, O>
): MotionValue<O> {
    const latest = useConstant<I[]>(() => [])

    return useCombineMotionValues(values, () => {
        latest.length = 0
        const numValues = values.length
        for (let i = 0; i < numValues; i++) {
            latest[i] = values[i].get()
        }

        return transformer(latest)
    })
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-09T05:16:07.047Z
File: motiondivision-motion-4069086/packages/framer-motion/src/motion/__tests__/static-prop.test.tsx
Functions Extracted: 5


Function 1: Component
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function Component() {
            const x = useMotionValue(10);

            useEffect(() => x.set(20), [x]);

            return <motion.div data-testid="child" style={{ x }} />;
        }
--------------------------------------------------------------------------------


Function 2: Component
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function Component({ initial }: { initial: string }) {
            return (
                <MotionConfig isStatic>
                    <motion.div
                        data-testid="parent"
                        initial={initial}
                        variants={variants}
                    >
                        <motion.div data-testid="child" variants={variants} />
                    </motion.div>
                </MotionConfig>
            );
        }
--------------------------------------------------------------------------------


Function 3: Component
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function Component({ x }: { x: number }) {
            return (
                <MotionConfig isStatic>
                    <motion.div data-testid="a" style={{ x }} />
                </MotionConfig>
            );
        }
--------------------------------------------------------------------------------


Function 4: Component
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function Component({ z }: { z?: number }) {
            return (
                <MotionConfig isStatic>
                    <motion.div data-testid="child" style={{ z }} />
                </MotionConfig>
            );
        }
--------------------------------------------------------------------------------


Function 5: Component
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function Component({ x }: { x: number }) {
            return (
                <MotionConfig isStatic>
                    <motion.div data-testid="child" initial={{ x }} />
                </MotionConfig>
            );
        }
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:16:22.539Z
Question Type: select-all
Function: test
Function Size: 846 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: test (JavaScript)\n// Tests imposing a right drag constraint.\n\ntest("impose right drag constraint", async () => {\n        const x = motionValue(0)\n        const y = motionValue(0)\n        const Component = () => (\n            <MockDrag>\n                <motion.div\n                    dra
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:16:24.446Z
Question Type: multiple-choice
Function: Component
Function Size: 300 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: Component (TypeScript)\n// Updates motion value and renders a motion div with the updated style.\n\nfunction Component() {\n            const x = useMotionValue(10);\n\n            useEffect(() => x.set(20), [x]);\n\n            return <motion.div data-testid="child" style={{ x }} />;\n        }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:16:37.610Z
Question Type: function-variant
Function: test
Function Size: 845 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: test (JavaScript)\n// Tests imposing a top drag constraint.\n\ntest("impose top drag constraint", async () => {\n        const x = motionValue(0)\n        const y = motionValue(0)\n        const Component = () => (\n            <MockDrag>\n                <motion.div\n                    drag\n  
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:16:37.638Z
Question Type: function-variant
Function: test
Function Size: 1118 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: test (JavaScript)\n// Tests if dragTransitionEnd event fires correctly.\n\ntest("dragTransitionEnd fires", async () => {\n        const onDragTransitionEnd = deferred<boolean>()\n        const Component = () => (\n            <MockDrag>\n                <motion.div\n                    drag\n   
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:16:48.623Z
Question Type: select-all
Function: Component
Function Size: 345 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: Component (TypeScript)\n// Renders a motion div with a specified x style in a static motion configuration.\n\nfunction Component({ x }: { x: number }) {\n            return (\n                <MotionConfig isStatic>\n                    <motion.div data-testid="a" style={{ x }} />\n           
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:16:54.586Z
Question Type: multiple-choice
Function: test
Function Size: 769 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: test (JavaScript)\n// Tests limiting drag to the initial direction on the x-axis.\n\ntest("limit to initial direction: x", async () => {\n        const x = motionValue(0)\n        const y = motionValue(0)\n        const Component = () => (\n            <MockDrag>\n                <motion.div dr
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:16:55.895Z
Question Type: select-all
Function: test
Function Size: 769 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: test (JavaScript)\n// Tests limiting drag to the initial direction on the x-axis.\n\ntest("limit to initial direction: x", async () => {\n        const x = motionValue(0)\n        const y = motionValue(0)\n        const Component = () => (\n            <MockDrag>\n                <motion.div dr
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:17:02.659Z
Question Type: true-false
Function: test
Function Size: 851 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: test (JavaScript)\n// Tests imposing a bottom drag constraint.\n\ntest("impose bottom drag constraint", async () => {\n        const x = motionValue(0)\n        const y = motionValue(0)\n        const Component = () => (\n            <MockDrag>\n                <motion.div\n                    d
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:17:08.415Z
Question Type: order-sequence
Function: Component
Function Size: 300 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: Component (TypeScript)\n// Updates motion value and renders a motion div with the updated style.\n\nfunction Component() {\n            const x = useMotionValue(10);\n\n            useEffect(() => x.set(20), [x]);\n\n            return <motion.div data-testid="child" style={{ x }} />;\n        }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:17:08.929Z
Question Type: order-sequence
Function: test
Function Size: 954 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: test (JavaScript)\n// Tests if drag propagation is blocked correctly.\n\ntest("block drag propagation", async () => {\n        const childX = motionValue(0)\n        const parentX = motionValue(0)\n        const Component = () => (\n            <MockDrag>\n                <motion.div drag="x" s
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1759986286108
Repository: Unknown
Total Questions Generated: 12
Total Chunks Processed: 18
Ended: 2025-10-09T05:17:12.046Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-09T05:20:01.025Z
File: the API is ~stable, so this should be fine
Functions Extracted: 2


Function 1: closeSpanWithError
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
const closeSpanWithError = (span: Span, error?: Error) => {
  if (isBubbledError(error) && error.bubble) {
    span.setAttribute('next.bubble', true)
  } else {
    if (error) {
      span.recordException(error)
      span.setAttribute('error.type', error.name)
    }
    span.setStatus({ code: SpanStatusCode.ERROR, message: error?.message })
  }
  span.end()
}
--------------------------------------------------------------------------------


Function 2: getTracePropagationData
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
public getTracePropagationData(): ClientTraceDataEntry[] {
    const activeContext = context.active()
    const entries: ClientTraceDataEntry[] = []
    propagation.inject(activeContext, entries, clientTraceDataSetter)
    return entries
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-09T05:20:12.901Z
File: vercel-next.js-e2eee89/packages/next/src/compiled/@edge-runtime/cookies/index.d.ts
Functions Extracted: 3


Function 1: stringifyCookie
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
declare function stringifyCookie(c: ResponseCookie | RequestCookie): string {
    const pairs = [];
    for (const [key, value] of Object.entries(c)) {
        if (key !== 'expires' && value !== undefined) {
            pairs.push(`${key}=${value}`);
        }
    }
    return pairs.join('; ');
}
--------------------------------------------------------------------------------


Function 2: parseCookie
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
declare function parseCookie(cookie: string): Map<string, string> {
    const result = new Map<string, string>();
    const pairs = cookie.split('; ');
    for (const pair of pairs) {
        const [key, value] = pair.split('=');
        result.set(decodeURIComponent(key), decodeURIComponent(value));
    }
    return result;
}
--------------------------------------------------------------------------------


Function 3: parseSetCookie
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
declare function parseSetCookie(setCookie: string): undefined | ResponseCookie {
    const cookieParts = setCookie.split('; ');
    const [nameValue, ...attributes] = cookieParts;
    const [name, value] = nameValue.split('=');
    const cookie: ResponseCookie = { name: decodeURIComponent(name), value: decodeURIComponent(value) };
    for (const attr of attributes) {
        const [key, val] = attr.split('=');
        if (key === 'HttpOnly') {
            cookie.httpOnly = true;
        } else if (key === 'Max-Age') {
            cookie.maxAge = parseInt(val, 10);
        } else if (key === 'Secure') {
            cookie.secure = true;
        } else if (key === 'SameSite') {
            cookie.sameSite = val;
        }
    }
    return cookie;
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-09T05:20:39.680Z
File: @ts-expect-error - Argument of type 'Buffer<ArrayBufferLike>' is not assignable to parameter of type 'BufferSource'.
Functions Extracted: 4


Function 1: buildEnvironmentVariablesFrom
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function buildEnvironmentVariablesFrom(
  injectedEnvironments: Record<string, string>
): Record<string, string | undefined> {
  const pairs = Object.keys(process.env).map((key) => [key, process.env[key]])
  const env = Object.fromEntries(pairs)
  for (const key of Object.keys(injectedEnvironments)) {
    env[key] = injectedEnvironments[key]
  }
  env.NEXT_RUNTIME = 'edge'
  return env
}
--------------------------------------------------------------------------------


Function 2: throwUnsupportedAPIError
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function throwUnsupportedAPIError(name: string) {
  const error =
    new Error(`A Node.js API is used (${name}) which is not supported in the Edge Runtime.
Learn more: https://nextjs.org/docs/api-reference/edge-runtime`)
  decorateServerError(error, COMPILER_NAMES.edgeServer)
  throw error
}
--------------------------------------------------------------------------------


Function 3: createProcessPolyfill
Language: TypeScript
Lines: 18
Full Code:
--------------------------------------------------------------------------------
function createProcessPolyfill(env: Record<string, string>) {
  const processPolyfill = { env: buildEnvironmentVariablesFrom(env) }
  const overriddenValue: Record<string, any> = {}

  for (const key of Object.keys(process)) {
    if (key === 'env') continue
    Object.defineProperty(processPolyfill, key, {
      get() {
        if (overriddenValue[key] !== undefined) {
          return overriddenValue[key]
        }
        if (typeof (process as any)[key] === 'function') {
          return () => throwUnsupportedAPIError(`process.${key}`)
        }
        return undefined
      },
      set(value) {
        overriddenValue[key] = value
      },
      enumerable: false,
    })
  }
  return processPolyfill
}
--------------------------------------------------------------------------------


Function 4: createModuleContext
Language: TypeScript
Lines: 43
Full Code:
--------------------------------------------------------------------------------
async function createModuleContext(options: ModuleContextOptions) {
  const warnedEvals = new Set<string>()
  const warnedWasmCodegens = new Set<string>()
  const { edgeFunctionEntry } = options
  const wasm = await loadWasm(edgeFunctionEntry.wasm ?? [])
  const runtime = new EdgeRuntime({
    codeGeneration:
      process.env.NODE_ENV !== 'production'
        ? { strings: true, wasm: true }
        : undefined,
    extend: (context) => {
      context.process = createProcessPolyfill(edgeFunctionEntry.env)

      Object.defineProperty(context, 'require', {
        enumerable: false,
        value: (id: string) => {
          const value = NativeModuleMap.get(id)
          if (!value) {
            throw TypeError('Native module not found: ' + id)
          }
          return value
        },
      })

      if (process.env.NODE_ENV !== 'production') {
        context.__next_log_error__ = function (err: unknown) {
          options.onError(err)
        }
      }

      context.__next_eval__ = function __next_eval__(fn: Function) {
        const key = fn.toString()
        if (!warnedEvals.has(key)) {
          const warning = getServerError(
            new Error(
              `Dynamic Code Evaluation (e. g. 'eval', 'new Function') not allowed in Edge Runtime
Learn More: https://nextjs.org/docs/messages/edge-dynamic-code-evaluation`
            ),
            COMPILER_NAMES.edgeServer
          )
          warning.name = 'DynamicCodeEvaluationWarning'
          Error.captureStackTrace(warning, __next_eval__)
          warnedEvals.add(key)
          options.onWarning(warning)
        }
        return fn()
      }

      context.__next_webassembly_compile__ =
        function __next_webassembly_compile__(fn: Function) {
          const key = fn.toString()
          if (!warnedWasmCodegens.has(key)) {
            const warning = getServerError(
              new Error(`Dynamic WASM code generation (e. g. 'WebAssembly.compile') not allowed in Edge Runtime.
Learn More: https://nextjs.org/docs/messages/edge-dynamic-code-evaluation`),
              COMPILER_NAMES.edgeServer
            )
            warning.name = 'DynamicWasmCodeGenerationWarning'
            Error.captureStackTrace(warning, __next_webassembly_compile__)
            warnedWasmCodegens.add(key)
            options.onWarning(warning)
          }
          return fn()
        }

      context.__next_webassembly_instantiate__ =
        async function __next_webassembly_instantiate__(fn: Function) {
          const result = await fn()
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-09T05:20:45.676Z
File: This keeps autocompletion working for static routes.
Functions Extracted: 1


Function 1: generateValidatorFile
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export function generateValidatorFile(
  routesManifest: RouteTypesManifest
): string {
  const generateValidations = (
    paths: string[],
    type:
      | 'AppPageConfig'
      | 'PagesPageConfig'
      | 'LayoutConfig'
      | 'RouteHandlerConfig'
      | 'ApiRouteConfig',
    pathToRouteMap?: Map<string, string>
  ) =>
    paths
      .sort()
      .map((path) => {
        const route = pathToRouteMap ? pathToRouteMap.get(path) : undefined;
        return `Validation for ${path} of type ${type} with route ${route}`;
      });
  return 'Validator file generated';
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-09T05:21:19.585Z
File: vercel-next.js-e2eee89/packages/next/src/server/route-modules/route-module.ts
Functions Extracted: 1


Function 1: loadManifests
Language: TypeScript
Lines: 92
Full Code:
--------------------------------------------------------------------------------
private loadManifests(
    srcPage: string,
    projectDir?: string
  ): {
    buildId: string
    buildManifest: BuildManifest
    fallbackBuildManifest: BuildManifest
    routesManifest: DeepReadonly<DevRoutesManifest>
    nextFontManifest: DeepReadonly<NextFontManifest>
    prerenderManifest: DeepReadonly<PrerenderManifest>
    serverFilesManifest: RequiredServerFilesManifest
    reactLoadableManifest: DeepReadonly<ReactLoadableManifest>
    subresourceIntegrityManifest: any
    clientReferenceManifest: any
    serverActionsManifest: any
    dynamicCssManifest: any
    interceptionRoutePatterns: RegExp[]
  } {
    if (process.env.NEXT_RUNTIME === 'edge') {
      const { getEdgePreviewProps } =
        require('../web/get-edge-preview-props') as typeof import('../web/get-edge-preview-props')

      const maybeJSONParse = (str?: string) =>
        str ? JSON.parse(str) : undefined

      return {
        buildId: process.env.__NEXT_BUILD_ID || '',
        buildManifest: self.__BUILD_MANIFEST as any,
        fallbackBuildManifest: {} as any,
        reactLoadableManifest: maybeJSONParse(self.__REACT_LOADABLE_MANIFEST),
        nextFontManifest: maybeJSONParse(self.__NEXT_FONT_MANIFEST),
        prerenderManifest: {
          routes: {},
          dynamicRoutes: {},
          notFoundRoutes: [],
          version: 4,
          preview: getEdgePreviewProps(),
        },
        routesManifest: {
          version: 4,
          caseSensitive: Boolean(process.env.__NEXT_CASE_SENSITIVE_ROUTES),
          basePath: process.env.__NEXT_BASE_PATH || '',
          rewrites: (process.env.__NEXT_REWRITES as any) || {
            beforeFiles: [],
            afterFiles: [],
            fallback: [],
          },
          redirects: [],
          headers: [],
          i18n:
            (process.env.__NEXT_I18N_CONFIG as any as I18NConfig) || undefined,
          skipMiddlewareUrlNormalize: Boolean(
            process.env.__NEXT_NO_MIDDLEWARE_URL_NORMALIZE
          ),
        },
        serverFilesManifest: {
          config: (globalThis as any).nextConfig || {},
        } as any,
        clientReferenceManifest: self.__RSC_MANIFEST?.[srcPage],
        serverActionsManifest: maybeJSONParse(self.__RSC_SERVER_MANIFEST),
        subresourceIntegrityManifest: maybeJSONParse(
          self.__SUBRESOURCE_INTEGRITY_MANIFEST
        ),
        dynamicCssManifest: maybeJSONParse(self.__DYNAMIC_CSS_MANIFEST),
        interceptionRoutePatterns: (
          maybeJSONParse(self.__INTERCEPTION_ROUTE_REWRITE_MANIFEST) ?? []
        ).map((rewrite: any) => new RegExp(rewrite.regex)),
      }
    } else {
      if (!projectDir) {
        throw new Error('Invariant: projectDir is required for node runtime')
      }
      const { loadManifestFromRelativePath } =
        require('../load-manifest.external') as typeof import('../load-manifest.external')
      const normalizedPagePath = normalizePagePath(srcPage)

      const router =
        this.definition.kind === RouteKind.PAGES ||
        this.definition.kind === RouteKind.PAGES_API
          ? 'pages'
          : 'app'

      const [
        routesManifest,
        prerenderManifest,
        buildManifest,
        fallbackBuildManifest,
        reactLoadableManifest,
        nextFontManifest,
        clientReferenceManifest,
        serverActionsManifest,
        subresourceIntegrityManifest,
        serverFilesManifest,
        buildId,
        dynamicCssManifest,
      ] = [
        loadManifestFromRelativePath<DevRoutesManifest>({
          projectDir,
          distDir: this.distDir,
          manifest: ROUTES_MANIFEST,
          shouldCache: !this.isDev,
        }),
        loadManifestFromRelativePath<PrerenderManifest>({
          projectDir,
          distDir: this.distDir,
          manifest: PRERENDER_MANIFEST,
          shouldCache: !this.isDev,
        }),
        loadManifestFromRelativePath<BuildManifest>({
          projectDir,
          distDir: this.distDir,
          manifest: BUILD_MANIFEST,
          shouldCache: !this.isDev,
        }),
        srcPage === '/_error'
          ? loadManifestFromRelativePath<BuildManifest>({
              projectDir,
              distDir: this.distDir,
              manifest: `fallback-${BUILD_MANIFEST}`,
              shouldCache: !this.isDev,
              handleMissing: true,
            })
          : ({} as BuildManifest),
        loadManifestFromRelativePath<ReactLoadableManifest>({
          projectDir,
          distDir: this.distDir,
          manifest: process.env.TURBOPACK
            ? `server/${router === 'app' ? 'app' : 'pages'}${normalizedPagePath}/${REACT_LOADABLE_MANIFEST}`
            : REACT_LOADABLE_MANIFEST,
          handleMissing: true,
          shouldCache: !this.isDev,
        }),
        loadManifestFromRelativePath<NextFontManifest>({
          projectDir,
          distDir: this.distDir,
          manifest: `server/${NEXT_FONT_MANIFEST}.json`,
          shouldCache: !this.isDev,
        }),
        router === 'app' && !isStaticMetadataRoute(srcPage)
          ? loadManifestFromRelativePath({
              distDir: this.distDir,
              projectDir,
              useEval: true,
              handleMissing: true,
              manifest: `server/app${srcPage.replace(/%5F/g, '_') + '_' + CLIENT_REFERENCE_MANIFEST}.js`,
              shouldCache: !this.isDev,
            })
          : undefined,
        router === 'app'
          ? loadManifestFromRelativePath<any>({
              distDir: this.distDir,
              projectDir,
              manifest: `server/${SERVER_REFERENCE_MANIFEST}.json`,
              handleMissing: true,
              shouldCache: !this.isDev,
            })
          : {},
        loadManifestFromRelativePath<Record<string, string>>({
          projectDir,
          distDir: this.distDir,
          manifest: `server/${SUBRESOURCE_INTEGRITY_MANIFEST}.json`,
          handleMissing: true,
          shouldCache: !this.isDev,
        }),
        this.isDev
          ? ({} as any)
          : loadManifestFromRelativePath<RequiredServerFilesManifest>({
              projectDir,
              distDir: this.distDir,
              manifest: SERVER_FILES_MANIFEST,
            }),
        this.isDev
          ? 'development'
          : loadManifestFromRelativePath<any>({
              projectDir,
              distDir: this.distDir,
              manifest: BUILD_ID_FILE,
              skipParse: true,
            }),
        loadManifestFromRelativePath<any>({
          projectDir,
          distDir: this.distDir,
          manifest: DYNAMIC_CSS_MANIFEST,
          handleMissing: true,
        }),
      ]

      return {
        buildId,
        buildManifest,
        fallbackBuildManifest,
        routesManifest,
        nextFontManifest,
        prerenderManifest,
        serverFilesManifest,
        reactLoadableManifest,
        clientReferenceManifest: (clientReferenceManifest as any)
          ?.__RSC_MANIFEST?.[srcPage.replace(/%5F/g, '_')],
        serverActionsManifest,
        subresourceIntegrityManifest,
        dynamicCssManifest,
        interceptionRoutePatterns: routesManifest.rewrites.beforeFiles
          .filter(isInterceptionRouteRewrite)
          .map((rewrite) => new RegExp(rewrite.regex)),
      }
    }
  }
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:21:30.529Z
Question Type: select-all
Function: closeSpanWithError
Function Size: 502 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: closeSpanWithError (TypeScript)\n// Closes a span with error handling and sets appropriate attributes based on the error type.\n\nconst closeSpanWithError = (span: Span, error?: Error) => {\n  if (isBubbledError(error) && error.bubble) {\n    span.setAttribute('next.bubble', true)\n  } else {
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:21:35.021Z
Question Type: order-sequence
Function: buildEnvironmentVariablesFrom
Function Size: 523 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: buildEnvironmentVariablesFrom (TypeScript)\n// Builds environment variables from injected environments and process.env.\n\nfunction buildEnvironmentVariablesFrom(\n  injectedEnvironments: Record<string, string>\n): Record<string, string | undefined> {\n  const pairs = Object.keys(process.env)
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:21:39.713Z
Question Type: multiple-choice
Function: stringifyCookie
Function Size: 418 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: stringifyCookie (TypeScript)\n// Converts a cookie object into a string suitable for the Set-Cookie header.\n\ndeclare function stringifyCookie(c: ResponseCookie | RequestCookie): string {\n    const pairs = [];\n    for (const [key, value] of Object.entries(c)) {\n        if (key !== 'expire
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:21:52.840Z
Question Type: select-all
Function: parseSetCookie
Function Size: 864 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: parseSetCookie (TypeScript)\n// Parses a Set-Cookie header value into a ResponseCookie object.\n\ndeclare function parseSetCookie(setCookie: string): undefined | ResponseCookie {\n    const cookieParts = setCookie.split('; ');\n    const [nameValue, ...attributes] = cookieParts;\n    const [n
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:21:57.755Z
Question Type: multiple-choice
Function: generateValidatorFile
Function Size: 681 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: generateValidatorFile (TypeScript)\n// Generates a validator file based on routes manifest.\n\nexport function generateValidatorFile(\n  routesManifest: RouteTypesManifest\n): string {\n  const generateValidations = (\n    paths: string[],\n    type:\n      | 'AppPageConfig'\n      | 'PagesPageCo
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:21:58.243Z
Question Type: true-false
Function: loadManifests
Function Size: 7430 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: loadManifests (TypeScript)\n// Loads various manifests required for routing and rendering based on the runtime environment.\n\nprivate loadManifests(\n    srcPage: string,\n    projectDir?: string\n  ): {\n    buildId: string\n    buildManifest: BuildManifest\n    fallbackBuildManifest: BuildMan
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:21:59.820Z
Question Type: order-sequence
Function: parseSetCookie
Function Size: 864 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: parseSetCookie (TypeScript)\n// Parses a Set-Cookie header value into a ResponseCookie object.\n\ndeclare function parseSetCookie(setCookie: string): undefined | ResponseCookie {\n    const cookieParts = setCookie.split('; ');\n    const [nameValue, ...attributes] = cookieParts;\n    const [n
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:22:12.579Z
Question Type: function-variant
Function: parseCookie
Function Size: 430 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: parseCookie (TypeScript)\n// Parses a Cookie header value into a Map of key-value pairs.\n\ndeclare function parseCookie(cookie: string): Map<string, string> {\n    const result = new Map<string, string>();\n    const pairs = cookie.split('; ');\n    for (const pair of pairs) {\n        const 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:22:28.272Z
Question Type: function-variant
Function: buildEnvironmentVariablesFrom
Function Size: 523 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: buildEnvironmentVariablesFrom (TypeScript)\n// Builds environment variables from injected environments and process.env.\n\nfunction buildEnvironmentVariablesFrom(\n  injectedEnvironments: Record<string, string>\n): Record<string, string | undefined> {\n  const pairs = Object.keys(process.env)
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:22:52.099Z
Question Type: select-all
Function: createModuleContext
Function Size: 2643 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: createModuleContext (TypeScript)\n// Creates a module context with runtime and error handling.\n\nasync function createModuleContext(options: ModuleContextOptions) {\n  const warnedEvals = new Set<string>()\n  const warnedWasmCodegens = new Set<string>()\n  const { edgeFunctionEntry } = optio
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1759986286108
Repository: Unknown
Total Questions Generated: 13
Total Chunks Processed: 11
Ended: 2025-10-09T05:23:02.003Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-09T05:34:56.355Z
File: Accept common colon variants sometimes seen as OCR confusions
Functions Extracted: 5


Function 1: buildFlatTokens
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
const buildFlatTokens = (words) => words.map(w => {
    const x0 = w.minX;
    const y0 = w.minY;
    const x1 = w.maxX;
    const y1 = w.maxY;
    const wBox = Math.max(0, x1 - x0);
    const hBox = Math.max(0, y1 - y0);
    const yMid = (y0 + y1) / 2;
    const xMid = (x0 + x1) / 2;
    const trimmedForUser = w.text.replace(/-+$/g, '').trim();
    const userCandidate = trimmedForUser.length ? trimmedForUser : w.text;
    return {
        text: w.text,
        box: [x0, y0, x1, y1],
        w: wBox,
        h: hBox,
        yMid,
        xMid,
        conf: w.confidence,
        isTime: isTimeExact(w.text),
        isUserChars: isUserChars(userCandidate),
    };
});
--------------------------------------------------------------------------------


Function 2: pickTightCluster
Language: JavaScript
Lines: 20
Full Code:
--------------------------------------------------------------------------------
const pickTightCluster = (parts, maxGap) => {
    if (!parts.length)
        return [];
    const ordered = [...parts].sort((a, b) => a.box[0] - b.box[0]);
    let best = [];
    let bestSpan = Infinity;
    let cluster = [];
    const considerCluster = () => {
        if (!cluster.length)
            return;
        const span = cluster[cluster.length - 1].box[2] - cluster[0].box[0];
        if (!best.length || cluster.length > best.length || (cluster.length === best.length && span < bestSpan)) {
            best = [...cluster];
            bestSpan = span;
        }
    };
    for (const token of ordered) {
        if (!cluster.length) {
            cluster = [token];
            continue;
        }
        const prev = cluster[cluster.length - 1];
        if (token.box[0] - prev.box[2] <= maxGap) {
            cluster.push(token);
        }
        else {
            considerCluster();
            cluster = [token];
        }
    }
    considerCluster();
    return best;
};
--------------------------------------------------------------------------------


Function 3: assignBin
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
const assignBin = (token, splitX, timeRight) => {
    if (token.box[2] <= splitX)
        return 'L';
    if (token.box[0] < timeRight && token.box[2] > splitX)
        return 'C';
    return 'R';
};
--------------------------------------------------------------------------------


Function 4: isLeftNoiseToken
Language: JavaScript
Lines: 31
Full Code:
--------------------------------------------------------------------------------
const isLeftNoiseToken = (token, splitX, epsX, medianTokenH) => {
    const [, , x1] = token.box;
    const isGlyphB = token.text?.length === 1 && /^B$/i.test(token.text);
    const isGlyph8 = token.text?.length === 1 && /^8$/.test(token.text);
    const isGlyphTM = token.text?.length === 2 && /^TM$/i.test(token.text);
    const epsMult = Number(process.env.LEFT_NOISE_EPS_MULT) || 1.0;
    const epsMultB = Number(process.env.LEFT_NOISE_B_EPS_MULT) || 1.5;
    const veryLeft = (mult) => x1 <= splitX - epsX * mult;
    const minHMult = Number(process.env.LEFT_NOISE_MIN_H_MULT) || 0.65;
    const maxHMult = Number(process.env.LEFT_NOISE_MAX_H_MULT) || 2.2;
    const plausibleBadgeH = token.h >= minHMult * medianTokenH && token.h <= maxHMult * medianTokenH;
    const widthMaxBMult = Number(process.env.LEFT_NOISE_B_WIDTH_MAX_MULT) || 1.6;
    const skinny8Mult = Number(process.env.LEFT_NOISE_8_WIDTH_MULT) || 0.75;
    const widthOkB = token.w <= widthMaxBMult * medianTokenH;
    const skinny8 = token.w <= skinny8Mult * medianTokenH;
    const widthOkTM = token.w <= (Number(process.env.LEFT_NOISE_TM_WIDTH_MAX_MULT) || 1.2) * medianTokenH;
    const aspect = token.h > 0 ? token.w / token.h : 0;
    const ratioMaxB = Number(process.env.LEFT_NOISE_B_ASPECT_MAX) || 0.9;
    const confMax = Number(process.env.LEFT_NOISE_CONF_MAX) || 0.9;
    const lowConf = (token.conf ?? 0.75) < confMax;
    const noiseB = isGlyphB && veryLeft(epsMultB) && widthOkB && plausibleBadgeH && aspect <= ratioMaxB;
    const noise8 = isGlyph8 && veryLeft(epsMult) && skinny8 && plausibleBadgeH && lowConf;
    const noiseTM = isGlyphTM && veryLeft(epsMult) && widthOkTM && plausibleBadgeH;
    return noiseB || noise8 || noiseTM;
};
--------------------------------------------------------------------------------


Function 5: usernamePostProcess
Language: JavaScript
Lines: 45
Full Code:
--------------------------------------------------------------------------------
const usernamePostProcess = (words, existingRows) => {
    const flat = buildFlatTokens(words);
    const heights = flat.map(t => t.h).filter(Boolean);
    const medianTokenH = (0, utils_1.median)(heights);
    const bandUp = (Number(process.env.USER_BAND_UP) || 2.0) * medianTokenH;
    const bandDown = (Number(process.env.USER_BAND_DOWN) || 1.2) * medianTokenH;
    const anchors = [];
    const yTol = 0.3 * medianTokenH;
    const addAnchor = (anchor) => {
        const idx = anchors.findIndex(existing => Math.abs(existing.yMid - anchor.yMid) <= yTol && !(existing.box[2] < anchor.box[0] || anchor.box[2] < existing.box[0]));
        if (idx >= 0) {
            if ((anchor.conf ?? 0) >= (anchors[idx].conf ?? 0))
                anchors[idx] = anchor;
        }
        else {
            anchors.push(anchor);
        }
    };
    flat
        .filter(t => t.isTime)
        .sort((a, b) => a.yMid - b.yMid || a.xMid - b.xMid)
        .forEach(tk => addAnchor({ text: tk.text, box: tk.box, yMid: tk.yMid, conf: tk.conf }));
    if (!anchors.length && existingRows.length) {
        const orderedRows = [...existingRows].sort((a, b) => (a.minY + a.maxY) / 2 - (b.minY + b.maxY) / 2);
        for (const row of orderedRows) {
            const box = [row.minX, row.minY, row.maxX, row.maxY];
            addAnchor({ text: row.time, box, yMid: (row.minY + row.maxY) / 2, conf: row.confidence });
        }
    }
    const times = anchors.sort((a, b) => a.yMid - b.yMid);
    const rowGaps = times
        .map(t => t.yMid)
        .sort((a, b) => a - b)
        .map((value, idx, arr) => (idx ? value - arr[idx - 1] : 0))
        .filter((_, idx) => idx > 0);
    const thresholds = times.map((_, idx) => ({ rowIdx: idx, up: bandUp, down: bandDown }));
    const perRowTokens = times.map(() => []);
    for (const token of flat) {
        let bestIdx = -1;
        let bestDy = Infinity;
        for (let i = 0; i < times.length; i++) {
            const anchor = times[i];
            if (token.yMid < anchor.yMid - bandUp || token.yMid > anchor.yMid + bandDown)
                continue;
            const dy = Math.abs(token.yMid - anchor.yMid);
            if (dy < bestDy) {
                bestDy = dy;
                bestIdx = i;
            }
        }
        if (bestIdx >= 0)
            perRowTokens[bestIdx].push(token);
    }
    const LINE_Y_TOL = Number(process.env.LINE_Y_TOL) || 0.6;
    const DISTANCE_MAX_H_MULT = Number(process.env.DISTANCE_MAX_H_MULT) || 1.8;
    const WIDTH_PENALTY_MULT = Number(process.env.WIDTH_PENALTY_MULT) || 1.5;
    const BELOW_TOL_H_MULT = Number(process.env.USER_BELOW_TOL_H_MULT) || 0.25;
};
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-09T05:35:50.864Z
File: RidwaanT-motorfest-platform-c62b4f35077c2aba6115e66781ebf1146fd1ce31/functions/lib/index.js
Functions Extracted: 2


Function 1: loadWordInfos
Language: JavaScript
Lines: 24
Full Code:
--------------------------------------------------------------------------------
const loadWordInfos = (annotation, imageWidth, imageHeight) => {
    const words = [];
    const pages = annotation.fullTextAnnotation?.pages ?? [];
    for (const page of pages) {
        const pageWidth = page.width || imageWidth;
        const pageHeight = page.height || imageHeight;
        for (const block of page.blocks ?? []) {
            for (const paragraph of block.paragraphs ?? []) {
                for (const word of paragraph.words ?? []) {
                    const text = word.symbols?.map((symbol) => symbol.text ?? '').join('') ?? '';
                    if (!text)
                        continue;
                    const vertices = (0, vision_2.normalizedVerticesOrFallback)(word.boundingBox, pageWidth, pageHeight);
                    const info = (0, vision_2.verticesToWordInfo)(text, word.confidence ?? 0, vertices);
                    if (info)
                        words.push(info);
                }
            }
        }
    }
    if (!words.length && Array.isArray(annotation.textAnnotations) && annotation.textAnnotations.length > 1) {
        const [, ...wordAnnotations] = annotation.textAnnotations;
        for (const entry of wordAnnotations) {
            const text = entry.description ?? '';
            const vertices = (0, vision_2.normalizedVerticesOrFallback)(entry.boundingPoly, imageWidth, imageHeight);
            const info = (0, vision_2.verticesToWordInfo)(text, entry.score ?? entry.confidence ?? 0.5, vertices);
            if (info)
                words.push(info);
        }
    }
    return words;
};
--------------------------------------------------------------------------------


Function 2: analyzeLeaderboard
Language: JavaScript
Lines: 106
Full Code:
--------------------------------------------------------------------------------
exports.analyzeLeaderboard = (0, https_1.onRequest)(async (req, res) => {
    res.set('Access-Control-Allow-Origin', '*');
    res.set('Access-Control-Allow-Methods', 'POST, OPTIONS');
    res.set('Access-Control-Allow-Headers', 'Content-Type, Authorization');
    if (req.method === 'OPTIONS') {
        res.status(204).send('');
        return;
    }
    if (req.method !== 'POST') {
        respond(res, { matched: false, reason: 'invalid_method', all: [] });
        return;
    }
    try {
        const debug = {};
        const { image, targetUsername } = (req.body ?? {});
        if (typeof image !== 'string' || !image.trim()) {
            respond(res, { matched: false, reason: 'image_required', all: [] }, 400);
            return;
        }
        const base64Image = (0, vision_2.normalizeDataUrl)(image.trim());
        let imageBuffer;
        try {
            imageBuffer = Buffer.from(base64Image, 'base64');
        }
        catch {
            respond(res, { matched: false, reason: 'invalid_image_encoding', all: [] }, 400);
            return;
        }
        if (!imageBuffer.length) {
            respond(res, { matched: false, reason: 'empty_image', all: [] }, 400);
            return;
        }
        if (imageBuffer.length > constants_1.MAX_IMAGE_BYTES) {
            respond(res, { matched: false, reason: 'image_too_large', all: [] }, 413);
            return;
        }
        const oriented = (0, sharp_1.default)(imageBuffer).rotate();
        const metadata = await oriented.metadata();
        const imageWidth = metadata.width ?? 0;
        const imageHeight = metadata.height ?? 0;
        if (!imageWidth || !imageHeight) {
            respond(res, { matched: false, reason: 'unsupported_image', all: [] }, 400);
            return;
        }
        const orientedBuffer = await oriented.toBuffer();
        const [annotation] = await visionClient.annotateImage({
            image: { content: orientedBuffer },
            features: [
                { type: 'DOCUMENT_TEXT_DETECTION' },
                { type: 'TEXT_DETECTION' },
            ],
        });
        const words = loadWordInfos(annotation, imageWidth, imageHeight);
        if (!words.length) {
            respond(res, { matched: false, reason: 'ocr_empty', all: [] }, 422);
            return;
        }
        let candidateRows = await (0, rows_1.buildCandidateRowsFromWords)(words, imageWidth, imageHeight, debug);
        debug.primaryLogicRows = candidateRows.length;
        if (candidateRows.length < 3) {
            debug.fallbackTriggered = true;
            const yThreshold = Math.max(0.025, 12 / Math.max(imageHeight, 1000));
            const groupedLines = (0, rows_1.groupWordsIntoLines)(words, yThreshold);
            debug.fallbackLineCount = groupedLines.length;
            const fallback = await (0, rows_1.buildCandidateRows)(groupedLines, imageWidth, imageHeight, debug);
            debug.positionWordsFound = fallback.positionWordsFound;
            debug.timeWordsFound = fallback.timeWordsFound;
            debug.rejects = fallback.rejects;
            candidateRows = fallback.rows;
            debug.fallbackLogicRows = candidateRows.length;
        }
        if (!candidateRows.length) {
            respond(res, { matched: false, reason: 'no_row_passed_filters', all: [], debug });
            return;
        }
        const bandInfo = (0, rows_1.computeBands)(words);
        const posAssignments = (0, rows_1.assignPositionsFromTokens)(candidateRows, words, bandInfo);
        debug.posAssignments = posAssignments;
        debug.band = bandInfo;
        const usernamePost = (0, username_1.usernamePostProcess)(words, candidateRows);
        debug.usernameDiagnostics = usernamePost.diagnostics;
        debug.usernameRows = usernamePost.rowsDebug;
        if (usernamePost.wordList)
            debug.usernameWordList = usernamePost.wordList;
        try {
            const rowsByY = candidateRows
                .map((row, idx) => ({ idx, y: (row.minY + row.maxY) / 2 }))
                .sort((a, b) => a.y - b.y);
            const usernamesByY = usernamePost.rowsDebug
                .map((row, idx) => ({ idx, y: row.time.yMid }))
                .sort((a, b) => a.y - b.y);
            const pairCount = Math.min(rowsByY.length, usernamesByY.length);
            for (let i = 0; i < pairCount; i++) {
                const rowIdx = rowsByY[i].idx;
                const usernameIdx = usernamesByY[i].idx;
                const chosen = usernamePost.rowsDebug[usernameIdx]?.usernameChosen?.text;
                if (chosen)
                    candidateRows[rowIdx].name = chosen;
            }
        }
        catch (err) {
            logger.debug('username_post_map_failed', { message: err instanceof Error ? err.message : String(err) });
        }
        const scored = await Promise.all(candidateRows.map(async (row, idx) => {
            const highlight = await (0, highlight_1.computeHighlightScore)(orientedBuffer, { minX: row.minX, maxX: row.maxX, minY: row.minY, maxY: row.maxY }, imageWidth, imageHeight);
            candidateRows[idx] = { ...row, highlightScore: highlight.scoreAb, isHighlight: highlight.isHighlight };
            logger.debug('row_highlight_score', {
                rowIdx: idx,
                position: row.position,
                name: row.name,
                time: row.time,
                scoreAb: Number(highlight.scoreAb.toFixed(3)),
                score76: Number(highlight.score76.toFixed(3)),
                samples: highlight.samples,
                isHighlight: highlight.isHighlight,
            });
            return { idx, ...highlight };
        }));
        const deltaEList = scored.map(s => ({
            rowIdx: s.idx,
            dEab: Number(s.scoreAb.toFixed(3)),
            dE76: Number(s.score76.toFixed(3)),
            samples: s.samples,
            pass: s.isHighlight,
        }));
        debug.deltaEList = deltaEList;
        debug.highlightThresholds = { dEab: 31, dE76: 40 };
        const highlightSummary = scored.map(s => {
            const row = candidateRows[s.idx];
            return {
                position: row.position,
                name: row.name,
                time: row.time,
                highlightScoreAb: Number(s.scoreAb.toFixed(3)),
                highlightScore76: Number(s.score76.toFixed(3)),
                samples: s.samples,
                isHighlight: s.isHighlight,
            };
        });
        debug.rowHighlights = highlightSummary;
        const sortedByAb = [...scored].sort((a, b) => a.scoreAb - b.scoreAb);
        if (sortedByAb.length >= 2) {
            const gap = sortedByAb[1].scoreAb - sortedByAb[0].scoreAb;
            debug.highlightGap = Number(gap.toFixed(3));
        }
        const allRows = candidateRows.map(r => ({ position: r.position, name: r.name, time: r.time }));
        const highlightRows = scored.filter(s => s.isHighlight);
        const normalizedTarget = typeof targetUsername === 'string' ? targetUsername.trim().toLowerCase() : null;
        let chosen = null;
        if (normalizedTarget) {
            const matches = highlightRows
                .filter(s => candidateRows[s.idx].name.trim().toLowerCase() === normalizedTarget)
                .sort((a, b) => a.scoreAb - b.scoreAb);
            chosen = matches[0] ?? null;
        }
        else if (highlightRows.length) {
            chosen = [...highlightRows].sort((a, b) => a.scoreAb - b.scoreAb)[0];
        }
        debug.finalCandidateRows = candidateRows.length;
        debug.ocrConfidenceAvg = candidateRows.length
            ? Number((candidateRows.reduce((acc, row) => acc + (row.confidence || 0), 0) /
                Math.max(1, candidateRows.length)).toFixed(4))
            : 0;
        if (chosen) {
            const matchedRow = candidateRows[chosen.idx];
            debug.matchedRowHighlight = {
                position: matchedRow.position,
                name: matchedRow.name,
                time: matchedRow.time,
                highlightScoreAb: Number(chosen.scoreAb.toFixed(3)),
                highlightScore76: Number(chosen.score76.toFixed(3)),
                samples: chosen.samples,
                isHighlight: true,
            };
        }
        if (!chosen) {
            respond(res, { matched: false, reason: 'no_highlighted_row_matched', all: allRows, debug });
            return;
        }
        const chosenRow = candidateRows[chosen.idx];
        respond(res, {
            matched: true,
            row: { position: chosenRow.position, name: chosenRow.name, time: chosenRow.time },
            all: allRows,
            debug,
        });
    }
    catch (error) {
        logger.error('analyzeLeaderboard failed', error);
        respond(res, { matched: false, reason: 'internal', all: [] }, 500);
    }
});
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-09T05:36:10.924Z
File: RidwaanT-motorfest-platform-c62b4f35077c2aba6115e66781ebf1146fd1ce31/functions/src/lib/vision.ts
Functions Extracted: 4


Function 1: normalizeDataUrl
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
export const normalizeDataUrl = (data: string): string => {
  const [, maybeBase64] = data.split(',');
  if (maybeBase64 && data.startsWith('data:')) return maybeBase64;
  return data;
};
--------------------------------------------------------------------------------


Function 2: toNormalizedVertices
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
export const toNormalizedVertices = (
  vertices: Vertex[] | undefined | null,
  width: number,
  height: number,
): NormalizedVertex[] => {
  if (!vertices || vertices.length === 0) return [];
  const safeWidth = width || 1;
  const safeHeight = height || 1;
  return vertices.map(v => ({
    x: Math.min(Math.max((v.x ?? 0) / safeWidth, 0), 1),
    y: Math.min(Math.max((v.y ?? 0) / safeHeight, 0), 1),
  }));
};
--------------------------------------------------------------------------------


Function 3: normalizedVerticesOrFallback
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export const normalizedVerticesOrFallback = (
  bounding: { normalizedVertices?: Vertex[] | null; vertices?: Vertex[] | null } | undefined,
  width: number,
  height: number,
): NormalizedVertex[] => {
  const normalized = (bounding?.normalizedVertices ?? [])
    .map(v => ({ x: v?.x ?? 0, y: v?.y ?? 0 }))
    .filter(v => typeof v.x === 'number' && typeof v.y === 'number');
  if (normalized.length > 0) return normalized;
  return toNormalizedVertices(bounding?.vertices ?? [], width, height);
};
--------------------------------------------------------------------------------


Function 4: verticesToWordInfo
Language: TypeScript
Lines: 17
Full Code:
--------------------------------------------------------------------------------
export const verticesToWordInfo = (
  text: string,
  confidence: number,
  vertices: NormalizedVertex[],
): WordInfo | null => {
  if (vertices.length === 0) return null;
  const xs = vertices.map(v => v.x);
  const ys = vertices.map(v => v.y);
  const minX = Math.min(...xs);
  const maxX = Math.max(...xs);
  const minY = Math.min(...ys);
  const maxY = Math.max(...ys);
  const centerX = (minX + maxX) / 2;
  const centerY = (minY + maxY) / 2;
  return { text, confidence, minX, maxX, minY, maxY, centerX, centerY };
};
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:37:01.408Z
Question Type: multiple-choice
Function: normalizedVerticesOrFallback
Function Size: 649 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: normalizedVerticesOrFallback (TypeScript)\n// Returns normalized vertices when provided; otherwise converts raw vertices as a fallback.\n\nexport const normalizedVerticesOrFallback = (\n  bounding: { normalizedVertices?: Vertex[] | null; vertices?: Vertex[] | null } | undefined,\n  width: nu
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:37:02.190Z
Question Type: order-sequence
Function: verticesToWordInfo
Function Size: 658 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: verticesToWordInfo (TypeScript)\n// Builds the bounding-box metadata for a recognized word using its normalized vertices.\n\nexport const verticesToWordInfo = (\n  text: string,\n  confidence: number,\n  vertices: NormalizedVertex[],\n): WordInfo | null => {\n  if (vertices.length === 0) return
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:37:10.801Z
Question Type: function-variant
Function: toNormalizedVertices
Function Size: 549 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: toNormalizedVertices (TypeScript)\n// Converts vertex coordinates to values in [0, 1] relative to the input width/height.\n\nexport const toNormalizedVertices = (\n  vertices: Vertex[] | undefined | null,\n  width: number,\n  height: number,\n): NormalizedVertex[] => {\n  if (!vertices || verti
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:37:11.407Z
Question Type: function-variant
Function: isLeftNoiseToken
Function Size: 1855 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: isLeftNoiseToken (JavaScript)\n// Determines if a token is considered noise based on its characteristics and position.\n\nconst isLeftNoiseToken = (token, splitX, epsX, medianTokenH) => {\n    const [, , x1] = token.box;\n    const isGlyphB = token.text?.length === 1 && /^B$/i.test(token.tex
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:37:30.527Z
Question Type: true-false
Function: loadWordInfos
Function Size: 1663 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: loadWordInfos (JavaScript)\n// Extracts word information from image annotations.\n\nconst loadWordInfos = (annotation, imageWidth, imageHeight) => {\n    const words = [];\n    const pages = annotation.fullTextAnnotation?.pages ?? [];\n    for (const page of pages) {\n        const pageWidth =
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:37:31.681Z
Question Type: select-all
Function: usernamePostProcess
Function Size: 2796 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: usernamePostProcess (JavaScript)\n// Processes username tokens to identify and categorize them based on time-related characteristics.\n\nconst usernamePostProcess = (words, existingRows) => {\n    const flat = buildFlatTokens(words);\n    const heights = flat.map(t => t.h).filter(Boolean);\n 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:37:35.784Z
Question Type: multiple-choice
Function: assignBin
Function Size: 341 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: assignBin (JavaScript)\n// Assigns a bin ('L', 'C', 'R') to a token based on its position relative to split and time boundaries.\n\nconst assignBin = (token, splitX, timeRight) => {\n    if (token.box[2] <= splitX)\n        return 'L';\n    if (token.box[0] < timeRight && token.box[2] > split
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:37:42.340Z
Question Type: order-sequence
Function: analyzeLeaderboard
Function Size: 8980 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: analyzeLeaderboard (JavaScript)\n// Analyzes the leaderboard by processing an image and extracting relevant data.\n\nexports.analyzeLeaderboard = (0, https_1.onRequest)(async (req, res) => {\n    res.set('Access-Control-Allow-Origin', '*');\n    res.set('Access-Control-Allow-Methods', 'POST,
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:38:01.459Z
Question Type: select-all
Function: analyzeLeaderboard
Function Size: 8980 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: analyzeLeaderboard (JavaScript)\n// Analyzes the leaderboard by processing an image and extracting relevant data.\n\nexports.analyzeLeaderboard = (0, https_1.onRequest)(async (req, res) => {\n    res.set('Access-Control-Allow-Origin', '*');\n    res.set('Access-Control-Allow-Methods', 'POST,
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:38:06.371Z
Question Type: select-all
Function: buildFlatTokens
Function Size: 812 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: buildFlatTokens (JavaScript)\n// Transforms an array of words into a flat structure with bounding box and other properties.\n\nconst buildFlatTokens = (words) => words.map(w => {\n    const x0 = w.minX;\n    const y0 = w.minY;\n    const x1 = w.maxX;\n    const y1 = w.maxY;\n    const wBox = Ma
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1759986286108
Repository: Unknown
Total Questions Generated: 3
Total Chunks Processed: 11
Ended: 2025-10-09T05:38:06.375Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-09T05:44:12.300Z
File: docker-compose-ce463d5/docs/yaml/main/generate.go
Functions Extracted: 1


Function 1: generateDocs
Language: Go
Lines: 31
Full Code:
--------------------------------------------------------------------------------
func generateDocs(opts *options) error {
	dockerCLI, err := command.NewDockerCli()
	if err != nil {
		return err
	}
	cmd := &cobra.Command{
		Use:               "docker",
		DisableAutoGenTag: true,
	}
	cmd.AddCommand(compose.RootCommand(dockerCLI, nil))
	disableFlagsInUseLine(cmd)

	tool, err := clidocstool.New(clidocstool.Options{
		Root:      cmd,
		SourceDir: opts.source,
		TargetDir: opts.target,
		Plugin:    true,
	})
	if err != nil {
		return err
	}
	for _, format := range opts.formats {
		switch format {
		case "yaml":
			if err := tool.GenYamlTree(cmd); err != nil {
				return err
			}
		case "md":
			if err := tool.GenMarkdownTree(cmd); err != nil {
				return err
			}
		default:
			return fmt.Errorf("unknown format %q", format)
		}
	}
	return nil
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-09T05:44:23.746Z
File: are checked.
Functions Extracted: 2


Function 1: visitAll
Language: Go
Lines: 5
Full Code:
--------------------------------------------------------------------------------
func visitAll(root *cobra.Command, fn func(*cobra.Command)) {
	for _, cmd := range root.Commands() {
		visitAll(cmd, fn)
	}
	fn(root)
}
--------------------------------------------------------------------------------


Function 2: main
Language: Go
Lines: 12
Full Code:
--------------------------------------------------------------------------------
func main() {
	cwd, _ := os.Getwd()
	opts := &options{
		source:  filepath.Join(cwd, "docs", "reference"),
		target:  filepath.Join(cwd, "docs", "reference"),
		formats: []string{"yaml", "md"},
	}
	fmt.Printf("Project root: %s\n", opts.source)
	fmt.Printf("Generating yaml files into %s\n", opts.target)
	if err := generateDocs(opts); err != nil {
		_, _ = fmt.Fprintf(os.Stderr, "Failed to generate documentation: %s\n", err.Error())
	}
}
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:44:33.881Z
Question Type: select-all
Function: main
Function Size: 527 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: main (Go)\n// Main function that sets options and generates documentation.\n\nfunc main() {\n	cwd, _ := os.Getwd()\n	opts := &options{\n		source:  filepath.Join(cwd, "docs", "reference"),\n		target:  filepath.Join(cwd, "docs", "reference"),\n		formats: []string{"yaml", "md"},\n	}\n	fmt.Printf("Pr
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:44:39.649Z
Question Type: true-false
Function: visitAll
Function Size: 233 characters
Questions Generated: 4
Repository: Unknown
Function Preview: // Function: visitAll (Go)\n// Recursively visits all commands and applies the provided function.\n\nfunc visitAll(root *cobra.Command, fn func(*cobra.Command)) {\n	for _, cmd := range root.Commands() {\n		visitAll(cmd, fn)\n	}\n	fn(root)\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:44:40.784Z
Question Type: multiple-choice
Function: visitAll
Function Size: 233 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: visitAll (Go)\n// Recursively visits all commands and applies the provided function.\n\nfunc visitAll(root *cobra.Command, fn func(*cobra.Command)) {\n	for _, cmd := range root.Commands() {\n		visitAll(cmd, fn)\n	}\n	fn(root)\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:44:52.661Z
Question Type: function-variant
Function: visitAll
Function Size: 233 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: visitAll (Go)\n// Recursively visits all commands and applies the provided function.\n\nfunc visitAll(root *cobra.Command, fn func(*cobra.Command)) {\n	for _, cmd := range root.Commands() {\n		visitAll(cmd, fn)\n	}\n	fn(root)\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:44:56.675Z
Question Type: multiple-choice
Function: generateDocs
Function Size: 873 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: generateDocs (Go)\n// Generates documentation for Docker CLI commands in specified formats.\n\nfunc generateDocs(opts *options) error {\n	dockerCLI, err := command.NewDockerCli()\n	if err != nil {\n		return err\n	}\n	cmd := &cobra.Command{\n		Use:               "docker",\n		DisableAutoGenTag: tru
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:45:07.833Z
Question Type: select-all
Function: main
Function Size: 527 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: main (Go)\n// Main function that sets options and generates documentation.\n\nfunc main() {\n	cwd, _ := os.Getwd()\n	opts := &options{\n		source:  filepath.Join(cwd, "docs", "reference"),\n		target:  filepath.Join(cwd, "docs", "reference"),\n		formats: []string{"yaml", "md"},\n	}\n	fmt.Printf("Pr
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:45:12.001Z
Question Type: order-sequence
Function: main
Function Size: 527 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: main (Go)\n// Main function that sets options and generates documentation.\n\nfunc main() {\n	cwd, _ := os.Getwd()\n	opts := &options{\n		source:  filepath.Join(cwd, "docs", "reference"),\n		target:  filepath.Join(cwd, "docs", "reference"),\n		formats: []string{"yaml", "md"},\n	}\n	fmt.Printf("Pr
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:45:20.951Z
Question Type: function-variant
Function: generateDocs
Function Size: 873 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: generateDocs (Go)\n// Generates documentation for Docker CLI commands in specified formats.\n\nfunc generateDocs(opts *options) error {\n	dockerCLI, err := command.NewDockerCli()\n	if err != nil {\n		return err\n	}\n	cmd := &cobra.Command{\n		Use:               "docker",\n		DisableAutoGenTag: tru
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:45:28.274Z
Question Type: order-sequence
Function: generateDocs
Function Size: 873 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: generateDocs (Go)\n// Generates documentation for Docker CLI commands in specified formats.\n\nfunc generateDocs(opts *options) error {\n	dockerCLI, err := command.NewDockerCli()\n	if err != nil {\n		return err\n	}\n	cmd := &cobra.Command{\n		Use:               "docker",\n		DisableAutoGenTag: tru
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:45:46.776Z
Question Type: select-all
Function: generateDocs
Function Size: 873 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: generateDocs (Go)\n// Generates documentation for Docker CLI commands in specified formats.\n\nfunc generateDocs(opts *options) error {\n	dockerCLI, err := command.NewDockerCli()\n	if err != nil {\n		return err\n	}\n	cmd := &cobra.Command{\n		Use:               "docker",\n		DisableAutoGenTag: tru
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1759986286108
Repository: Unknown
Total Questions Generated: 15
Total Chunks Processed: 3
Ended: 2025-10-09T05:45:49.797Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-09T05:57:27.264Z
File: mltoureK-realcoder-ai-9e3b1f5/src/lib/question-plugins/multipleChoice.ts
Functions Extracted: 2


Function 1: createUserPrompt
Language: TypeScript
Lines: 31
Full Code:
--------------------------------------------------------------------------------
function createUserPrompt(chunk: string): string {
  return `Generate 3 hard difficulty multiple-choice question based on this code chunk:

${chunk}

CRITICAL: Return ONLY valid JSON array. No text before or after. No markdown. No explanations.

IMPORTANT REQUIREMENTS:
1. IGNORE any code that is not in the primary programming language of this repository.
2. ONLY generate questions about functions that actually exist in the provided code chunk
3. The function name in "snippet" must match a real function from the code
4. Include the actual function code in the "codeContext" field with PROPER FORMATTING
5. The correct answer should be based on the actual function implementation
6. Create realistic incorrect options that are plausible but wrong
7. SCENARIO CONTEXT: Create realistic development scenarios that explain WHY this function exists
8. CODE FORMATTING: Format the codeContext with proper indentation and line breaks for readability
9. CHALLENGING DISTRACTORS: Make incorrect options subtle and plausible - they should test understanding of the function's behavior, not just obvious differences
10. RANDOMIZE ANSWERS: CRITICAL - Place the correct answer in a random position (1-4), not always first or last
11. AVOID PATTERNS: Do NOT make the correct answer always the longest, shortest, or most detailed option
12. TEST UNDERSTANDING: Focus on edge cases, side effects, data flow, or implementation details rather than obvious function purposes
13. SUBTLE DIFFERENCES: Incorrect options should differ in subtle ways - wrong data types, missing edge cases, incorrect side effects, wrong return values, or different execution order
14. RANDOM POSITIONING: MANDATORY - Vary the correct answer position across questions (sometimes A, B, C, or D)
15. EQUAL LENGTH OPTIONS: Make all options roughly the same length to avoid length-based guessing

FOCUS ON UNIVERSAL PROGRAMMING CONCEPTS:



AVOID:
- Repository-specific trivia


EXPLANATION REQUIREMENTS:
- Explain WHY the correct answer is right
- Explain WHY incorrect answers are wrong
- Focus on learning value

Format:
[
  {
    "snippet": "function name from code",
    "quiz": {
      "type": "multiple-choice",
      "question": "In a [REALISTIC_APP_CONTEXT], what does the function [FUNCTION_NAME] do?",
      "codeContext": "Display full function from the code chunk",
      "options": [
        "Subtly incorrect description that sounds plausible",
        "Correct description of what the function actually does", 
        "Subtly incorrect description that sounds plausible",
        "Subtle but incorrect description that sounds plausible"
      ],
      "answer": "2",
      "explanation": "why this is correct (at least 5 sentences) based on the actual function code"
    }
  }
]`;
}
--------------------------------------------------------------------------------


Function 2: formatCodeContext
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function formatCodeContext(codeContext: string): string {
  if (!codeContext) return codeContext;

  // Format the code context for better readability
  return codeContext.trim();
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-09T05:57:55.917Z
File: mltoureK-realcoder-ai-9e3b1f5/src/lib/question-plugins/functionVariant.ts
Functions Extracted: 1


Function 1: generate
Language: TypeScript
Lines: 38
Full Code:
--------------------------------------------------------------------------------
async generate(params: GenerateParams): Promise<RawQuestion[]> {
    const { chunk, apiKey, timeoutMs, retry, abortSignal } = params;
    const questionsPerChunk = 3;
    const randomTextForPrompt = [" longer", "sameish length", "slightly longer"];

    const generated: RawQuestion[] = [];
    try {
      let response: Response | null = null;
      for (let attempt = 0; attempt < retry.attempts; attempt++) {
        const controller = new AbortController();
        const onAbort = () => controller.abort();
        if (abortSignal) abortSignal.addEventListener('abort', onAbort);
        const timeoutId = setTimeout(() => controller.abort(), timeoutMs);
        try {
          response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${apiKey}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              model: 'gpt-4o-mini',
              messages: [
                { role: 'system', content: 'You are a JSON generator. You MUST return ONLY valid JSON with no additional text, explanations, or markdown formatting.' },
                { role: 'user', content: `Generate ${questionsPerChunk} hard difficulty function-variant quiz questions that can be answered based on the json snippet function that the question uses from the code chunk:\n\n${chunk}\n\nCRITICAL: Return ONLY valid JSON array. No text before or after. No markdown. No explanations.\n\nIMPORTANT REQUIREMENTS:\n1. ONLY generate questions about functions that actually exist in the provided code chunk\n2. The function name in "snippet" A functionfrom the code\n3. The correct variant must be the actual function implementation from the code\n4. Incorrect variants should have realistic bugs\n                 The correct answer should NEVER be obviously longer or more detailed than incorrect options.\n\nFOCUS ON UNIVERSAL PROGRAMMING CONCEPTS:\n\n\nAVOID:\n- Repository-specific trivia\n\n\nEXPLANATION REQUIREMENTS:\n- Explain WHY the correct answer is right\n- Explain WHY incorrect answers are wrong\n- Include practical examples\n- Focus on learning value\n\nFormat:\n[\n  {\n    \"snippet\": \"show complete function(and code)  that the question uses from the code chunk\",\n    \"quiz\": {\n      \"type\": \"function-variant\",\n      \"question\": \"Ask the user to select the function that accomplishes very specific instructions that only the correct answer accomplishes [insert function purpose] and watchout for [List 3 errors that the wrong answers have]"\,\n      \"variants\": [\n        {\n          \"id\": \"A\",\n          \"code\": \"Display full function from the code chunk\",\n          \"isCorrect\": true,\n          \"explanation\": \"Detailed explanation (3-5 sentences) with a humorous snarky tone that makes user feel smart for getting it right\"\n        },\n        {\n          \"id\": \"B\",\n          \"code\": \"Display full correct function from the code chunk with a functional error added to it\",\n          \"isCorrect\": false,\n          \"explanation\": \"Longer explanation (3-5 sentences) on why this specific bug is wrong in a condescending tone\"\n        },\n        {\n          \"id\": \"C\",\n          \"code\": \"Display full correct function from the code chunk with a functional error added to it\",\n          \"isCorrect\": false,\n          \"explanation\": \"Encouraging and funny explanation (3-5 sentences) on why this specific bug is wrong. \"\n        },\n        {\n          \"id\": \"D\",\n          \"code\": \"correct function with a functional error added to it\",\n          \"isCorrect\": false,\n          \"explanation\": \"Here is why this specific bug is wrong (3-5 sentences), and here is an example to further explain that\"\n        }\n      ]\n    }\n  }\n]` }
            });
          });
          clearTimeout(timeoutId);
          if (response && response.ok) {
            const data = await response.json();
            generated.push(...data);
            break;
          }
        } catch (error) {
          if (attempt === retry.attempts - 1) throw error;
        }
      }
    } catch (error) {
      console.error('Error generating questions:', error);
    }
    return generated;
  }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-09T05:58:14.583Z
File: mltoureK-realcoder-ai-9e3b1f5/src/components/QuizHistory.tsx
Functions Extracted: 5


Function 1: loadQuizData
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
const loadQuizData = async () => {
    try {
      setLoading(true);
      const [history, stats, user, usage] = await Promise.all([
        getQuizHistory(userId, 20),
        getUserQuizStats(userId),
        getUser(userId),
        canUserTakeQuiz(userId)
      ]);

      setQuizHistory(history);
      setUserStats(stats);
      setUserInfo(user);
      setUsageInfo(usage);
    } catch (err) {
      console.error('Error loading quiz data:', err);
      setError('Failed to load quiz history');
    } finally {
      setLoading(false);
    }
  };
--------------------------------------------------------------------------------


Function 2: formatDate
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
const formatDate = (timestamp: any) => {
    if (!timestamp) return 'Unknown date';
    const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };
--------------------------------------------------------------------------------


Function 3: getScoreColor
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
const getScoreColor = (score: number, total: number) => {
    const percentage = (score / total) * 100;
    if (percentage >= 80) return 'text-green-600 dark:text-green-400';
    if (percentage >= 60) return 'text-yellow-600 dark:text-yellow-400';
    return 'text-red-600 dark:text-red-400';
  };
--------------------------------------------------------------------------------


Function 4: getScoreBg
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
const getScoreBg = (score: number, total: number) => {
    const percentage = (score / total) * 100;
    if (percentage >= 80) return 'bg-green-100 dark:bg-green-900/20';
    if (percentage >= 60) return 'bg-yellow-100 dark:bg-yellow-900/20';
    return 'bg-red-100 dark:bg-red-900/20';
  };
--------------------------------------------------------------------------------


Function 5: filteredHistory
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
const filteredHistory = () => {
    let filtered = [...quizHistory];
    
    switch (filter) {
      case 'recent':
        filtered.sort((a, b) => b.date - a.date);
        break;
      case 'top':
        filtered.sort((a, b) => b.score - a.score);
        break;
      default:
        break;
    }
    return filtered;
  };
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-09T05:58:57.933Z
File: mltoureK-realcoder-ai-9e3b1f5/src/lib/question-plugins/orderSequence.ts
Functions Extracted: 1


Function 1: generate
Language: TypeScript
Lines: 45
Full Code:
--------------------------------------------------------------------------------
async generate(params: GenerateParams): Promise<RawQuestion[]> {
    const { chunk, apiKey, timeoutMs, retry, abortSignal } = params;
    const questionsPerChunk = 1;

    const generated: RawQuestion[] = [];
    try {
      let response: Response | null = null;
      for (let attempt = 0; attempt < retry.attempts; attempt++) {
        const controller = new AbortController();
        const onAbort = () => controller.abort();
        if (abortSignal) abortSignal.addEventListener('abort', onAbort);
        const timeoutId = setTimeout(() => controller.abort(), timeoutMs);
        try {
          response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${apiKey}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              model: 'gpt-4o-mini',
              messages: [
                { role: 'system', content: 'You are a JSON generator. You MUST return ONLY valid JSON with no additional text, explanations, or markdown formatting.' },
                { role: 'user', content: `Generate ${questionsPerChunk} order-sequence quiz questions (with detailed necessary context to answer question fairly) that test UNIVERSAL programming concepts inspired by this code:
                \n\n${chunk}\n\nCRITICAL: Return ONLY valid JSON array. No text before or after. No markdown. No explanations.\n\nIMPORTANT REQUIREMENTS:
                1. Use the SAME programming language as the code chunk provided\n2. Test PROGRAMMING KNOWLEDGE, not repository-specific function names or trivia\n3. Use GENERIC code patterns that could apply to any codebase\n4. Focus on UNIVERSAL concepts:
                 5. Steps should be REALISTIC code in the same language as the chunk\n6. Include 2-3 educational distractors that test common programming mistakes\n7. Make questions about CODING ABILITY, not memorizing specific variable names\n8. Test logical thinking and execution flow understanding\n9. Avoid repository-specific function signatures, variable names, or business logic\n10. Prepend a brief, neutral background context (1-2 sentences) directly in the question string, describing what the function is supposed to do and the realistic scenario. Do not include code/file names or repo-specific terms\n11. If multiple valid execution orders exist, include either an "acceptableOrders" field (array of arrays of step IDs) or a "constraints" field (array of precedence pairs like ["A","B"] or {"before":"A","after":"B"}) so the grader can accept all valid answers\n12. When alternates exist (e.g., step1 and step2 are independent), you MUST populate "acceptableOrders" with all valid sequences (or provide "constraints"); do NOT leave it empty
                 BREAKDOWN APPROACH:\n- Analyze the function's logical flow and dependencies\n- Identify initialization, processing, and cleanup phases\n- Consider async operations, error handling, and resource management\n- Break down into 4-6 logical steps that must happen in sequence\n- Include 2 realistic distractors that represent common mistakes\n- Focus on the actual execution order, not just code structure\n
Format:\n[\n  {\n    "snippet": "actual function name from the code chunk",\n    "quiz": {\n      "type": "order-sequence",\n      "question": "[Background: Provide a concise, neutral 1-2 sentence context that explains what the function is intended to do and the realistic scenario, without using code/file names or repo-specific terms.] In this context, what is the correct execution order for this function?",\n      "steps": [\n        {\n          "id": "step1",\n          "code": "[First logical step in the same programming language as the code chunk]",\n          "explanation": "[Why this step comes first]"\n        },\n        {\n          "id": "step2",\n          "code": "[Second logical step in the same programming language as the code chunk]",\n          "explanation": "[Why this step comes second]"\n        },\n        {\n          "id": "step3",\n          "code": "[Third logical step in the same programming language as the code chunk]",\n          "explanation": "[Why this step comes third]"\n        },\n        {\n          "id": "step4",\n          "code": "[Final logical step in the same programming language as the code chunk]",\n          "explanation": "[Why this step comes last]"\n        },\n        {\n          "id": "distractor1",\n          "code": "[Realistic but incorrect step that tests a common mistake]",\n          "explanation": "[Why this step would fail or cause issues]",\n          "isDistractor": true\n        },\n        {\n          "id": "distractor2",\n          "code": "[Another realistic but incorrect step that tests a different mistake]",\n          "explanation": "[Why this step would fail or cause issues]",\n          "isDistractor": true\n        }\n      ],\n      "correctOrder": ["step1", "step2", "step3", "step4"],\n      "acceptableOrders": [\n        ["step1", "step2", "step3", "step4"],\n        ["step2", "step1", "step3", "step4"]\n      ],\n      "constraints": [],\n      "explanation": "[Clear explanation (at least 5 sentences) of why this order is correct and what would happen if steps were reordered]"
    }
  }\n]` }
              ],
              temperature: 0.7,
              max_tokens: 2000
            }),
            signal: controller.signal
          });
          clearTimeout(timeoutId);
          if (abortSignal) abortSignal.removeEventListener('abort', onAbort);
          if (response && (response.ok || response.status !== 429)) break;
        } catch (e: any) {
          clearTimeout(timeoutMs as unknown as NodeJS.Timeout);
          if (abortSignal) abortSignal.removeEventListener('abort', onAbort);
          if (e && e.name === 'AbortError') throw e;
        }
        const backoff = retry.backoffBaseMs * Math.pow(2, attempt);
        await delay(backoff);
      }

      if (response && response.ok) {
        const data = await response.json();
        const content = data.choices[0].message.content as string;
        try {
          let cleanContent = content.trim();
          if (cleanContent.startsWith('```json')) cleanContent = cleanContent.replace(/^```json\s*/, '');
          if (cleanContent.startsWith('```')) cleanContent = cleanContent.replace(/^```\s*/, '');
          if (cleanContent.endsWith('```')) cleanContent = cleanContent.replace(/\s*```$/, '');
          const jsonStart = cleanContent.indexOf('[');
          if (jsonStart > 0) cleanContent = cleanContent.substring(jsonStart);
          const jsonEnd = cleanContent.lastIndexOf(']');
          if (jsonEnd > 0 && jsonEnd < cleanContent.length - 1) cleanContent = cleanContent.substring(0, jsonEnd + 1);
          const parsed = JSON.parse(cleanContent);

          parsed.forEach((question: any) => {
            if (!validateQuestionStructure(question)) return;
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:59:10.693Z
Question Type: order-sequence
Function: getScoreColor
Function Size: 399 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getScoreColor (TypeScript)\n// Determines the color class based on the score percentage.\n\nconst getScoreColor = (score: number, total: number) => {\n    const percentage = (score / total) * 100;\n    if (percentage >= 80) return 'text-green-600 dark:text-green-400';\n    if (percentage >= 6
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:59:12.716Z
Question Type: order-sequence
Function: createUserPrompt
Function Size: 2892 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: createUserPrompt (TypeScript)\n// Generates a user prompt for creating multiple choice questions based on a code chunk.\n\nfunction createUserPrompt(chunk: string): string {\n  return `Generate 3 hard difficulty multiple-choice question based on this code chunk:\n\n${chunk}\n\nCRITICAL: Return 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:59:18.476Z
Question Type: multiple-choice
Function: getScoreColor
Function Size: 399 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: getScoreColor (TypeScript)\n// Determines the color class based on the score percentage.\n\nconst getScoreColor = (score: number, total: number) => {\n    const percentage = (score / total) * 100;\n    if (percentage >= 80) return 'text-green-600 dark:text-green-400';\n    if (percentage >= 6
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:59:23.466Z
Question Type: true-false
Function: generate
Function Size: 7081 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: generate (TypeScript)\n// Generates order-sequence quiz questions based on provided code chunk.\n\nasync generate(params: GenerateParams): Promise<RawQuestion[]> {\n    const { chunk, apiKey, timeoutMs, retry, abortSignal } = params;\n    const questionsPerChunk = 1;\n\n    const generated: Ra
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:59:32.175Z
Question Type: multiple-choice
Function: formatCodeContext
Function Size: 287 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: formatCodeContext (TypeScript)\n// Formats the provided code context for better readability.\n\nfunction formatCodeContext(codeContext: string): string {\n  if (!codeContext) return codeContext;\n\n  // Format the code context for better readability\n  return codeContext.trim();\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:59:42.678Z
Question Type: select-all
Function: formatDate
Function Size: 424 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: formatDate (TypeScript)\n// Formats a timestamp into a readable date string.\n\nconst formatDate = (timestamp: any) => {\n    if (!timestamp) return 'Unknown date';\n    const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);\n    return date.toLocaleDateString('en-US', {\n  
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T05:59:53.484Z
Question Type: function-variant
Function: getScoreColor
Function Size: 399 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: getScoreColor (TypeScript)\n// Determines the color class based on the score percentage.\n\nconst getScoreColor = (score: number, total: number) => {\n    const percentage = (score / total) * 100;\n    if (percentage >= 80) return 'text-green-600 dark:text-green-400';\n    if (percentage >= 6
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T06:00:14.088Z
Question Type: select-all
Function: getScoreBg
Function Size: 395 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: getScoreBg (TypeScript)\n// Determines the background class based on the score percentage.\n\nconst getScoreBg = (score: number, total: number) => {\n    const percentage = (score / total) * 100;\n    if (percentage >= 80) return 'bg-green-100 dark:bg-green-900/20';\n    if (percentage >= 60)
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T06:00:18.549Z
Question Type: select-all
Function: createUserPrompt
Function Size: 2892 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: createUserPrompt (TypeScript)\n// Generates a user prompt for creating multiple choice questions based on a code chunk.\n\nfunction createUserPrompt(chunk: string): string {\n  return `Generate 3 hard difficulty multiple-choice question based on this code chunk:\n\n${chunk}\n\nCRITICAL: Return 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T06:00:21.006Z
Question Type: function-variant
Function: generate
Function Size: 7081 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: generate (TypeScript)\n// Generates order-sequence quiz questions based on provided code chunk.\n\nasync generate(params: GenerateParams): Promise<RawQuestion[]> {\n    const { chunk, apiKey, timeoutMs, retry, abortSignal } = params;\n    const questionsPerChunk = 1;\n\n    const generated: Ra
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1759986286108
Repository: Unknown
Total Questions Generated: 11
Total Chunks Processed: 9
Ended: 2025-10-09T06:00:25.097Z
================================================================================

