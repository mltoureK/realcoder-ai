=== FUNCTION EXTRACTION & QUESTION GENERATION LOG ===
Session ID: session-1760138125780
Started: 2025-10-10T23:15:25.780Z


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T23:15:25.782Z
File: observable overloads
Functions Extracted: 5


Function 1: action
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
declare export function action(
    targetOrName: any,
    propertyKeyOrFuc?: any,
    descriptor?: PropertyDescriptor<*> 
): any
declare export function action<T>(name: string, func: T): T
declare export function action<T>(func: T): T
--------------------------------------------------------------------------------


Function 2: reaction
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
declare export function reaction<T>(
    expression: (r: IReactionPublic) => T,
    effect: (arg: T, r: IReactionPublic) => void,
    opts?: IReactionOptions
): () => mixed
--------------------------------------------------------------------------------


Function 3: when
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
declare export function when(
    cond: () => boolean,
    effect: Lambda,
    options?: IWhenOptions
): () => mixed
declare export function when(cond: () => boolean, options?: IWhenOptions): Promise<any>
--------------------------------------------------------------------------------


Function 4: observe
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
declare export function observe<T>(
    value: IObservableValue<T> | IComputedValue<T>,
    listener: (change: IValueDidChange<T>) => void,
    fireImmediately?: boolean
): Lambda

declare export function observe<T>(
    observableArray: IObservableArray<T>,
    listener: (change: IArrayChange<T> | IArraySplice<T>) => void,
    fireImmediately?: boolean
): Lambda

declare export function observe<K, T>(
    observableMap: ObservableMap<K, T>,
    listener: (change: IMapChange<K, T>) => void,
    fireImmediately?: boolean
): Lambda

declare export function observe<K, T>(
    observableMap: ObservableMap<K, T>,
    property: string,
    listener: (change: IValueDidChange<K, T>) => void,
    fireImmediately?: boolean
): Lambda

declare export function observe(
    object: any,
    listener: (change: IObjectChange) => void,
    fireImmediately?: boolean
): Lambda

declare export function observe(
    object: any,
    property: string,
    listener: (change: IValueDidChange<any>) => void,
    fireImmediately?: boolean
): Lambda
--------------------------------------------------------------------------------


Function 5: createAtom
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
declare export function createAtom(
    name: string,
    onBecomeObservedHandler?: () => void,
    onBecomeUnobservedHandler?: () => void
): IAtom
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T23:16:07.961Z
File: Combinators
Functions Extracted: 7


Function 1: pushcontext
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function pushcontext() {
            cx.state.context = { prev: cx.state.context, vars: cx.state.localVars }
            cx.state.localVars = defaultVars
        }
--------------------------------------------------------------------------------


Function 2: popcontext
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function popcontext() {
            cx.state.localVars = cx.state.context.vars
            cx.state.context = cx.state.context.prev
        }
--------------------------------------------------------------------------------


Function 3: pushlex
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function pushlex(type, info) {
            var result = function() {
                var state = cx.state,
                    indent = state.indented
                if (state.lexical.type == "stat") indent = state.lexical.indented
                else
                    for (
                        var outer = state.lexical;
                        outer && outer.type == ")" && outer.align;
                        outer = outer.prev
                    )
                        indent = outer.indented
                state.lexical = new JSLexical(
                    indent,
                    cx.stream.column(),
                    type,
                    null,
                    state.lexical,
                    info
                )
            }
            result.lex = true
            return result
        }
--------------------------------------------------------------------------------


Function 4: statement
Language: JavaScript
Lines: 42
Full Code:
--------------------------------------------------------------------------------
function statement(type, value) {
            if (type == "var")
                return cont(pushlex("vardef", value.length), vardef, expect(";"), poplex)
            if (type == "keyword a") return cont(pushlex("form"), expression, statement, poplex)
            if (type == "keyword b") return cont(pushlex("form"), statement, poplex)
            if (type == "{") return cont(pushlex("}"), block, poplex)
            if (type == ";") return cont()
            if (type == "if") {
                if (
                    cx.state.lexical.info == "else" &&
                    cx.state.cc[cx.state.cc.length - 1] == poplex
                )
                    cx.state.cc.pop()()
                return cont(pushlex("form"), expression, statement, poplex, maybeelse)
            }
            if (type == "function") return cont(functiondef)
            if (type == "for") return cont(pushlex("form"), forspec, statement, poplex)
            if (type == "variable") return cont(pushlex("stat"), maybelabel)
            if (type == "switch")
                return cont(
                    pushlex("form"),
                    expression,
                    pushlex("}", "switch"),
                    expect("{"),
                    block,
                    poplex,
                    poplex
                )
            if (type == "case") return cont(expression, expect(":"))
            if (type == "default") return cont(expect(":"))
            if (type == "catch")
                return cont(
                    pushlex("form"),
                    pushcontext,
                    expect("("),
                    funarg,
                    expect(")"),
                    statement,
                    poplex,
                    popcontext
                )
            if (type == "module")
                return cont(pushlex("form"), pushcontext, afterModule, popcontext, poplex)
            if (type == "class") return cont(pushlex("form"), className, poplex)
            if (type == "export") return cont(pushlex("form"), afterExport, poplex)
            if (type == "import") return cont(pushlex("form"), afterImport, poplex)
            return pass(pushlex("stat"), expression, expect(";"), poplex)
        }
--------------------------------------------------------------------------------


Function 5: expressionInner
Language: JavaScript
Lines: 42
Full Code:
--------------------------------------------------------------------------------
function expressionInner(type, noComma) {
            if (cx.state.fatArrowAt == cx.stream.start) {
                var body = noComma ? arrowBodyNoComma : arrowBody
                if (type == "(")
                    return cont(
                        pushcontext,
                        pushlex(")"),
                        commasep(pattern, ")"),
                        poplex,
                        expect("=>"),
                        body,
                        popcontext
                    )
                else if (type == "variable")
                    return pass(pushcontext, pattern, expect("=>"), body, popcontext)
            }

            var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma
            if (atomicTypes.hasOwnProperty(type)) return cont(maybeop)
            if (type == "function") return cont(functiondef, maybeop)
            if (type == "keyword c") return cont(noComma ? maybeexpressionNoComma : maybeexpression)
            if (type == "(")
                return cont(
                    pushlex(")"),
                    maybeexpression,
                    comprehension,
                    expect(")"),
                    poplex,
                    maybeop
                )
            if (type == "operator" || type == "spread")
                return cont(noComma ? expressionNoComma : expression)
            if (type == "[") return cont(pushlex("]"), arrayLiteral, poplex, maybeop)
            if (type == "{") return contCommasep(objprop, "}", null, maybeop)
            if (type == "quasi") {
                return pass(quasi, maybeop)
            }
            return cont()
        }
--------------------------------------------------------------------------------


Function 6: commasep
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function commasep(what, end) {
            function proceed(type) {
                if (type == ",") {
                    var lex = cx.state.lexical
                    if (lex.info == "call") lex.pos = (lex.pos || 0) + 1
                    return cont(what, proceed)
                }
                if (type == end) return cont()
                return cont(expect(end))
            }
            return function(type) {
                if (type == end) return cont()
                return pass(what, proceed)
            }
        }
--------------------------------------------------------------------------------


Function 7: block
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function block(type) {
            if (type == "}") return cont()
            return pass(statement, block)
        }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T23:17:06.723Z
File: mobxjs-mobx-ccc750e/packages/mobx/src/api/object-api.ts
Functions Extracted: 9


Function 1: keys
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
export function keys(obj: any): any {
    if (isObservableObject(obj)) {
        return (
            (obj as any as IIsObservableObject)[$mobx] as ObservableObjectAdministration
        ).keys_()
    }
    if (isObservableMap(obj) || isObservableSet(obj)) {
        return Array.from(obj.keys())
    }
    if (isObservableArray(obj)) {
        return obj.map((_, index) => index)
    }
    die(5)
}
--------------------------------------------------------------------------------


Function 2: values
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
export function values(obj: any): string[] {
    if (isObservableObject(obj)) {
        return keys(obj).map(key => obj[key])
    }
    if (isObservableMap(obj)) {
        return keys(obj).map(key => obj.get(key))
    }
    if (isObservableSet(obj)) {
        return Array.from(obj.values())
    }
    if (isObservableArray(obj)) {
        return obj.slice()
    }
    die(6)
}
--------------------------------------------------------------------------------


Function 3: entries
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
export function entries(obj: any): any {
    if (isObservableObject(obj)) {
        return keys(obj).map(key => [key, obj[key]])
    }
    if (isObservableMap(obj)) {
        return keys(obj).map(key => [key, obj.get(key)])
    }
    if (isObservableSet(obj)) {
        return Array.from(obj.entries())
    }
    if (isObservableArray(obj)) {
        return obj.map((key, index) => [index, key])
    }
    die(7)
}
--------------------------------------------------------------------------------


Function 4: set
Language: TypeScript
Lines: 27
Full Code:
--------------------------------------------------------------------------------
export function set(obj: any, key: any, value?: any): void {
    if (arguments.length === 2 && !isObservableSet(obj)) {
        startBatch()
        const values = key
        try {
            for (let key in values) {
                set(obj, key, values[key])
            }
        } finally {
            endBatch()
        }
        return
    }
    if (isObservableObject(obj)) {
        ;(obj as any as IIsObservableObject)[$mobx].set_(key, value)
    } else if (isObservableMap(obj)) {
        obj.set(key, value)
    } else if (isObservableSet(obj)) {
        obj.add(key)
    } else if (isObservableArray(obj)) {
        if (typeof key !== "number") {
            key = parseInt(key, 10)
        }
        if (key < 0) {
            die(`Invalid index: '${key}'`)
        }
        startBatch()
        if (key >= obj.length) {
            obj.length = key + 1
        }
        obj[key] = value
        endBatch()
    } else {
        die(8)
    }
}
--------------------------------------------------------------------------------


Function 5: remove
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export function remove(obj: any, key: any): void {
    if (isObservableObject(obj)) {
        ;(obj as any as IIsObservableObject)[$mobx].delete_(key)
    } else if (isObservableMap(obj)) {
        obj.delete(key)
    } else if (isObservableSet(obj)) {
        obj.delete(key)
    } else if (isObservableArray(obj)) {
        if (typeof key !== "number") {
            key = parseInt(key, 10)
        }
        obj.splice(key, 1)
    } else {
        die(9)
    }
}
--------------------------------------------------------------------------------


Function 6: has
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export function has(obj: any, key: any): boolean {
    if (isObservableObject(obj)) {
        return (obj as any as IIsObservableObject)[$mobx].has_(key)
    } else if (isObservableMap(obj)) {
        return obj.has(key)
    } else if (isObservableSet(obj)) {
        return obj.has(key)
    } else if (isObservableArray(obj)) {
        return key >= 0 && key < obj.length
    }
    die(10)
}
--------------------------------------------------------------------------------


Function 7: get
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export function get(obj: any, key: any): any {
    if (!has(obj, key)) {
        return undefined
    }
    if (isObservableObject(obj)) {
        return (obj as any as IIsObservableObject)[$mobx].get_(key)
    } else if (isObservableMap(obj)) {
        return obj.get(key)
    } else if (isObservableArray(obj)) {
        return obj[key]
    }
    die(11)
}
--------------------------------------------------------------------------------


Function 8: apiDefineProperty
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
export function apiDefineProperty(obj: Object, key: PropertyKey, descriptor: PropertyDescriptor) {
    if (isObservableObject(obj)) {
        return (obj as any as IIsObservableObject)[$mobx].defineProperty_(key, descriptor)
    }
    die(39)
}
--------------------------------------------------------------------------------


Function 9: apiOwnKeys
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
export function apiOwnKeys(obj: Object) {
    if (isObservableObject(obj)) {
        return (obj as any as IIsObservableObject)[$mobx].ownKeys_()
    }
    die(38)
}
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T23:17:14.765Z
Question Type: multiple-choice
Function: statement
Function Size: 2344 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: statement (JavaScript)\n// Handles different types of statements based on the provided type.\n\nfunction statement(type, value) {\n            if (type == "var")\n                return cont(pushlex("vardef", value.length), vardef, expect(";"), poplex)\n            if (type == "keyword a") re
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T23:17:15.341Z
Question Type: multiple-choice
Function: reaction
Function Size: 292 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: reaction (TypeScript)\n// Creates a reaction that runs an effect when the result of an expression changes.\n\ndeclare export function reaction<T>(\n    expression: (r: IReactionPublic) => T,\n    effect: (arg: T, r: IReactionPublic) => void,\n    opts?: IReactionOptions\n): () => mixed
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T23:17:16.066Z
Question Type: multiple-choice
Function: pushcontext
Function Size: 284 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: pushcontext (JavaScript)\n// Pushes the current context onto the stack and sets local variables to default.\n\nfunction pushcontext() {\n            cx.state.context = { prev: cx.state.context, vars: cx.state.localVars }\n            cx.state.localVars = defaultVars\n        }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T23:17:18.102Z
Question Type: true-false
Function: remove
Function Size: 563 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: remove (TypeScript)\n// Removes a key from an observable object, map, set, or array.\n\nexport function remove(obj: any, key: any): void {\n    if (isObservableObject(obj)) {\n        ;(obj as any as IIsObservableObject)[$mobx].delete_(key)\n    } else if (isObservableMap(obj)) {\n        obj.
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T23:17:32.700Z
Question Type: multiple-choice
Function: get
Function Size: 457 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: get (TypeScript)\n// Retrieves a value from an observable object, map, set, or array.\n\nexport function get(obj: any, key: any): any {\n    if (!has(obj, key)) {\n        return undefined\n    }\n    if (isObservableObject(obj)) {\n        return (obj as any as IIsObservableObject)[$mobx].get_
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T23:17:35.172Z
Question Type: multiple-choice
Function: has
Function Size: 494 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: has (TypeScript)\n// Checks if a key exists in an observable object, map, set, or array.\n\nexport function has(obj: any, key: any): boolean {\n    if (isObservableObject(obj)) {\n        return (obj as any as IIsObservableObject)[$mobx].has_(key)\n    } else if (isObservableMap(obj)) {\n     
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T23:17:35.971Z
Question Type: true-false
Function: expressionInner
Function Size: 1794 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: expressionInner (JavaScript)\n// Processes expressions based on the provided type and whether commas are allowed.\n\nfunction expressionInner(type, noComma) {\n            if (cx.state.fatArrowAt == cx.stream.start) {\n                var body = noComma ? arrowBodyNoComma : arrowBody\n       
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T23:17:42.771Z
Question Type: multiple-choice
Function: commasep
Function Size: 654 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: commasep (JavaScript)\n// Handles comma-separated lists of expressions until the specified end token.\n\nfunction commasep(what, end) {\n            function proceed(type) {\n                if (type == ",") {\n                    var lex = cx.state.lexical\n                    if (lex.info ==
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T23:17:46.462Z
Question Type: multiple-choice
Function: apiDefineProperty
Function Size: 336 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: apiDefineProperty (TypeScript)\n// Defines a property on an observable object.\n\nexport function apiDefineProperty(obj: Object, key: PropertyKey, descriptor: PropertyDescriptor) {\n    if (isObservableObject(obj)) {\n        return (obj as any as IIsObservableObject)[$mobx].defineProperty_(
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T23:17:47.294Z
Question Type: multiple-choice
Function: keys
Function Size: 496 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: keys (TypeScript)\n// Returns the keys of an observable object, map, set, or array.\n\nexport function keys(obj: any): any {\n    if (isObservableObject(obj)) {\n        return (\n            (obj as any as IIsObservableObject)[$mobx] as ObservableObjectAdministration\n        ).keys_()\n    }\n
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T23:18:02.222Z
Question Type: select-all
Function: set
Function Size: 1052 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: set (TypeScript)\n// Sets a value in an observable object, map, set, or array.\n\nexport function set(obj: any, key: any, value?: any): void {\n    if (arguments.length === 2 && !isObservableSet(obj)) {\n        startBatch()\n        const values = key\n        try {\n            for (let key i
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T23:18:09.350Z
Question Type: order-sequence
Function: values
Function Size: 478 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: values (TypeScript)\n// Returns the values of an observable object, map, set, or array.\n\nexport function values(obj: any): string[] {\n    if (isObservableObject(obj)) {\n        return keys(obj).map(key => obj[key])\n    }\n    if (isObservableMap(obj)) {\n        return keys(obj).map(key =>
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T23:18:12.874Z
Question Type: function-variant
Function: entries
Function Size: 517 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: entries (TypeScript)\n// Returns the entries of an observable object, map, set, or array.\n\nexport function entries(obj: any): any {\n    if (isObservableObject(obj)) {\n        return keys(obj).map(key => [key, obj[key]])\n    }\n    if (isObservableMap(obj)) {\n        return keys(obj).map(k
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T23:18:13.997Z
Question Type: multiple-choice
Function: createAtom
Function Size: 226 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: createAtom (TypeScript)\n// Creates an atom that can be observed.\n\ndeclare export function createAtom(\n    name: string,\n    onBecomeObservedHandler?: () => void,\n    onBecomeUnobservedHandler?: () => void\n): IAtom
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760138125780
Repository: Unknown
Total Questions Generated: 27
Total Chunks Processed: 21
Ended: 2025-10-10T23:18:17.672Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T01:24:22.280Z
File: nothing yielded for bad markup
Functions Extracted: 8


Function 1: Counter
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function Counter(props) {
        const renderCount = useCallback(increment => {
          return 'Count: ' + (props.count + increment);
        });
        return <Text text={renderCount(3)} />;
      }
--------------------------------------------------------------------------------


Function 2: CapitalizedText
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function CapitalizedText(props) {
          const [text, setText] = useState(props.text);
          const [count, setCount] = useState(0);
          const capitalizeText = useCallback(() => text.toUpperCase(), [text]);
          yieldValue(capitalizeText);
          if (count < 3) {
            setCount(count + 1);
          }
          if (text === 'hello' && count === 2) {
            setText('hello, world.');
          }
          return <Text text={capitalizeText()} />;
        }
--------------------------------------------------------------------------------


Function 3: Counter
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function Counter(props, ref) {
        useImperativeHandle(ref, () => {
          throw new Error('should not be invoked');
        });
        return <Text text={props.label + ': ' + ref.current} />;
      }
--------------------------------------------------------------------------------


Function 4: Counter
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        useInsertionEffect(() => {
          throw new Error('should not be invoked');
        });

        return <Text text="Count: 0" />;
      }
--------------------------------------------------------------------------------


Function 5: Counter
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        useLayoutEffect(() => {
          throw new Error('should not be invoked');
        });

        return <Text text="Count: 0" />;
      }
--------------------------------------------------------------------------------


Function 6: App
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function App(props) {
        return (
          <div>
            <Provider foo={props.foo} bar={props.bar} baz={props.baz}>
              <Indirection>
                <Indirection>
                  <FooAndBar />
                </Indirection>
                <Indirection>
                  <Baz />
                </Indirection>
              </Indirection>
            </Provider>
          </div>
        );
      }
--------------------------------------------------------------------------------


Function 7: ReadInMemo
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function ReadInMemo(props) {
        const count = React.useMemo(() => readContext(Context), []);
        return <Text text={count} />;
      }
--------------------------------------------------------------------------------


Function 8: ReadInReducer
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function ReadInReducer(props) {
        const [count, dispatch] = React.useReducer(() => readContext(Context));
        if (count !== 42) {
          dispatch();
        }
        return <Text text={count} />;
      }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T01:24:49.426Z
File: }
Functions Extracted: 4


Function 1: POST
Language: JavaScript
Lines: 9
Full Code:
--------------------------------------------------------------------------------
async function POST(formData) {
    const boundAction = await ReactServerDOMServer.decodeAction(
      formData,
      webpackServerMap,
    );
    const returnValue = boundAction();
    const formState = await ReactServerDOMServer.decodeFormState(
      await returnValue,
      formData,
      webpackServerMap,
    );
    return {returnValue, formState};
  }
--------------------------------------------------------------------------------


Function 2: submit
Language: JavaScript
Lines: 36
Full Code:
--------------------------------------------------------------------------------
function submit(submitter) {
    const form = submitter.form || submitter;
    if (!submitter.form) {
      submitter = undefined;
    }
    const submitEvent = new Event('submit', {bubbles: true, cancelable: true});
    submitEvent.submitter = submitter;
    const returnValue = form.dispatchEvent(submitEvent);
    if (!returnValue) {
      return;
    }
    const action =
      (submitter && submitter.getAttribute('formaction')) || form.action;
    if (!/\s*javascript:/i.test(action)) {
      const method = (submitter && submitter.formMethod) || form.method;
      const encType = (submitter && submitter.formEnctype) || form.enctype;
      if (method === 'post' && encType === 'multipart/form-data') {
        let formData;
        if (submitter) {
          const temp = document.createElement('input');
          temp.name = submitter.name;
          temp.value = submitter.value;
          submitter.parentNode.insertBefore(temp, submitter);
          formData = new FormData(form);
          temp.parentNode.removeChild(temp);
        } else {
          formData = new FormData(form);
        }
        return POST(formData);
      }
      throw new Error('Navigate to: ' + action);
    }
  }
--------------------------------------------------------------------------------


Function 3: readIntoContainer
Language: JavaScript
Lines: 13
Full Code:
--------------------------------------------------------------------------------
async function readIntoContainer(stream) {
    const reader = stream.getReader();
    let result = '';
    while (true) {
      const {done, value} = await reader.read();
      if (done) {
        break;
      }
      result += Buffer.from(value).toString('utf8');
    }
    const temp = document.createElement('div');
    temp.innerHTML = result;
    insertNodesAndExecuteScripts(temp, container, null);
  }
--------------------------------------------------------------------------------


Function 4: useActionState's dispatch binds the initial state to the provided action
Language: JavaScript
Lines: 40
Full Code:
--------------------------------------------------------------------------------
it("useActionState's dispatch binds the initial state to the provided action", async () => {
    const serverAction = serverExports(
      async function action(prevState, formData) {
        return {
          count:
            prevState.count + parseInt(formData.get('incrementAmount'), 10),
        };
      },
    );

    const initialState = {count: 1};
    function Client({action}) {
      const [state, dispatch, isPending] = useActionState(action, initialState);
      return (
        <form action={dispatch}>
          <span>{isPending ? 'Pending...' : ''}</span>
          <span>Count: {state.count}</span>
          <input type="text" name="incrementAmount" defaultValue="5" />
        </form>
      );
    }

    const ClientRef = await clientExports(Client);

    const rscStream = ReactServerDOMServer.renderToReadableStream(
      <ClientRef action={serverAction} />, 
      webpackMap,
    );
    const response = ReactServerDOMClient.createFromReadableStream(rscStream, {
      serverConsumerManifest: {
        moduleMap: null,
        moduleLoading: null,
      },
    });
    const ssrStream = await ReactDOMServer.renderToReadableStream(response);
    await readIntoContainer(ssrStream);

    const form = container.getElementsByTagName('form')[0];
    const pendingSpan = container.getElementsByTagName('span')[0];
    const stateSpan = container.getElementsByTagName('span')[1];
    expect(pendingSpan.textContent).toBe('');
    expect(stateSpan.textContent).toBe('Count: 1');

    const {returnValue} = await submit(form);
    expect(await returnValue).toEqual({count: 6});
  });
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T01:24:58.987Z
File: Make them available to the helpers.
Functions Extracted: 5


Function 1: Counter
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function Counter(props) {
        const [count] = useState(0);
        return <span>Count: {count}</span>;
      }
--------------------------------------------------------------------------------


Function 2: UpdateCount
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function UpdateCount({setCount, count, children}) {
        if (count < 3) {
          setCount(c => c + 1);
        }
        return <span>{children}</span>;
      }
--------------------------------------------------------------------------------


Function 3: Counter
Language: JavaScript
Lines: 9
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        const [count, setCount] = useState(0);
        if (count < 12) {
          setCount(c => c + 1);
          setCount(c => c + 1);
          setCount(c => c + 1);
        }
        return <Text text={'Count: ' + count} />;
      }
--------------------------------------------------------------------------------


Function 4: Counter
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        const [count, setCount] = useState(0);
        if (count < 3) {
          setCount(count + 1);
        }
        return <span>Count: {count}</span>;
      }
--------------------------------------------------------------------------------


Function 5: Counter
Language: JavaScript
Lines: 9
Full Code:
--------------------------------------------------------------------------------
function Counter() {
          const [count, dispatch] = useReducer(reducer, 0);
          if (count < 3) {
            dispatch('increment');
          }
          yieldValue('Render: ' + count);
          return <Text text={count} />;
        }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T01:25:11.929Z
File: invariant for a missing parent, which is super confusing.
Functions Extracted: 3


Function 1: getEventListenerSet
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
export function getEventListenerSet(node: EventTarget): Set<string> {
  let elementListenerSet = (node: any)[internalEventHandlersKey];
  if (elementListenerSet === undefined) {
    elementListenerSet = (node: any)[internalEventHandlersKey] = new Set();
  }
  return elementListenerSet;
}
--------------------------------------------------------------------------------


Function 2: addEventHandleToTarget
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
export function addEventHandleToTarget(target: EventTarget | ReactScopeInstance, eventHandle: ReactDOMEventHandle): void {
  let eventHandles = (target: any)[internalEventHandlesSetKey];
  if (eventHandles === undefined) {
    eventHandles = (target: any)[internalEventHandlesSetKey] = new Set();
  }
  eventHandles.add(eventHandle);
}
--------------------------------------------------------------------------------


Function 3: getResourcesFromRoot
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
export function getResourcesFromRoot(root: HoistableRoot): RootResources {
  let resources = (root: any)[internalRootNodeResourcesKey];
  if (!resources) {
    resources = (root: any)[internalRootNodeResourcesKey] = {
      hoistableStyles: new Map(),
      hoistableScripts: new Map(),
    };
  }
  return resources;
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T01:25:18.408Z
File: Make them available to the helpers.
Functions Extracted: 2


Function 1: readContext
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function readContext(Ctx) {
        const dispatcher =
          React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE
            .H;
        return dispatcher.readContext(Ctx);
      }
--------------------------------------------------------------------------------


Function 2: App
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
const App = () => (
        <div>
          <Theme.Provider value="light">
            <Language.Provider value="english">
              <Theme.Provider value="dark">
                <Theme.Consumer>
                  {theme => <div id="theme1">{theme}</div>}
                </Theme.Consumer>
              </Theme.Provider>
              <Language.Consumer>
                {language => <div id="language2">{language}</div>}
              </Language.Consumer>
            </Language.Provider>
          </Theme.Provider>
          <Language.Consumer>
            {language => <div id="language3">{language}</div>}
          </Language.Consumer>
        </div>
      );
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:25:26.314Z
Question Type: multiple-choice
Function: submit
Function Size: 1303 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: submit (JavaScript)\n// Submits a form and handles the action based on the submitter.\n\nfunction submit(submitter) {\n    const form = submitter.form || submitter;\n    if (!submitter.form) {\n      submitter = undefined;\n    }\n    const submitEvent = new Event('submit', {bubbles: true, canc
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:25:26.445Z
Question Type: multiple-choice
Function: useActionState's dispatch binds the initial state to the provided action
Function Size: 1792 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: useActionState's dispatch binds the initial state to the provided action (JavaScript)\n// Tests if useActionState's dispatch binds the initial state to the provided action.\n\nit("useActionState's dispatch binds the initial state to the provided action", async () => {\n    const serverActio
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:25:27.798Z
Question Type: multiple-choice
Function: ReadInReducer
Function Size: 337 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: ReadInReducer (JavaScript)\n// Uses a reducer to read context value and dispatches if the value is not 42.\n\nfunction ReadInReducer(props) {\n        const [count, dispatch] = React.useReducer(() => readContext(Context));\n        if (count !== 42) {\n          dispatch();\n        }\n        
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:25:31.199Z
Question Type: select-all
Function: getResourcesFromRoot
Function Size: 429 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getResourcesFromRoot (TypeScript)\n// Retrieves or initializes resources associated with a root.\n\nexport function getResourcesFromRoot(root: HoistableRoot): RootResources {\n  let resources = (root: any)[internalRootNodeResourcesKey];\n  if (!resources) {\n    resources = (root: any)[intern
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:25:40.525Z
Question Type: multiple-choice
Function: readIntoContainer
Function Size: 514 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: readIntoContainer (JavaScript)\n// Reads a stream and inserts the result into the container.\n\nasync function readIntoContainer(stream) {\n    const reader = stream.getReader();\n    let result = '';\n    while (true) {\n      const {done, value} = await reader.read();\n      if (done) {\n     
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:25:46.229Z
Question Type: select-all
Function: Counter
Function Size: 301 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// Uses imperative handle to throw an error when invoked.\n\nfunction Counter(props, ref) {\n        useImperativeHandle(ref, () => {\n          throw new Error('should not be invoked');\n        });\n        return <Text text={props.label + ': ' + ref.current} />;\n      
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:25:46.341Z
Question Type: multiple-choice
Function: POST
Function Size: 460 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: POST (JavaScript)\n// Handles the POST request by decoding the action and form state.\n\nasync function POST(formData) {\n    const boundAction = await ReactServerDOMServer.decodeAction(\n      formData,\n      webpackServerMap,\n    );\n    const returnValue = boundAction();\n    const formStat
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:25:51.174Z
Question Type: order-sequence
Function: App
Function Size: 517 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: App (JavaScript)\n// Renders a provider with nested components FooAndBar and Baz.\n\nfunction App(props) {\n        return (\n          <div>\n            <Provider foo={props.foo} bar={props.bar} baz={props.baz}>\n              <Indirection>\n                <Indirection>\n                  <Fo
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:25:59.011Z
Question Type: multiple-choice
Function: Counter
Function Size: 288 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// A functional component that increments count until it reaches 3.\n\nfunction Counter() {\n        const [count, setCount] = useState(0);\n        if (count < 3) {\n          setCount(count + 1);\n        }\n        return <span>Count: {count}</span>;\n      }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:26:00.324Z
Question Type: true-false
Function: UpdateCount
Function Size: 271 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: UpdateCount (JavaScript)\n// A functional component that updates count if it's less than 3.\n\nfunction UpdateCount({setCount, count, children}) {\n        if (count < 3) {\n          setCount(c => c + 1);\n        }\n        return <span>{children}</span>;\n      }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:26:01.760Z
Question Type: multiple-choice
Function: Counter
Function Size: 369 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// A functional component that uses a reducer to manage count and dispatches increment.\n\nfunction Counter() {\n          const [count, dispatch] = useReducer(reducer, 0);\n          if (count < 3) {\n            dispatch('increment');\n          }\n          yieldValue('
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:26:02.287Z
Question Type: function-variant
Function: Counter
Function Size: 262 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// Uses insertion effect to throw an error during render.\n\nfunction Counter() {\n        useInsertionEffect(() => {\n          throw new Error('should not be invoked');\n        });\n\n        return <Text text="Count: 0" />;\n      }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:26:02.628Z
Question Type: true-false
Function: readContext
Function Size: 303 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: readContext (JavaScript)\n// Reads the context value using React's internal dispatcher.\n\nfunction readContext(Ctx) {\n        const dispatcher =\n          React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE\n            .H;\n        return dispatcher.readContext(Ctx);\n    
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760138125780
Repository: Unknown
Total Questions Generated: 23
Total Chunks Processed: 22
Ended: 2025-10-11T01:26:07.879Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T01:28:29.262Z
File: nothing yielded for bad markup
Functions Extracted: 6


Function 1: Counter
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function Counter(props) {
        const renderCount = useCallback(increment => {
          return 'Count: ' + (props.count + increment);
        });
        return <Text text={renderCount(3)} />;
      }
--------------------------------------------------------------------------------


Function 2: CapitalizedText
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function CapitalizedText(props) {
          const [text, setText] = useState(props.text);
          const [count, setCount] = useState(0);
          const capitalizeText = useCallback(() => text.toUpperCase(), [text]);
          yieldValue(capitalizeText);
          if (count < 3) {
            setCount(count + 1);
          }
          if (text === 'hello' && count === 2) {
            setText('hello, world.');
          }
          return <Text text={capitalizeText()} />;
        }
--------------------------------------------------------------------------------


Function 3: Counter
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function Counter(props, ref) {
        useImperativeHandle(ref, () => {
          throw new Error('should not be invoked');
        });
        return <Text text={props.label + ': ' + ref.current} />;
      }
--------------------------------------------------------------------------------


Function 4: App
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function App(props) {
        return (
          <div>
            <Provider foo={props.foo} bar={props.bar} baz={props.baz}>
              <Indirection>
                <Indirection>
                  <FooAndBar />
                </Indirection>
                <Indirection>
                  <Baz />
                </Indirection>
              </Indirection>
            </Provider>
          </div>
        );
      }
--------------------------------------------------------------------------------


Function 5: ReadInMemo
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function ReadInMemo(props) {
        const count = React.useMemo(() => readContext(Context), []);
        return <Text text={count} />;
      }
--------------------------------------------------------------------------------


Function 6: ReadInReducer
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function ReadInReducer(props) {
        const [count, dispatch] = React.useReducer(() => readContext(Context));
        if (count !== 42) {
          dispatch();
        }
        return <Text text={count} />;
      }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T01:28:59.561Z
File: }
Functions Extracted: 5


Function 1: POST
Language: JavaScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
async function POST(formData) {
    const boundAction = await ReactServerDOMServer.decodeAction(
      formData,
      webpackServerMap,
    );
    const returnValue = boundAction();
    const formState = await ReactServerDOMServer.decodeFormState(
      await returnValue,
      formData,
      webpackServerMap,
    );
    return {returnValue, formState};
  }
--------------------------------------------------------------------------------


Function 2: submit
Language: JavaScript
Lines: 36
Full Code:
--------------------------------------------------------------------------------
function submit(submitter) {
    const form = submitter.form || submitter;
    if (!submitter.form) {
      submitter = undefined;
    }
    const submitEvent = new Event('submit', {bubbles: true, cancelable: true});
    submitEvent.submitter = submitter;
    const returnValue = form.dispatchEvent(submitEvent);
    if (!returnValue) {
      return;
    }
    const action =
      (submitter && submitter.getAttribute('formaction')) || form.action;
    if (!/\s*javascript:/i.test(action)) {
      const method = (submitter && submitter.formMethod) || form.method;
      const encType = (submitter && submitter.formEnctype) || form.enctype;
      if (method === 'post' && encType === 'multipart/form-data') {
        let formData;
        if (submitter) {
          const temp = document.createElement('input');
          temp.name = submitter.name;
          temp.value = submitter.value;
          submitter.parentNode.insertBefore(temp, submitter);
          formData = new FormData(form);
          temp.parentNode.removeChild(temp);
        } else {
          formData = new FormData(form);
        }
        return POST(formData);
      }
      throw new Error('Navigate to: ' + action);
    }
  }
--------------------------------------------------------------------------------


Function 3: readIntoContainer
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
async function readIntoContainer(stream) {
    const reader = stream.getReader();
    let result = '';
    while (true) {
      const {done, value} = await reader.read();
      if (done) {
        break;
      }
      result += Buffer.from(value).toString('utf8');
    }
    const temp = document.createElement('div');
    temp.innerHTML = result;
    insertNodesAndExecuteScripts(temp, container, null);
  }
--------------------------------------------------------------------------------


Function 4: useActionState's dispatch binds the initial state to the provided action
Language: JavaScript
Lines: 35
Full Code:
--------------------------------------------------------------------------------
it("useActionState's dispatch binds the initial state to the provided action", async () => {
    const serverAction = serverExports(
      async function action(prevState, formData) {
        return {
          count:
            prevState.count + parseInt(formData.get('incrementAmount'), 10),
        };
      },
    );

    const initialState = {count: 1};
    function Client({action}) {
      const [state, dispatch, isPending] = useActionState(action, initialState);
      return (
        <form action={dispatch}>
          <span>{isPending ? 'Pending...' : ''}</span>
          <span>Count: {state.count}</span>
          <input type="text" name="incrementAmount" defaultValue="5" />
        </form>
      );
    }

    const ClientRef = await clientExports(Client);

    const rscStream = ReactServerDOMServer.renderToReadableStream(
      <ClientRef action={serverAction} />, 
      webpackMap,
    );
    const response = ReactServerDOMClient.createFromReadableStream(rscStream, {
      serverConsumerManifest: {
        moduleMap: null,
        moduleLoading: null,
      },
    });
    const ssrStream = await ReactDOMServer.renderToReadableStream(response);
    await readIntoContainer(ssrStream);

    const form = container.getElementsByTagName('form')[0];
    const pendingSpan = container.getElementsByTagName('span')[0];
    const stateSpan = container.getElementsByTagName('span')[1];
    expect(pendingSpan.textContent).toBe('');
    expect(stateSpan.textContent).toBe('Count: 1');

    const {returnValue} = await submit(form);
    expect(await returnValue).toEqual({count: 6});
  });
--------------------------------------------------------------------------------


Function 5: useActionState can reuse state during MPA form submission
Language: JavaScript
Lines: 35
Full Code:
--------------------------------------------------------------------------------
it('useActionState can reuse state during MPA form submission', async () => {
    const serverAction = serverExports(
      async function action(prevState, formData) {
        return prevState + 1;
      },
    );

    function Form({action}) {
      const [count, dispatch, isPending] = useActionState(action, 1);
      return (
        <form action={dispatch}>
          {isPending ? 'Pending...' : ''}
          {count}
        </form>
      );
    }

    function Client({action}) {
      return (
        <div>
          <Form action={action} />
          <Form action={action} />
          <Form action={action} />
        </div>
      );
    }

    const ClientRef = await clientExports(Client);

    const rscStream = ReactServerDOMServer.renderToReadableStream(
      <ClientRef action={serverAction} />, 
      webpackMap,
    );
    const response = ReactServerDOMClient.createFromReadableStream(rscStream, {
      serverConsumerManifest: {
        moduleMap: null,
        moduleLoading: null,
      },
    });
    const ssrStream = await ReactDOMServer.renderToReadableStream(response);
    await readIntoContainer(ssrStream);

    expect(container.textContent).toBe('111');
  });
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T01:29:09.708Z
File: Make them available to the helpers.
Functions Extracted: 5


Function 1: Counter
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function Counter(props) {
        const [count] = useState(0);
        return <span>Count: {count}</span>;
      }
--------------------------------------------------------------------------------


Function 2: UpdateCount
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function UpdateCount({setCount, count, children}) {
        if (count < 3) {
          setCount(c => c + 1);
        }
        return <span>{children}</span>;
      }
--------------------------------------------------------------------------------


Function 3: Counter
Language: JavaScript
Lines: 9
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        const [count, setCount] = useState(0);
        if (count < 12) {
          setCount(c => c + 1);
          setCount(c => c + 1);
          setCount(c => c + 1);
        }
        return <Text text={'Count: ' + count} />;
      }
--------------------------------------------------------------------------------


Function 4: Counter
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        const [count, setCount] = useState(0);
        if (count < 3) {
          setCount(count + 1);
        }
        return <span>Count: {count}</span>;
      }
--------------------------------------------------------------------------------


Function 5: Counter
Language: JavaScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
function Counter() {
          const [count, dispatch] = useReducer(reducer, 0);
          if (count < 3) {
            dispatch('increment');
          }
          yieldValue('Render: ' + count);
          return <Text text={count} />;
        }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T01:29:24.867Z
File: invariant for a missing parent, which is super confusing.
Functions Extracted: 3


Function 1: getEventListenerSet
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
export function getEventListenerSet(node: EventTarget): Set<string> {
  let elementListenerSet = (node: any)[internalEventHandlersKey];
  if (elementListenerSet === undefined) {
    elementListenerSet = (node: any)[internalEventHandlersKey] = new Set();
  }
  return elementListenerSet;
}
--------------------------------------------------------------------------------


Function 2: addEventHandleToTarget
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
export function addEventHandleToTarget(
  target: EventTarget | ReactScopeInstance,
  eventHandle: ReactDOMEventHandle,
): void {
  let eventHandles = (target: any)[internalEventHandlesSetKey];
  if (eventHandles === undefined) {
    eventHandles = (target: any)[internalEventHandlesSetKey] = new Set();
  }
  eventHandles.add(eventHandle);
}
--------------------------------------------------------------------------------


Function 3: getResourcesFromRoot
Language: TypeScript
Lines: 9
Full Code:
--------------------------------------------------------------------------------
export function getResourcesFromRoot(root: HoistableRoot): RootResources {
  let resources = (root: any)[internalRootNodeResourcesKey];
  if (!resources) {
    resources = (root: any)[internalRootNodeResourcesKey] = {
      hoistableStyles: new Map(),
      hoistableScripts: new Map(),
    };
  }
  return resources;
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T01:29:30.073Z
File: Make them available to the helpers.
Functions Extracted: 2


Function 1: readContext
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function readContext(Ctx) {
        const dispatcher =
          React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE
            .H;
        return dispatcher.readContext(Ctx);
      }
--------------------------------------------------------------------------------


Function 2: App
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
const App = () => (
        <div>
          <Theme.Provider value="light">
            <Language.Provider value="english">
              <Theme.Provider value="dark">
                <Theme.Consumer>
                  {theme => <div id="theme1">{theme}</div>}
                </Theme.Consumer>
              </Theme.Provider>
              <Language.Consumer>
                {language => <div id="language2">{language}</div>}
              </Language.Consumer>
            </Language.Provider>
          </Theme.Provider>
          <Language.Consumer>
            {language => <div id="language3">{language}</div>}
          </Language.Consumer>
        </div>
      );
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:29:39.677Z
Question Type: multiple-choice
Function: readIntoContainer
Function Size: 513 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: readIntoContainer (JavaScript)\n// Reads a stream and inserts its content into a container.\n\nasync function readIntoContainer(stream) {\n    const reader = stream.getReader();\n    let result = '';\n    while (true) {\n      const {done, value} = await reader.read();\n      if (done) {\n      
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:29:39.903Z
Question Type: multiple-choice
Function: ReadInMemo
Function Size: 234 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: ReadInMemo (JavaScript)\n// Reads context value using useMemo and renders it.\n\nfunction ReadInMemo(props) {\n        const count = React.useMemo(() => readContext(Context), []);\n        return <Text text={count} />;\n      }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:29:40.056Z
Question Type: multiple-choice
Function: ReadInReducer
Function Size: 320 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: ReadInReducer (JavaScript)\n// Uses a reducer to read context value and dispatch updates.\n\nfunction ReadInReducer(props) {\n        const [count, dispatch] = React.useReducer(() => readContext(Context));\n        if (count !== 42) {\n          dispatch();\n        }\n        return <Text text
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:29:44.198Z
Question Type: order-sequence
Function: POST
Function Size: 460 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: POST (JavaScript)\n// Handles the POST request by decoding the action and form state.\n\nasync function POST(formData) {\n    const boundAction = await ReactServerDOMServer.decodeAction(\n      formData,\n      webpackServerMap,\n    );\n    const returnValue = boundAction();\n    const formStat
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:29:57.992Z
Question Type: multiple-choice
Function: addEventHandleToTarget
Function Size: 454 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: addEventHandleToTarget (TypeScript)\n// Adds an event handle to the target's set of event handles.\n\nexport function addEventHandleToTarget(\n  target: EventTarget | ReactScopeInstance,\n  eventHandle: ReactDOMEventHandle,\n): void {\n  let eventHandles = (target: any)[internalEventHandlesSet
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:29:59.754Z
Question Type: true-false
Function: Counter
Function Size: 359 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// A counter that increments the count multiple times if below 12.\n\nfunction Counter() {\n        const [count, setCount] = useState(0);\n        if (count < 12) {\n          setCount(c => c + 1);\n          setCount(c => c + 1);\n          setCount(c => c + 1);\n        
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:30:01.008Z
Question Type: multiple-choice
Function: Counter
Function Size: 304 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// Renders a text showing the count incremented by a given value.\n\nfunction Counter(props) {\n        const renderCount = useCallback(increment => {\n          return 'Count: ' + (props.count + increment);\n        });\n        return <Text text={renderCount(3)} />;\n   
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:30:05.839Z
Question Type: select-all
Function: App
Function Size: 779 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: App (JavaScript)\n// Renders a nested structure of Theme and Language providers with consumers.\n\nconst App = () => (\n        <div>\n          <Theme.Provider value="light">\n            <Language.Provider value="english">\n              <Theme.Provider value="dark">\n                <Theme.C
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:30:20.746Z
Question Type: multiple-choice
Function: Counter
Function Size: 205 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// A counter component that displays the current count.\n\nfunction Counter(props) {\n        const [count] = useState(0);\n        return <span>Count: {count}</span>;\n      }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:30:22.135Z
Question Type: select-all
Function: getResourcesFromRoot
Function Size: 431 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getResourcesFromRoot (TypeScript)\n// Retrieves or initializes resources associated with the root.\n\nexport function getResourcesFromRoot(root: HoistableRoot): RootResources {\n  let resources = (root: any)[internalRootNodeResourcesKey];\n  if (!resources) {\n    resources = (root: any)[inte
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:30:22.253Z
Question Type: true-false
Function: useActionState's dispatch binds the initial state to the provided action
Function Size: 1803 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: useActionState's dispatch binds the initial state to the provided action (JavaScript)\n// Tests the dispatch function of useActionState to ensure it binds the initial state correctly.\n\nit("useActionState's dispatch binds the initial state to the provided action", async () => {\n    const 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:30:29.759Z
Question Type: function-variant
Function: readContext
Function Size: 290 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: readContext (JavaScript)\n// Reads the context value from a given context.\n\nfunction readContext(Ctx) {\n        const dispatcher =\n          React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE\n            .H;\n        return dispatcher.readContext(Ctx);\n      }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:30:32.064Z
Question Type: function-variant
Function: Counter
Function Size: 304 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// Uses imperative handle to manage ref and renders a label.\n\nfunction Counter(props, ref) {\n        useImperativeHandle(ref, () => {\n          throw new Error('should not be invoked');\n        });\n        return <Text text={props.label + ': ' + ref.current} />;\n   
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:30:34.920Z
Question Type: multiple-choice
Function: Counter
Function Size: 338 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// A counter that uses a reducer to increment the count.\n\nfunction Counter() {\n          const [count, dispatch] = useReducer(reducer, 0);\n          if (count < 3) {\n            dispatch('increment');\n          }\n          yieldValue('Render: ' + count);\n          r
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760138125780
Repository: Unknown
Total Questions Generated: 23
Total Chunks Processed: 21
Ended: 2025-10-11T01:30:37.865Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T01:41:15.294Z
File: nothing yielded for bad markup
Functions Extracted: 8


Function 1: Counter
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function Counter(props) {
        const renderCount = useCallback(increment => {
          return 'Count: ' + (props.count + increment);
        });
        return <Text text={renderCount(3)} />;
      }
--------------------------------------------------------------------------------


Function 2: CapitalizedText
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function CapitalizedText(props) {
          const [text, setText] = useState(props.text);
          const [count, setCount] = useState(0);
          const capitalizeText = useCallback(() => text.toUpperCase(), [text]);
          yieldValue(capitalizeText);
          if (count < 3) {
            setCount(count + 1);
          }
          if (text === 'hello' && count === 2) {
            setText('hello, world.');
          }
          return <Text text={capitalizeText()} />;
        }
--------------------------------------------------------------------------------


Function 3: Counter
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function Counter(props, ref) {
        useImperativeHandle(ref, () => {
          throw new Error('should not be invoked');
        });
        return <Text text={props.label + ': ' + ref.current} />;
      }
--------------------------------------------------------------------------------


Function 4: Counter
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        useInsertionEffect(() => {
          throw new Error('should not be invoked');
        });

        return <Text text='Count: 0' />;
      }
--------------------------------------------------------------------------------


Function 5: Counter
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        useLayoutEffect(() => {
          throw new Error('should not be invoked');
        });

        return <Text text='Count: 0' />;
      }
--------------------------------------------------------------------------------


Function 6: App
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function App(props) {
        return (
          <div>
            <Provider foo={props.foo} bar={props.bar} baz={props.baz}>
              <Indirection>
                <Indirection>
                  <FooAndBar />
                </Indirection>
                <Indirection>
                  <Baz />
                </Indirection>
              </Indirection>
            </Provider>
          </div>
        );
      }
--------------------------------------------------------------------------------


Function 7: ReadInMemo
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function ReadInMemo(props) {
        const count = React.useMemo(() => readContext(Context), []);
        return <Text text={count} />;
      }
--------------------------------------------------------------------------------


Function 8: ReadInReducer
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function ReadInReducer(props) {
        const [count, dispatch] = React.useReducer(() => readContext(Context));
        if (count !== 42) {
          dispatch();
        }
        return <Text text={count} />;
      }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T01:41:41.183Z
File: }
Functions Extracted: 4


Function 1: POST
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
async function POST(formData) {
    const boundAction = await ReactServerDOMServer.decodeAction(
      formData,
      webpackServerMap,
    );
    const returnValue = boundAction();
    const formState = await ReactServerDOMServer.decodeFormState(
      await returnValue,
      formData,
      webpackServerMap,
    );
    return {returnValue, formState};
  }
--------------------------------------------------------------------------------


Function 2: submit
Language: JavaScript
Lines: 34
Full Code:
--------------------------------------------------------------------------------
function submit(submitter) {
    const form = submitter.form || submitter;
    if (!submitter.form) {
      submitter = undefined;
    }
    const submitEvent = new Event('submit', {bubbles: true, cancelable: true});
    submitEvent.submitter = submitter;
    const returnValue = form.dispatchEvent(submitEvent);
    if (!returnValue) {
      return;
    }
    const action =
      (submitter && submitter.getAttribute('formaction')) || form.action;
    if (!/\s*javascript:/i.test(action)) {
      const method = (submitter && submitter.formMethod) || form.method;
      const encType = (submitter && submitter.formEnctype) || form.enctype;
      if (method === 'post' && encType === 'multipart/form-data') {
        let formData;
        if (submitter) {
          const temp = document.createElement('input');
          temp.name = submitter.name;
          temp.value = submitter.value;
          submitter.parentNode.insertBefore(temp, submitter);
          formData = new FormData(form);
          temp.parentNode.removeChild(temp);
        } else {
          formData = new FormData(form);
        }
        return POST(formData);
      }
      throw new Error('Navigate to: ' + action);
    }
  }
--------------------------------------------------------------------------------


Function 3: readIntoContainer
Language: JavaScript
Lines: 13
Full Code:
--------------------------------------------------------------------------------
async function readIntoContainer(stream) {
    const reader = stream.getReader();
    let result = '';
    while (true) {
      const {done, value} = await reader.read();
      if (done) {
        break;
      }
      result += Buffer.from(value).toString('utf8');
    }
    const temp = document.createElement('div');
    temp.innerHTML = result;
    insertNodesAndExecuteScripts(temp, container, null);
  }
--------------------------------------------------------------------------------


Function 4: useActionState's dispatch
Language: JavaScript
Lines: 37
Full Code:
--------------------------------------------------------------------------------
it("useActionState's dispatch binds the initial state to the provided action", async () => {
    const serverAction = serverExports(
      async function action(prevState, formData) {
        return {
          count:
            prevState.count + parseInt(formData.get('incrementAmount'), 10),
        };
      },
    );

    const initialState = {count: 1};
    function Client({action}) {
      const [state, dispatch, isPending] = useActionState(action, initialState);
      return (
        <form action={dispatch}>
          <span>{isPending ? 'Pending...' : ''}</span>
          <span>Count: {state.count}</span>
          <input type="text" name="incrementAmount" defaultValue="5" />
        </form>
      );
    }

    const ClientRef = await clientExports(Client);

    const rscStream = ReactServerDOMServer.renderToReadableStream(
      <ClientRef action={serverAction} />, 
      webpackMap,
    );
    const response = ReactServerDOMClient.createFromReadableStream(rscStream, {
      serverConsumerManifest: {
        moduleMap: null,
        moduleLoading: null,
      },
    });
    const ssrStream = await ReactDOMServer.renderToReadableStream(response);
    await readIntoContainer(ssrStream);

    const form = container.getElementsByTagName('form')[0];
    const pendingSpan = container.getElementsByTagName('span')[0];
    const stateSpan = container.getElementsByTagName('span')[1];
    expect(pendingSpan.textContent).toBe('');
    expect(stateSpan.textContent).toBe('Count: 1');

    const {returnValue} = await submit(form);
    expect(await returnValue).toEqual({count: 6});
  });
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T01:41:53.086Z
File: Make them available to the helpers.
Functions Extracted: 5


Function 1: Counter
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function Counter(props) {
        const [count] = useState(0);
        return <span>Count: {count}</span>;
      }
--------------------------------------------------------------------------------


Function 2: UpdateCount
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function UpdateCount({setCount, count, children}) {
        if (count < 3) {
          setCount(c => c + 1);
        }
        return <span>{children}</span>;
      }
--------------------------------------------------------------------------------


Function 3: Counter
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        const [count, setCount] = useState(0);
        if (count < 12) {
          setCount(c => c + 1);
          setCount(c => c + 1);
          setCount(c => c + 1);
        }
        return <Text text={'Count: ' + count} />;
      }
--------------------------------------------------------------------------------


Function 4: Counter
Language: JavaScript
Lines: 9
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        const [count, setCount] = useState(0);
        if (count < 3) {
          setCount(count + 1);
        }
        return <span>Count: {count}</span>;
      }
--------------------------------------------------------------------------------


Function 5: Counter
Language: JavaScript
Lines: 11
Full Code:
--------------------------------------------------------------------------------
function Counter() {
          const [count, dispatch] = useReducer(reducer, 0);
          if (count < 3) {
            dispatch('increment');
          }
          yieldValue('Render: ' + count);
          return <Text text={count} />;
        }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T01:42:07.633Z
File: invariant for a missing parent, which is super confusing.
Functions Extracted: 3


Function 1: getEventListenerSet
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
export function getEventListenerSet(node: EventTarget): Set<string> {
  let elementListenerSet = (node: any)[internalEventHandlersKey];
  if (elementListenerSet === undefined) {
    elementListenerSet = (node: any)[internalEventHandlersKey] = new Set();
  }
  return elementListenerSet;
}
--------------------------------------------------------------------------------


Function 2: addEventHandleToTarget
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
export function addEventHandleToTarget(
  target: EventTarget | ReactScopeInstance,
  eventHandle: ReactDOMEventHandle,
): void {
  let eventHandles = (target: any)[internalEventHandlesSetKey];
  if (eventHandles === undefined) {
    eventHandles = (target: any)[internalEventHandlesSetKey] = new Set();
  }
  eventHandles.add(eventHandle);
}
--------------------------------------------------------------------------------


Function 3: getResourcesFromRoot
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
export function getResourcesFromRoot(root: HoistableRoot): RootResources {
  let resources = (root: any)[internalRootNodeResourcesKey];
  if (!resources) {
    resources = (root: any)[internalRootNodeResourcesKey] = {
      hoistableStyles: new Map(),
      hoistableScripts: new Map(),
    };
  }
  return resources;
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T01:42:16.316Z
File: Make them available to the helpers.
Functions Extracted: 2


Function 1: readContext
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function readContext(Ctx) {
        const dispatcher =
          React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE
            .H;
        return dispatcher.readContext(Ctx);
      }
--------------------------------------------------------------------------------


Function 2: App
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
const App = () => (
        <div>
          <Theme.Provider value="light">
            <Language.Provider value="english">
              <Theme.Provider value="dark">
                <Theme.Consumer>
                  {theme => <div id="theme1">{theme}</div>}
                </Theme.Consumer>
              </Theme.Provider>
              <Language.Consumer>
                {language => <div id="language2">{language}</div>}
              </Language.Consumer>
            </Language.Provider>
          </Theme.Provider>
          <Language.Consumer>
            {language => <div id="language3">{language}</div>}
          </Language.Consumer>
        </div>
      );
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:42:20.493Z
Question Type: multiple-choice
Function: useActionState's dispatch
Function Size: 1747 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: useActionState's dispatch (JavaScript)\n// Tests the dispatch of useActionState to ensure it binds the initial state correctly.\n\nit("useActionState's dispatch binds the initial state to the provided action", async () => {\n    const serverAction = serverExports(\n      async function actio
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:42:20.794Z
Question Type: select-all
Function: UpdateCount
Function Size: 254 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: UpdateCount (JavaScript)\n// Updates the count state if it is less than 3.\n\nfunction UpdateCount({setCount, count, children}) {\n        if (count < 3) {\n          setCount(c => c + 1);\n        }\n        return <span>{children}</span>;\n      }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:42:25.373Z
Question Type: multiple-choice
Function: Counter
Function Size: 285 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// A counter that increments the count state until it reaches 3.\n\nfunction Counter() {\n        const [count, setCount] = useState(0);\n        if (count < 3) {\n          setCount(count + 1);\n        }\n        return <span>Count: {count}</span>;\n      }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:42:31.187Z
Question Type: function-variant
Function: ReadInMemo
Function Size: 234 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: ReadInMemo (JavaScript)\n// Reads context value using useMemo and renders it.\n\nfunction ReadInMemo(props) {\n        const count = React.useMemo(() => readContext(Context), []);\n        return <Text text={count} />;\n      }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:42:31.517Z
Question Type: multiple-choice
Function: App
Function Size: 520 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: App (JavaScript)\n// Renders a provider with nested components that consume context.\n\nfunction App(props) {\n        return (\n          <div>\n            <Provider foo={props.foo} bar={props.bar} baz={props.baz}>\n              <Indirection>\n                <Indirection>\n                  
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:42:37.808Z
Question Type: multiple-choice
Function: Counter
Function Size: 353 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// A counter that increments the count state multiple times.\n\nfunction Counter() {\n        const [count, setCount] = useState(0);\n        if (count < 12) {\n          setCount(c => c + 1);\n          setCount(c => c + 1);\n          setCount(c => c + 1);\n        }\n    
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:42:44.390Z
Question Type: select-all
Function: addEventHandleToTarget
Function Size: 441 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: addEventHandleToTarget (TypeScript)\n// Adds an event handle to the specified target.\n\nexport function addEventHandleToTarget(\n  target: EventTarget | ReactScopeInstance,\n  eventHandle: ReactDOMEventHandle,\n): void {\n  let eventHandles = (target: any)[internalEventHandlesSetKey];\n  if (e
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:42:46.957Z
Question Type: order-sequence
Function: Counter
Function Size: 263 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// Demonstrates the use of layout effect with an error throw.\n\nfunction Counter() {\n        useLayoutEffect(() => {\n          throw new Error('should not be invoked');\n        });\n\n        return <Text text='Count: 0' />;\n      }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:42:48.734Z
Question Type: true-false
Function: Counter
Function Size: 269 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// Demonstrates the use of insertion effect with an error throw.\n\nfunction Counter() {\n        useInsertionEffect(() => {\n          throw new Error('should not be invoked');\n        });\n\n        return <Text text='Count: 0' />;\n      }
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760138125780
Repository: Unknown
Total Questions Generated: 17
Total Chunks Processed: 22
Ended: 2025-10-11T01:42:51.852Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T01:46:41.194Z
File: nothing yielded for bad markup
Functions Extracted: 8


Function 1: Counter
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function Counter(props) {
        const renderCount = useCallback(increment => {
          return 'Count: ' + (props.count + increment);
        });
        return <Text text={renderCount(3)} />;
      }
--------------------------------------------------------------------------------


Function 2: CapitalizedText
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function CapitalizedText(props) {
          const [text, setText] = useState(props.text);
          const [count, setCount] = useState(0);
          const capitalizeText = useCallback(() => text.toUpperCase(), [text]);
          yieldValue(capitalizeText);
          if (count < 3) {
            setCount(count + 1);
          }
          if (text === 'hello' && count === 2) {
            setText('hello, world.');
          }
          return <Text text={capitalizeText()} />;
        }
--------------------------------------------------------------------------------


Function 3: Counter
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function Counter(props, ref) {
        useImperativeHandle(ref, () => {
          throw new Error('should not be invoked');
        });
        return <Text text={props.label + ': ' + ref.current} />;
      }
--------------------------------------------------------------------------------


Function 4: Counter
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        useInsertionEffect(() => {
          throw new Error('should not be invoked');
        });

        return <Text text="Count: 0" />;
      }
--------------------------------------------------------------------------------


Function 5: Counter
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        useLayoutEffect(() => {
          throw new Error('should not be invoked');
        });

        return <Text text="Count: 0" />;
      }
--------------------------------------------------------------------------------


Function 6: App
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function App(props) {
        return (
          <div>
            <Provider foo={props.foo} bar={props.bar} baz={props.baz}>
              <Indirection>
                <Indirection>
                  <FooAndBar />
                </Indirection>
                <Indirection>
                  <Baz />
                </Indirection>
              </Indirection>
            </Provider>
          </div>
        );
      }
--------------------------------------------------------------------------------


Function 7: readContext
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function readContext(Context) {
      const dispatcher =
        React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE.H;
      return dispatcher.readContext(Context);
    }
--------------------------------------------------------------------------------


Function 8: Provider
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function Provider(props) {
          return (
            <Context.Provider
              value={{foo: props.foo, bar: props.bar, baz: props.baz}}>
              {props.children}
            </Context.Provider>
          );
        }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T01:47:22.763Z
File: }
Functions Extracted: 5


Function 1: POST
Language: JavaScript
Lines: 9
Full Code:
--------------------------------------------------------------------------------
async function POST(formData) {
    const boundAction = await ReactServerDOMServer.decodeAction(
      formData,
      webpackServerMap,
    );
    const returnValue = boundAction();
    const formState = await ReactServerDOMServer.decodeFormState(
      await returnValue,
      formData,
      webpackServerMap,
    );
    return {returnValue, formState};
  }
--------------------------------------------------------------------------------


Function 2: submit
Language: JavaScript
Lines: 31
Full Code:
--------------------------------------------------------------------------------
function submit(submitter) {
    const form = submitter.form || submitter;
    if (!submitter.form) {
      submitter = undefined;
    }
    const submitEvent = new Event('submit', {bubbles: true, cancelable: true});
    submitEvent.submitter = submitter;
    const returnValue = form.dispatchEvent(submitEvent);
    if (!returnValue) {
      return;
    }
    const action =
      (submitter && submitter.getAttribute('formaction')) || form.action;
    if (!/\s*javascript:/i.test(action)) {
      const method = (submitter && submitter.formMethod) || form.method;
      const encType = (submitter && submitter.formEnctype) || form.enctype;
      if (method === 'post' && encType === 'multipart/form-data') {
        let formData;
        if (submitter) {
          const temp = document.createElement('input');
          temp.name = submitter.name;
          temp.value = submitter.value;
          submitter.parentNode.insertBefore(temp, submitter);
          formData = new FormData(form);
          temp.parentNode.removeChild(temp);
        } else {
          formData = new FormData(form);
        }
        return POST(formData);
      }
      throw new Error('Navigate to: ' + action);
    }
  }
--------------------------------------------------------------------------------


Function 3: readIntoContainer
Language: JavaScript
Lines: 13
Full Code:
--------------------------------------------------------------------------------
async function readIntoContainer(stream) {
    const reader = stream.getReader();
    let result = '';
    while (true) {
      const {done, value} = await reader.read();
      if (done) {
        break;
      }
      result += Buffer.from(value).toString('utf8');
    }
    const temp = document.createElement('div');
    temp.innerHTML = result;
    insertNodesAndExecuteScripts(temp, container, null);
  }
--------------------------------------------------------------------------------


Function 4: useActionState's dispatch binds the initial state to the provided action
Language: JavaScript
Lines: 41
Full Code:
--------------------------------------------------------------------------------
it("useActionState's dispatch binds the initial state to the provided action", async () => {
    const serverAction = serverExports(
      async function action(prevState, formData) {
        return {
          count:
            prevState.count + parseInt(formData.get('incrementAmount'), 10),
        };
      },
    );

    const initialState = {count: 1};
    function Client({action}) {
      const [state, dispatch, isPending] = useActionState(action, initialState);
      return (
        <form action={dispatch}>
          <span>{isPending ? 'Pending...' : ''}</span>
          <span>Count: {state.count}</span>
          <input type="text" name="incrementAmount" defaultValue="5" />
        </form>
      );
    }

    const ClientRef = await clientExports(Client);

    const rscStream = ReactServerDOMServer.renderToReadableStream(
      <ClientRef action={serverAction} />, 
      webpackMap,
    );
    const response = ReactServerDOMClient.createFromReadableStream(rscStream, {
      serverConsumerManifest: {
        moduleMap: null,
        moduleLoading: null,
      },
    });
    const ssrStream = await ReactDOMServer.renderToReadableStream(response);
    await readIntoContainer(ssrStream);

    const form = container.getElementsByTagName('form')[0];
    const pendingSpan = container.getElementsByTagName('span')[0];
    const stateSpan = container.getElementsByTagName('span')[1];
    expect(pendingSpan.textContent).toBe('');
    expect(stateSpan.textContent).toBe('Count: 1');

    const {returnValue} = await submit(form);
    expect(await returnValue).toEqual({count: 6});
  });
--------------------------------------------------------------------------------


Function 5: useActionState can reuse state during MPA form submission
Language: JavaScript
Lines: 41
Full Code:
--------------------------------------------------------------------------------
it('useActionState can reuse state during MPA form submission', async () => {
    const serverAction = serverExports(
      async function action(prevState, formData) {
        return prevState + 1;
      },
    );

    function Form({action}) {
      const [count, dispatch, isPending] = useActionState(action, 1);
      return (
        <form action={dispatch}>
          {isPending ? 'Pending...' : ''}
          {count}
        </form>
      );
    }

    function Client({action}) {
      return (
        <div>
          <Form action={action} />
          <Form action={action} />
          <Form action={action} />
        </div>
      );
    }

    const ClientRef = await clientExports(Client);

    const rscStream = ReactServerDOMServer.renderToReadableStream(
      <ClientRef action={serverAction} />, 
      webpackMap,
    );
    const response = ReactServerDOMClient.createFromReadableStream(rscStream, {
      serverConsumerManifest: {
        moduleMap: null,
        moduleLoading: null,
      },
    });
    const ssrStream = await ReactDOMServer.renderToReadableStream(response);
    await readIntoContainer(ssrStream);

    expect(container.textContent).toBe('111');
  });
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T01:47:34.096Z
File: Make them available to the helpers.
Functions Extracted: 5


Function 1: Counter
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function Counter(props) {
        const [count] = useState(0);
        return <span>Count: {count}</span>;
      }
--------------------------------------------------------------------------------


Function 2: UpdateCount
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function UpdateCount({setCount, count, children}) {
        if (count < 3) {
          setCount(c => c + 1);
        }
        return <span>{children}</span>;
      }
--------------------------------------------------------------------------------


Function 3: Counter
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        const [count, setCount] = useState(0);
        if (count < 12) {
          setCount(c => c + 1);
          setCount(c => c + 1);
          setCount(c => c + 1);
        }
        return <Text text={'Count: ' + count} />;
      }
--------------------------------------------------------------------------------


Function 4: Counter
Language: JavaScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        const [count, setCount] = useState(0);
        if (count < 3) {
          setCount(count + 1);
        }
        return <span>Count: {count}</span>;
      }
--------------------------------------------------------------------------------


Function 5: Counter
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function Counter() {
          const [count, dispatch] = useReducer(reducer, 0);
          if (count < 3) {
            dispatch('increment');
          }
          yieldValue('Render: ' + count);
          return <Text text={count} />;
        }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T01:47:46.798Z
File: invariant for a missing parent, which is super confusing.
Functions Extracted: 4


Function 1: getEventListenerSet
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
export function getEventListenerSet(node: EventTarget): Set<string> {
  let elementListenerSet = (node: any)[internalEventHandlersKey];
  if (elementListenerSet === undefined) {
    elementListenerSet = (node: any)[internalEventHandlersKey] = new Set();
  }
  return elementListenerSet;
}
--------------------------------------------------------------------------------


Function 2: getResourcesFromRoot
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
export function getResourcesFromRoot(root: HoistableRoot): RootResources {
  let resources = (root: any)[internalRootNodeResourcesKey];
  if (!resources) {
    resources = (root: any)[internalRootNodeResourcesKey] = {
      hoistableStyles: new Map(),
      hoistableScripts: new Map(),
    };
  }
  return resources;
}
--------------------------------------------------------------------------------


Function 3: addEventHandleToTarget
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
export function addEventHandleToTarget(
  target: EventTarget | ReactScopeInstance,
  eventHandle: ReactDOMEventHandle,
): void {
  let eventHandles = (target: any)[internalEventHandlesSetKey];
  if (eventHandles === undefined) {
    eventHandles = (target: any)[internalEventHandlesSetKey] = new Set();
  }
  eventHandles.add(eventHandle);
}
--------------------------------------------------------------------------------


Function 4: doesTargetHaveEventHandle
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
export function doesTargetHaveEventHandle(
  target: EventTarget | ReactScopeInstance,
  eventHandle: ReactDOMEventHandle,
): boolean {
  const eventHandles = (target: any)[internalEventHandlesSetKey];
  if (eventHandles === undefined) {
    return false;
  }
  return eventHandles.has(eventHandle);
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T01:47:53.744Z
File: Make them available to the helpers.
Functions Extracted: 2


Function 1: readContext
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function readContext(Ctx) {
        const dispatcher =
          React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE
            .H;
        return dispatcher.readContext(Ctx);
      }
--------------------------------------------------------------------------------


Function 2: App
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
const App = () => (
        <div>
          <Theme.Provider value="light">
            <Language.Provider value="english">
              <Theme.Provider value="dark">
                <Theme.Consumer>
                  {theme => <div id="theme1">{theme}</div>}
                </Theme.Consumer>
              </Theme.Provider>
              <Language.Consumer>
                {language => <div id="language2">{language}</div>}
              </Language.Consumer>
            </Language.Provider>
          </Theme.Provider>
          <Language.Consumer>
            {language => <div id="language3">{language}</div>}
          </Language.Consumer>
        </div>
      );
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:48:00.917Z
Question Type: true-false
Function: useActionState can reuse state during MPA form submission
Function Size: 1337 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: useActionState can reuse state during MPA form submission (JavaScript)\n// Tests the reuse of state in multiple form submissions.\n\nit('useActionState can reuse state during MPA form submission', async () => {\n    const serverAction = serverExports(\n      async function action(prevState, 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:48:02.027Z
Question Type: multiple-choice
Function: getResourcesFromRoot
Function Size: 429 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: getResourcesFromRoot (TypeScript)\n// Retrieves or initializes resources associated with a root.\n\nexport function getResourcesFromRoot(root: HoistableRoot): RootResources {\n  let resources = (root: any)[internalRootNodeResourcesKey];\n  if (!resources) {\n    resources = (root: any)[intern
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:48:02.037Z
Question Type: multiple-choice
Function: POST
Function Size: 455 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: POST (JavaScript)\n// Handles POST requests by decoding actions and form states.\n\nasync function POST(formData) {\n    const boundAction = await ReactServerDOMServer.decodeAction(\n      formData,\n      webpackServerMap,\n    );\n    const returnValue = boundAction();\n    const formState = a
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:48:08.431Z
Question Type: true-false
Function: readContext
Function Size: 295 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: readContext (JavaScript)\n// Reads the context value from the provided context.\n\nfunction readContext(Ctx) {\n        const dispatcher =\n          React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE\n            .H;\n        return dispatcher.readContext(Ctx);\n      }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:48:09.663Z
Question Type: order-sequence
Function: doesTargetHaveEventHandle
Function Size: 407 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: doesTargetHaveEventHandle (TypeScript)\n// Checks if the target has a specific event handle.\n\nexport function doesTargetHaveEventHandle(\n  target: EventTarget | ReactScopeInstance,\n  eventHandle: ReactDOMEventHandle,\n): boolean {\n  const eventHandles = (target: any)[internalEventHandlesS
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:48:15.218Z
Question Type: select-all
Function: Counter
Function Size: 214 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// A functional component that uses useState to display a count.\n\nfunction Counter(props) {\n        const [count] = useState(0);\n        return <span>Count: {count}</span>;\n      }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:48:20.302Z
Question Type: multiple-choice
Function: getEventListenerSet
Function Size: 406 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: getEventListenerSet (TypeScript)\n// Retrieves or initializes a set of event listeners for a given node.\n\nexport function getEventListenerSet(node: EventTarget): Set<string> {\n  let elementListenerSet = (node: any)[internalEventHandlersKey];\n  if (elementListenerSet === undefined) {\n    
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:48:20.916Z
Question Type: multiple-choice
Function: readIntoContainer
Function Size: 513 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: readIntoContainer (JavaScript)\n// Reads a stream and inserts its content into a container.\n\nasync function readIntoContainer(stream) {\n    const reader = stream.getReader();\n    let result = '';\n    while (true) {\n      const {done, value} = await reader.read();\n      if (done) {\n      
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:48:22.349Z
Question Type: multiple-choice
Function: addEventHandleToTarget
Function Size: 454 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: addEventHandleToTarget (TypeScript)\n// Adds an event handle to the target's set of event handles.\n\nexport function addEventHandleToTarget(\n  target: EventTarget | ReactScopeInstance,\n  eventHandle: ReactDOMEventHandle,\n): void {\n  let eventHandles = (target: any)[internalEventHandlesSet
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:48:23.366Z
Question Type: multiple-choice
Function: Provider
Function Size: 313 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: Provider (JavaScript)\n// Provides context values to its children.\n\nfunction Provider(props) {\n          return (\n            <Context.Provider\n              value={{foo: props.foo, bar: props.bar, baz: props.baz}}>\n              {props.children}\n            </Context.Provider>\n         
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:48:36.994Z
Question Type: multiple-choice
Function: Counter
Function Size: 289 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// A Counter component that increments the count until it reaches 3.\n\nfunction Counter() {\n        const [count, setCount] = useState(0);\n        if (count < 3) {\n          setCount(count + 1);\n        }\n        return <span>Count: {count}</span>;\n      }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:48:42.588Z
Question Type: select-all
Function: Counter
Function Size: 348 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// A Counter component that uses useReducer to manage count state.\n\nfunction Counter() {\n          const [count, dispatch] = useReducer(reducer, 0);\n          if (count < 3) {\n            dispatch('increment');\n          }\n          yieldValue('Render: ' + count);\n 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:48:46.540Z
Question Type: order-sequence
Function: submit
Function Size: 1290 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: submit (JavaScript)\n// Submits a form and handles the submission logic.\n\nfunction submit(submitter) {\n    const form = submitter.form || submitter;\n    if (!submitter.form) {\n      submitter = undefined;\n    }\n    const submitEvent = new Event('submit', {bubbles: true, cancelable: true}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:48:49.995Z
Question Type: function-variant
Function: App
Function Size: 527 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: App (JavaScript)\n// Renders a provider with nested components that consume context values.\n\nfunction App(props) {\n        return (\n          <div>\n            <Provider foo={props.foo} bar={props.bar} baz={props.baz}>\n              <Indirection>\n                <Indirection>\n           
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:48:53.464Z
Question Type: multiple-choice
Function: useActionState's dispatch binds the initial state to the provided action
Function Size: 1769 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: useActionState's dispatch binds the initial state to the provided action (JavaScript)\n// Tests the dispatch of useActionState with an initial state.\n\nit("useActionState's dispatch binds the initial state to the provided action", async () => {\n    const serverAction = serverExports(\n    
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:48:54.075Z
Question Type: multiple-choice
Function: Counter
Function Size: 357 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// A Counter component that increments the count multiple times.\n\nfunction Counter() {\n        const [count, setCount] = useState(0);\n        if (count < 12) {\n          setCount(c => c + 1);\n          setCount(c => c + 1);\n          setCount(c => c + 1);\n        }\n
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760138125780
Repository: Unknown
Total Questions Generated: 26
Total Chunks Processed: 24
Ended: 2025-10-11T01:49:00.894Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T01:50:31.315Z
File: nothing yielded for bad markup
Functions Extracted: 6


Function 1: Counter
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function Counter(props) {
        const renderCount = useCallback(increment => {
          return 'Count: ' + (props.count + increment);
        });
        return <Text text={renderCount(3)} />;
      }
--------------------------------------------------------------------------------


Function 2: CapitalizedText
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function CapitalizedText(props) {
          const [text, setText] = useState(props.text);
          const [count, setCount] = useState(0);
          const capitalizeText = useCallback(() => text.toUpperCase(), [text]);
          yieldValue(capitalizeText);
          if (count < 3) {
            setCount(count + 1);
          }
          if (text === 'hello' && count === 2) {
            setText('hello, world.');
          }
          return <Text text={capitalizeText()} />;
        }
--------------------------------------------------------------------------------


Function 3: Counter
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function Counter(props, ref) {
        useImperativeHandle(ref, () => {
          throw new Error('should not be invoked');
        });
        return <Text text={props.label + ': ' + ref.current} />;
      }
--------------------------------------------------------------------------------


Function 4: App
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function App(props) {
        return (
          <div>
            <Provider foo={props.foo} bar={props.bar} baz={props.baz}>
              <Indirection>
                <Indirection>
                  <FooAndBar />
                </Indirection>
                <Indirection>
                  <Baz />
                </Indirection>
              </Indirection>
            </Provider>
          </div>
        );
      }
--------------------------------------------------------------------------------


Function 5: ReadInMemo
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function ReadInMemo(props) {
        const count = React.useMemo(() => readContext(Context), []);
        return <Text text={count} />;
      }
--------------------------------------------------------------------------------


Function 6: ReadInReducer
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function ReadInReducer(props) {
        const [count, dispatch] = React.useReducer(() => readContext(Context));
        if (count !== 42) {
          dispatch();
        }
        return <Text text={count} />;
      }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T01:51:07.779Z
File: }
Functions Extracted: 5


Function 1: POST
Language: JavaScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
async function POST(formData) {
    const boundAction = await ReactServerDOMServer.decodeAction(
      formData,
      webpackServerMap,
    );
    const returnValue = boundAction();
    const formState = await ReactServerDOMServer.decodeFormState(
      await returnValue,
      formData,
      webpackServerMap,
    );
    return {returnValue, formState};
  }
--------------------------------------------------------------------------------


Function 2: submit
Language: JavaScript
Lines: 27
Full Code:
--------------------------------------------------------------------------------
function submit(submitter) {
    const form = submitter.form || submitter;
    if (!submitter.form) {
      submitter = undefined;
    }
    const submitEvent = new Event('submit', {bubbles: true, cancelable: true});
    submitEvent.submitter = submitter;
    const returnValue = form.dispatchEvent(submitEvent);
    if (!returnValue) {
      return;
    }
    const action =
      (submitter && submitter.getAttribute('formaction')) || form.action;
    if (!/\s*javascript:/i.test(action)) {
      const method = (submitter && submitter.formMethod) || form.method;
      const encType = (submitter && submitter.formEnctype) || form.enctype;
      if (method === 'post' && encType === 'multipart/form-data') {
        let formData;
        if (submitter) {
          const temp = document.createElement('input');
          temp.name = submitter.name;
          temp.value = submitter.value;
          submitter.parentNode.insertBefore(temp, submitter);
          formData = new FormData(form);
          temp.parentNode.removeChild(temp);
        } else {
          formData = new FormData(form);
        }
        return POST(formData);
      }
      throw new Error('Navigate to: ' + action);
    }
  }
--------------------------------------------------------------------------------


Function 3: readIntoContainer
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
async function readIntoContainer(stream) {
    const reader = stream.getReader();
    let result = '';
    while (true) {
      const {done, value} = await reader.read();
      if (done) {
        break;
      }
      result += Buffer.from(value).toString('utf8');
    }
    const temp = document.createElement('div');
    temp.innerHTML = result;
    insertNodesAndExecuteScripts(temp, container, null);
  }
--------------------------------------------------------------------------------


Function 4: useActionState
Language: JavaScript
Lines: 38
Full Code:
--------------------------------------------------------------------------------
it("useActionState's dispatch binds the initial state to the provided action", async () => {
    const serverAction = serverExports(
      async function action(prevState, formData) {
        return {
          count:
            prevState.count + parseInt(formData.get('incrementAmount'), 10),
        };
      },
    );

    const initialState = {count: 1};
    function Client({action}) {
      const [state, dispatch, isPending] = useActionState(action, initialState);
      return (
        <form action={dispatch}>
          <span>{isPending ? 'Pending...' : ''}</span>
          <span>Count: {state.count}</span>
          <input type="text" name="incrementAmount" defaultValue="5" />
        </form>
      );
    }

    const ClientRef = await clientExports(Client);

    const rscStream = ReactServerDOMServer.renderToReadableStream(
      <ClientRef action={serverAction} />, webpackMap,
    );
    const response = ReactServerDOMClient.createFromReadableStream(rscStream, {
      serverConsumerManifest: {
        moduleMap: null,
        moduleLoading: null,
      },
    });
    const ssrStream = await ReactDOMServer.renderToReadableStream(response);
    await readIntoContainer(ssrStream);

    const form = container.getElementsByTagName('form')[0];
    const pendingSpan = container.getElementsByTagName('span')[0];
    const stateSpan = container.getElementsByTagName('span')[1];
    expect(pendingSpan.textContent).toBe('');
    expect(stateSpan.textContent).toBe('Count: 1');

    const {returnValue} = await submit(form);
    expect(await returnValue).toEqual({count: 6});
  });
--------------------------------------------------------------------------------


Function 5: useActionStateReuse
Language: JavaScript
Lines: 38
Full Code:
--------------------------------------------------------------------------------
it('useActionState can reuse state during MPA form submission', async () => {
    const serverAction = serverExports(
      async function action(prevState, formData) {
        return prevState + 1;
      },
    );

    function Form({action}) {
      const [count, dispatch, isPending] = useActionState(action, 1);
      return (
        <form action={dispatch}>
          {isPending ? 'Pending...' : ''}
          {count}
        </form>
      );
    }

    function Client({action}) {
      return (
        <div>
          <Form action={action} />
          <Form action={action} />
          <Form action={action} />
        </div>
      );
    }

    const ClientRef = await clientExports(Client);

    const rscStream = ReactServerDOMServer.renderToReadableStream(
      <ClientRef action={serverAction} />, webpackMap,
    );
    const response = ReactServerDOMClient.createFromReadableStream(rscStream, {
      serverConsumerManifest: {
        moduleMap: null,
        moduleLoading: null,
      },
    });
    const ssrStream = await ReactDOMServer.renderToReadableStream(response);
    await readIntoContainer(ssrStream);

    expect(container.textContent).toBe('111');
  });
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T01:51:18.777Z
File: Make them available to the helpers.
Functions Extracted: 5


Function 1: Counter
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function Counter(props) {
        const [count] = useState(0);
        return <span>Count: {count}</span>;
      }
--------------------------------------------------------------------------------


Function 2: UpdateCount
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function UpdateCount({setCount, count, children}) {
        if (count < 3) {
          setCount(c => c + 1);
        }
        return <span>{children}</span>;
      }
--------------------------------------------------------------------------------


Function 3: Counter
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        const [count, setCount] = useState(0);
        if (count < 12) {
          setCount(c => c + 1);
          setCount(c => c + 1);
          setCount(c => c + 1);
        }
        return <Text text={'Count: ' + count} />;
      }
--------------------------------------------------------------------------------


Function 4: Counter
Language: JavaScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        const [count, setCount] = useState(0);
        if (count < 3) {
          setCount(count + 1);
        }
        return <span>Count: {count}</span>;
      }
--------------------------------------------------------------------------------


Function 5: Counter
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function Counter() {
          const [count, dispatch] = useReducer(reducer, 0);
          if (count < 3) {
            dispatch('increment');
          }
          yieldValue('Render: ' + count);
          return <Text text={count} />;
        }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T01:51:33.849Z
File: invariant for a missing parent, which is super confusing.
Functions Extracted: 3


Function 1: getEventListenerSet
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
export function getEventListenerSet(node: EventTarget): Set<string> {
  let elementListenerSet = (node: any)[internalEventHandlersKey];
  if (elementListenerSet === undefined) {
    elementListenerSet = (node: any)[internalEventHandlersKey] = new Set();
  }
  return elementListenerSet;
}
--------------------------------------------------------------------------------


Function 2: addEventHandleToTarget
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
export function addEventHandleToTarget(target: EventTarget | ReactScopeInstance, eventHandle: ReactDOMEventHandle): void {
  let eventHandles = (target: any)[internalEventHandlesSetKey];
  if (eventHandles === undefined) {
    eventHandles = (target: any)[internalEventHandlesSetKey] = new Set();
  }
  eventHandles.add(eventHandle);
}
--------------------------------------------------------------------------------


Function 3: getResourcesFromRoot
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
export function getResourcesFromRoot(root: HoistableRoot): RootResources {
  let resources = (root: any)[internalRootNodeResourcesKey];
  if (!resources) {
    resources = (root: any)[internalRootNodeResourcesKey] = {
      hoistableStyles: new Map(),
      hoistableScripts: new Map(),
    };
  }
  return resources;
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T01:51:41.319Z
File: Make them available to the helpers.
Functions Extracted: 2


Function 1: readContext
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function readContext(Ctx) {
        const dispatcher =
          React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE
            .H;
        return dispatcher.readContext(Ctx);
      }
--------------------------------------------------------------------------------


Function 2: App
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
const App = () => (
        <div>
          <Theme.Provider value="light">
            <Language.Provider value="english">
              <Theme.Provider value="dark">
                <Theme.Consumer>
                  {theme => <div id="theme1">{theme}</div>}
                </Theme.Consumer>
              </Theme.Provider>
            </Language.Provider>
          </Theme.Provider>
          <Language.Consumer>
            {language => <div id="language3">{language}</div>}
          </Language.Consumer>
        </div>
      );
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:51:46.848Z
Question Type: multiple-choice
Function: Counter
Function Size: 313 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// Renders a counter that displays the count incremented by a given value.\n\nfunction Counter(props) {\n        const renderCount = useCallback(increment => {\n          return 'Count: ' + (props.count + increment);\n        });\n        return <Text text={renderCount(3)
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:51:50.617Z
Question Type: select-all
Function: useActionState
Function Size: 1727 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: useActionState (JavaScript)\n// Tests the dispatch of useActionState to bind initial state to the provided action.\n\nit("useActionState's dispatch binds the initial state to the provided action", async () => {\n    const serverAction = serverExports(\n      async function action(prevState, 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:51:52.123Z
Question Type: multiple-choice
Function: useActionStateReuse
Function Size: 1313 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: useActionStateReuse (JavaScript)\n// Tests reuse of state during multiple form submissions using useActionState.\n\nit('useActionState can reuse state during MPA form submission', async () => {\n    const serverAction = serverExports(\n      async function action(prevState, formData) {\n     
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:51:52.905Z
Question Type: multiple-choice
Function: UpdateCount
Function Size: 270 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: UpdateCount (JavaScript)\n// A component that updates the count state if it's less than 3.\n\nfunction UpdateCount({setCount, count, children}) {\n        if (count < 3) {\n          setCount(c => c + 1);\n        }\n        return <span>{children}</span>;\n      }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:51:58.307Z
Question Type: multiple-choice
Function: Counter
Function Size: 295 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// A Counter component that increments the count state until it reaches 3.\n\nfunction Counter() {\n        const [count, setCount] = useState(0);\n        if (count < 3) {\n          setCount(count + 1);\n        }\n        return <span>Count: {count}</span>;\n      }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:52:04.555Z
Question Type: multiple-choice
Function: ReadInReducer
Function Size: 329 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: ReadInReducer (JavaScript)\n// Uses useReducer to read context and conditionally dispatch updates.\n\nfunction ReadInReducer(props) {\n        const [count, dispatch] = React.useReducer(() => readContext(Context));\n        if (count !== 42) {\n          dispatch();\n        }\n        return <
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:52:12.029Z
Question Type: multiple-choice
Function: App
Function Size: 638 characters
Questions Generated: 2
Repository: Unknown
Function Preview: // Function: App (JavaScript)\n// Renders a nested context structure with theme and language providers.\n\nconst App = () => (\n        <div>\n          <Theme.Provider value="light">\n            <Language.Provider value="english">\n              <Theme.Provider value="dark">\n                <Theme.Consum
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:52:13.089Z
Question Type: multiple-choice
Function: App
Function Size: 527 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: App (JavaScript)\n// Renders a component tree with context providers and nested components.\n\nfunction App(props) {\n        return (\n          <div>\n            <Provider foo={props.foo} bar={props.bar} baz={props.baz}>\n              <Indirection>\n                <Indirection>\n           
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:52:15.535Z
Question Type: order-sequence
Function: getResourcesFromRoot
Function Size: 431 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getResourcesFromRoot (TypeScript)\n// Retrieves or initializes resources associated with the root.\n\nexport function getResourcesFromRoot(root: HoistableRoot): RootResources {\n  let resources = (root: any)[internalRootNodeResourcesKey];\n  if (!resources) {\n    resources = (root: any)[inte
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:52:15.539Z
Question Type: order-sequence
Function: addEventHandleToTarget
Function Size: 447 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: addEventHandleToTarget (TypeScript)\n// Adds an event handle to the target's set of event handles.\n\nexport function addEventHandleToTarget(target: EventTarget | ReactScopeInstance, eventHandle: ReactDOMEventHandle): void {\n  let eventHandles = (target: any)[internalEventHandlesSetKey];\n 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:52:21.194Z
Question Type: true-false
Function: POST
Function Size: 459 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: POST (JavaScript)\n// Handles the POST action by decoding the action and form state.\n\nasync function POST(formData) {\n    const boundAction = await ReactServerDOMServer.decodeAction(\n      formData,\n      webpackServerMap,\n    );\n    const returnValue = boundAction();\n    const formState
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:52:22.795Z
Question Type: true-false
Function: Counter
Function Size: 373 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// A Counter component that uses useReducer to manage count state with multiple increments.\n\nfunction Counter() {\n          const [count, dispatch] = useReducer(reducer, 0);\n          if (count < 3) {\n            dispatch('increment');\n          }\n          yieldVal
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:52:27.195Z
Question Type: multiple-choice
Function: CapitalizedText
Function Size: 603 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: CapitalizedText (JavaScript)\n// Renders text that is capitalized and updates based on state changes.\n\nfunction CapitalizedText(props) {\n          const [text, setText] = useState(props.text);\n          const [count, setCount] = useState(0);\n          const capitalizeText = useCallback((
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:52:28.299Z
Question Type: select-all
Function: ReadInMemo
Function Size: 234 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: ReadInMemo (JavaScript)\n// Reads context value using useMemo and renders it.\n\nfunction ReadInMemo(props) {\n        const count = React.useMemo(() => readContext(Context), []);\n        return <Text text={count} />;\n      }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:52:32.750Z
Question Type: multiple-choice
Function: Counter
Function Size: 320 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// Uses useImperativeHandle to expose a ref, but throws an error if invoked.\n\nfunction Counter(props, ref) {\n        useImperativeHandle(ref, () => {\n          throw new Error('should not be invoked');\n        });\n        return <Text text={props.label + ': ' + ref.
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:52:33.424Z
Question Type: function-variant
Function: Counter
Function Size: 219 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// A functional component that uses useState to manage a count state.\n\nfunction Counter(props) {\n        const [count] = useState(0);\n        return <span>Count: {count}</span>;\n      }
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760138125780
Repository: Unknown
Total Questions Generated: 25
Total Chunks Processed: 21
Ended: 2025-10-11T01:52:35.216Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T01:57:19.039Z
File: nothing yielded for bad markup
Functions Extracted: 8


Function 1: Counter
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function Counter(props) {
        const renderCount = useCallback(increment => {
          return 'Count: ' + (props.count + increment);
        });
        return <Text text={renderCount(3)} />;
      }
--------------------------------------------------------------------------------


Function 2: CapitalizedText
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function CapitalizedText(props) {
          const [text, setText] = useState(props.text);
          const [count, setCount] = useState(0);
          const capitalizeText = useCallback(() => text.toUpperCase(), [text]);
          yieldValue(capitalizeText);
          if (count < 3) {
            setCount(count + 1);
          }
          if (text === 'hello' && count === 2) {
            setText('hello, world.');
          }
          return <Text text={capitalizeText()} />;
        }
--------------------------------------------------------------------------------


Function 3: Counter
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function Counter(props, ref) {
        useImperativeHandle(ref, () => {
          throw new Error('should not be invoked');
        });
        return <Text text={props.label + ': ' + ref.current} />;
      }
--------------------------------------------------------------------------------


Function 4: Counter
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        useInsertionEffect(() => {
          throw new Error('should not be invoked');
        });

        return <Text text='Count: 0' />;
      }
--------------------------------------------------------------------------------


Function 5: Counter
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        useLayoutEffect(() => {
          throw new Error('should not be invoked');
        });

        return <Text text='Count: 0' />;
      }
--------------------------------------------------------------------------------


Function 6: App
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function App(props) {
        return (
          <div>
            <Provider foo={props.foo} bar={props.bar} baz={props.baz}>
              <Indirection>
                <Indirection>
                  <FooAndBar />
                </Indirection>
                <Indirection>
                  <Baz />
                </Indirection>
              </Indirection>
            </Provider>
          </div>
        );
      }
--------------------------------------------------------------------------------


Function 7: ReadInMemo
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function ReadInMemo(props) {
        const count = React.useMemo(() => readContext(Context), []);
        return <Text text={count} />;
      }
--------------------------------------------------------------------------------


Function 8: ReadInReducer
Language: JavaScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
function ReadInReducer(props) {
        const [count, dispatch] = React.useReducer(() => readContext(Context));
        if (count !== 42) {
          dispatch();
        }
        return <Text text={count} />;
      }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T01:57:57.642Z
File: }
Functions Extracted: 5


Function 1: POST
Language: JavaScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
async function POST(formData) {
    const boundAction = await ReactServerDOMServer.decodeAction(
      formData,
      webpackServerMap,
    );
    const returnValue = boundAction();
    const formState = await ReactServerDOMServer.decodeFormState(
      await returnValue,
      formData,
      webpackServerMap,
    );
    return {returnValue, formState};
  }
--------------------------------------------------------------------------------


Function 2: submit
Language: JavaScript
Lines: 31
Full Code:
--------------------------------------------------------------------------------
function submit(submitter) {
    const form = submitter.form || submitter;
    if (!submitter.form) {
      submitter = undefined;
    }
    const submitEvent = new Event('submit', {bubbles: true, cancelable: true});
    submitEvent.submitter = submitter;
    const returnValue = form.dispatchEvent(submitEvent);
    if (!returnValue) {
      return;
    }
    const action =
      (submitter && submitter.getAttribute('formaction')) || form.action;
    if (!/\s*javascript:/i.test(action)) {
      const method = (submitter && submitter.formMethod) || form.method;
      const encType = (submitter && submitter.formEnctype) || form.enctype;
      if (method === 'post' && encType === 'multipart/form-data') {
        let formData;
        if (submitter) {
          const temp = document.createElement('input');
          temp.name = submitter.name;
          temp.value = submitter.value;
          submitter.parentNode.insertBefore(temp, submitter);
          formData = new FormData(form);
          temp.parentNode.removeChild(temp);
        } else {
          formData = new FormData(form);
        }
        return POST(formData);
      }
      throw new Error('Navigate to: ' + action);
    }
  }
--------------------------------------------------------------------------------


Function 3: readIntoContainer
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
async function readIntoContainer(stream) {
    const reader = stream.getReader();
    let result = '';
    while (true) {
      const {done, value} = await reader.read();
      if (done) {
        break;
      }
      result += Buffer.from(value).toString('utf8');
    }
    const temp = document.createElement('div');
    temp.innerHTML = result;
    insertNodesAndExecuteScripts(temp, container, null);
  }
--------------------------------------------------------------------------------


Function 4: useActionState's dispatch binds the initial state to the provided action
Language: JavaScript
Lines: 37
Full Code:
--------------------------------------------------------------------------------
it("useActionState's dispatch binds the initial state to the provided action", async () => {
    const serverAction = serverExports(
      async function action(prevState, formData) {
        return {
          count:
            prevState.count + parseInt(formData.get('incrementAmount'), 10),
        };
      },
    );

    const initialState = {count: 1};
    function Client({action}) {
      const [state, dispatch, isPending] = useActionState(action, initialState);
      return (
        <form action={dispatch}>
          <span>{isPending ? 'Pending...' : ''}</span>
          <span>Count: {state.count}</span>
          <input type="text" name="incrementAmount" defaultValue="5" />
        </form>
      );
    }

    const ClientRef = await clientExports(Client);

    const rscStream = ReactServerDOMServer.renderToReadableStream(
      <ClientRef action={serverAction} />, 
      webpackMap,
    );
    const response = ReactServerDOMClient.createFromReadableStream(rscStream, {
      serverConsumerManifest: {
        moduleMap: null,
        moduleLoading: null,
      },
    });
    const ssrStream = await ReactDOMServer.renderToReadableStream(response);
    await readIntoContainer(ssrStream);

    const form = container.getElementsByTagName('form')[0];
    const pendingSpan = container.getElementsByTagName('span')[0];
    const stateSpan = container.getElementsByTagName('span')[1];
    expect(pendingSpan.textContent).toBe('');
    expect(stateSpan.textContent).toBe('Count: 1');

    const {returnValue} = await submit(form);
    expect(await returnValue).toEqual({count: 6});
  });
--------------------------------------------------------------------------------


Function 5: useActionState can reuse state during MPA form submission
Language: JavaScript
Lines: 37
Full Code:
--------------------------------------------------------------------------------
it('useActionState can reuse state during MPA form submission', async () => {
    const serverAction = serverExports(
      async function action(prevState, formData) {
        return prevState + 1;
      },
    );

    function Form({action}) {
      const [count, dispatch, isPending] = useActionState(action, 1);
      return (
        <form action={dispatch}>
          {isPending ? 'Pending...' : ''}
          {count}
        </form>
      );
    }

    function Client({action}) {
      return (
        <div>
          <Form action={action} />
          <Form action={action} />
          <Form action={action} />
        </div>
      );
    }

    const ClientRef = await clientExports(Client);

    const rscStream = ReactServerDOMServer.renderToReadableStream(
      <ClientRef action={serverAction} />, 
      webpackMap,
    );
    const response = ReactServerDOMClient.createFromReadableStream(rscStream, {
      serverConsumerManifest: {
        moduleMap: null,
        moduleLoading: null,
      },
    });
    const ssrStream = await ReactDOMServer.renderToReadableStream(response);
    await readIntoContainer(ssrStream);

    expect(container.textContent).toBe('111');
  });
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T01:58:07.457Z
File: Make them available to the helpers.
Functions Extracted: 5


Function 1: Counter
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function Counter(props) {
        const [count] = useState(0);
        return <span>Count: {count}</span>;
      }
--------------------------------------------------------------------------------


Function 2: UpdateCount
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function UpdateCount({setCount, count, children}) {
        if (count < 3) {
          setCount(c => c + 1);
        }
        return <span>{children}</span>;
      }
--------------------------------------------------------------------------------


Function 3: Counter
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        const [count, setCount] = useState(0);
        if (count < 12) {
          setCount(c => c + 1);
          setCount(c => c + 1);
          setCount(c => c + 1);
        }
        return <Text text={'Count: ' + count} />;
      }
--------------------------------------------------------------------------------


Function 4: Counter
Language: JavaScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        const [count, setCount] = useState(0);
        if (count < 3) {
          setCount(count + 1);
        }
        return <span>Count: {count}</span>;
      }
--------------------------------------------------------------------------------


Function 5: Counter
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function Counter() {
          const [count, setCount] = useReducer(reducer, 0);
          if (count < 3) {
            dispatch('increment');
          }
          yieldValue('Render: ' + count);
          return <Text text={count} />;
        }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T01:58:24.984Z
File: Make them available to the helpers.
Functions Extracted: 2


Function 1: readContext
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function readContext(Ctx) {
        const dispatcher =
          React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE
            .H;
        return dispatcher.readContext(Ctx);
      }
--------------------------------------------------------------------------------


Function 2: App
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
const App = () => (
        <div>
          <Theme.Provider value="light">
            <Language.Provider value="english">
              <Theme.Provider value="dark">
                <Theme.Consumer>
                  {theme => <div id="theme1">{theme}</div>}
                </Theme.Consumer>
              </Theme.Provider>
              <Language.Consumer>
                {language => <div id="language2">{language}</div>}
              </Language.Consumer>
            </Language.Provider>
          </Theme.Provider>
          <Language.Consumer>
            {language => <div id="language3">{language}</div>}
          </Language.Consumer>
        </div>
      );
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:58:31.005Z
Question Type: multiple-choice
Function: useActionState's dispatch binds the initial state to the provided action
Function Size: 1769 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: useActionState's dispatch binds the initial state to the provided action (JavaScript)\n// Tests the dispatch of useActionState with an initial state.\n\nit("useActionState's dispatch binds the initial state to the provided action", async () => {\n    const serverAction = serverExports(\n    
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:58:34.549Z
Question Type: multiple-choice
Function: CapitalizedText
Function Size: 590 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: CapitalizedText (JavaScript)\n// Capitalizes text and updates state based on conditions.\n\nfunction CapitalizedText(props) {\n          const [text, setText] = useState(props.text);\n          const [count, setCount] = useState(0);\n          const capitalizeText = useCallback(() => text.toU
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:58:34.556Z
Question Type: order-sequence
Function: Counter
Function Size: 304 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// Uses imperative handle to manage ref and display a label.\n\nfunction Counter(props, ref) {\n        useImperativeHandle(ref, () => {\n          throw new Error('should not be invoked');\n        });\n        return <Text text={props.label + ': ' + ref.current} />;\n   
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:58:36.825Z
Question Type: multiple-choice
Function: Counter
Function Size: 348 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// A counter component that uses a reducer to increment the count.\n\nfunction Counter() {\n          const [count, setCount] = useReducer(reducer, 0);\n          if (count < 3) {\n            dispatch('increment');\n          }\n          yieldValue('Render: ' + count);\n 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:58:39.769Z
Question Type: function-variant
Function: Counter
Function Size: 304 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// Renders a count that increments based on props and a callback.\n\nfunction Counter(props) {\n        const renderCount = useCallback(increment => {\n          return 'Count: ' + (props.count + increment);\n        });\n        return <Text text={renderCount(3)} />;\n   
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:58:41.376Z
Question Type: true-false
Function: Counter
Function Size: 373 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// A counter component that increments the count multiple times if less than 12.\n\nfunction Counter() {\n        const [count, setCount] = useState(0);\n        if (count < 12) {\n          setCount(c => c + 1);\n          setCount(c => c + 1);\n          setCount(c => c 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:58:46.912Z
Question Type: multiple-choice
Function: ReadInReducer
Function Size: 324 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: ReadInReducer (JavaScript)\n// Reads context value using useReducer and dispatches if needed.\n\nfunction ReadInReducer(props) {\n        const [count, dispatch] = React.useReducer(() => readContext(Context));\n        if (count !== 42) {\n          dispatch();\n        }\n        return <Text 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:58:59.382Z
Question Type: order-sequence
Function: readIntoContainer
Function Size: 520 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: readIntoContainer (JavaScript)\n// Reads a stream and inserts the resulting HTML into a container.\n\nasync function readIntoContainer(stream) {\n    const reader = stream.getReader();\n    let result = '';\n    while (true) {\n      const {done, value} = await reader.read();\n      if (done) {
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:58:59.904Z
Question Type: select-all
Function: submit
Function Size: 1303 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: submit (JavaScript)\n// Submits a form and handles the action based on the submitter.\n\nfunction submit(submitter) {\n    const form = submitter.form || submitter;\n    if (!submitter.form) {\n      submitter = undefined;\n    }\n    const submitEvent = new Event('submit', {bubbles: true, canc
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:59:02.048Z
Question Type: multiple-choice
Function: Counter
Function Size: 220 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// A counter component that displays the current count using useState.\n\nfunction Counter(props) {\n        const [count] = useState(0);\n        return <span>Count: {count}</span>;\n      }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T01:59:05.014Z
Question Type: function-variant
Function: App
Function Size: 774 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: App (JavaScript)\n// Renders a nested context structure with theme and language providers.\n\nconst App = () => (\n        <div>\n          <Theme.Provider value="light">\n            <Language.Provider value="english">\n              <Theme.Provider value="dark">\n                <Theme.Consum
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760138125780
Repository: Unknown
Total Questions Generated: 15
Total Chunks Processed: 20
Ended: 2025-10-11T01:59:07.156Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T02:20:33.747Z
File: nothing yielded for bad markup
Functions Extracted: 6


Function 1: Counter
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function Counter(props) {
        const renderCount = useCallback(increment => {
          return 'Count: ' + (props.count + increment);
        });
        return <Text text={renderCount(3)} />;
      }
--------------------------------------------------------------------------------


Function 2: CapitalizedText
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function CapitalizedText(props) {
          const [text, setText] = useState(props.text);
          const [count, setCount] = useState(0);
          const capitalizeText = useCallback(() => text.toUpperCase(), [text]);
          yieldValue(capitalizeText);
          if (count < 3) {
            setCount(count + 1);
          }
          if (text === 'hello' && count === 2) {
            setText('hello, world.');
          }
          return <Text text={capitalizeText()} />;
        }
--------------------------------------------------------------------------------


Function 3: Counter
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function Counter(props, ref) {
        useImperativeHandle(ref, () => {
          throw new Error('should not be invoked');
        });
        return <Text text={props.label + ': ' + ref.current} />;
      }
--------------------------------------------------------------------------------


Function 4: App
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function App(props) {
        return (
          <div>
            <Provider foo={props.foo} bar={props.bar} baz={props.baz}>
              <Indirection>
                <Indirection>
                  <FooAndBar />
                </Indirection>
                <Indirection>
                  <Baz />
                </Indirection>
              </Indirection>
            </Provider>
          </div>
        );
      }
--------------------------------------------------------------------------------


Function 5: ReadInMemo
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function ReadInMemo(props) {
        const count = React.useMemo(() => readContext(Context), []);
        return <Text text={count} />;
      }
--------------------------------------------------------------------------------


Function 6: ReadInReducer
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function ReadInReducer(props) {
        const [count, dispatch] = React.useReducer(() => readContext(Context));
        if (count !== 42) {
          dispatch();
        }
        return <Text text={count} />;
      }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T02:21:09.194Z
File: }
Functions Extracted: 5


Function 1: POST
Language: JavaScript
Lines: 9
Full Code:
--------------------------------------------------------------------------------
async function POST(formData) {
    const boundAction = await ReactServerDOMServer.decodeAction(
      formData,
      webpackServerMap,
    );
    const returnValue = boundAction();
    const formState = await ReactServerDOMServer.decodeFormState(
      await returnValue,
      formData,
      webpackServerMap,
    );
    return {returnValue, formState};
  }
--------------------------------------------------------------------------------


Function 2: submit
Language: JavaScript
Lines: 31
Full Code:
--------------------------------------------------------------------------------
function submit(submitter) {
    const form = submitter.form || submitter;
    if (!submitter.form) {
      submitter = undefined;
    }
    const submitEvent = new Event('submit', {bubbles: true, cancelable: true});
    submitEvent.submitter = submitter;
    const returnValue = form.dispatchEvent(submitEvent);
    if (!returnValue) {
      return;
    }
    const action =
      (submitter && submitter.getAttribute('formaction')) || form.action;
    if (!/\s*javascript:/i.test(action)) {
      const method = (submitter && submitter.formMethod) || form.method;
      const encType = (submitter && submitter.formEnctype) || form.enctype;
      if (method === 'post' && encType === 'multipart/form-data') {
        let formData;
        if (submitter) {
          const temp = document.createElement('input');
          temp.name = submitter.name;
          temp.value = submitter.value;
          submitter.parentNode.insertBefore(temp, submitter);
          formData = new FormData(form);
          temp.parentNode.removeChild(temp);
        } else {
          formData = new FormData(form);
        }
        return POST(formData);
      }
      throw new Error('Navigate to: ' + action);
    }
  }
--------------------------------------------------------------------------------


Function 3: readIntoContainer
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
async function readIntoContainer(stream) {
    const reader = stream.getReader();
    let result = '';
    while (true) {
      const {done, value} = await reader.read();
      if (done) {
        break;
      }
      result += Buffer.from(value).toString('utf8');
    }
    const temp = document.createElement('div');
    temp.innerHTML = result;
    insertNodesAndExecuteScripts(temp, container, null);
  }
--------------------------------------------------------------------------------


Function 4: useActionState
Language: JavaScript
Lines: 35
Full Code:
--------------------------------------------------------------------------------
it("useActionState's dispatch binds the initial state to the provided action", async () => {
    const serverAction = serverExports(
      async function action(prevState, formData) {
        return {
          count:
            prevState.count + parseInt(formData.get('incrementAmount'), 10),
        };
      },
    );

    const initialState = {count: 1};
    function Client({action}) {
      const [state, dispatch, isPending] = useActionState(action, initialState);
      return (
        <form action={dispatch}>
          <span>{isPending ? 'Pending...' : ''}</span>
          <span>Count: {state.count}</span>
          <input type="text" name="incrementAmount" defaultValue="5" />
        </form>
      );
    }

    const ClientRef = await clientExports(Client);

    const rscStream = ReactServerDOMServer.renderToReadableStream(
      <ClientRef action={serverAction} />, webpackMap,
    );
    const response = ReactServerDOMClient.createFromReadableStream(rscStream, {
      serverConsumerManifest: {
        moduleMap: null,
        moduleLoading: null,
      },
    });
    const ssrStream = await ReactDOMServer.renderToReadableStream(response);
    await readIntoContainer(ssrStream);

    const form = container.getElementsByTagName('form')[0];
    const pendingSpan = container.getElementsByTagName('span')[0];
    const stateSpan = container.getElementsByTagName('span')[1];
    expect(pendingSpan.textContent).toBe('');
    expect(stateSpan.textContent).toBe('Count: 1');

    const {returnValue} = await submit(form);
    expect(await returnValue).toEqual({count: 6});
  });
--------------------------------------------------------------------------------


Function 5: useActionStateReuse
Language: JavaScript
Lines: 35
Full Code:
--------------------------------------------------------------------------------
it('useActionState can reuse state during MPA form submission', async () => {
    const serverAction = serverExports(
      async function action(prevState, formData) {
        return prevState + 1;
      },
    );

    function Form({action}) {
      const [count, dispatch, isPending] = useActionState(action, 1);
      return (
        <form action={dispatch}>
          {isPending ? 'Pending...' : ''}
          {count}
        </form>
      );
    }

    function Client({action}) {
      return (
        <div>
          <Form action={action} />
          <Form action={action} />
          <Form action={action} />
        </div>
      );
    }

    const ClientRef = await clientExports(Client);

    const rscStream = ReactServerDOMServer.renderToReadableStream(
      <ClientRef action={serverAction} />, webpackMap,
    );
    const response = ReactServerDOMClient.createFromReadableStream(rscStream, {
      serverConsumerManifest: {
        moduleMap: null,
        moduleLoading: null,
      },
    });
    const ssrStream = await ReactDOMServer.renderToReadableStream(response);
    await readIntoContainer(ssrStream);

    expect(container.textContent).toBe('111');
  });
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T02:21:19.553Z
File: Make them available to the helpers.
Functions Extracted: 5


Function 1: Counter
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function Counter(props) {
        const [count] = useState(0);
        return <span>Count: {count}</span>;
      }
--------------------------------------------------------------------------------


Function 2: UpdateCount
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function UpdateCount({setCount, count, children}) {
        if (count < 3) {
          setCount(c => c + 1);
        }
        return <span>{children}</span>;
      }
--------------------------------------------------------------------------------


Function 3: Counter
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        const [count, setCount] = useState(0);
        if (count < 12) {
          setCount(c => c + 1);
          setCount(c => c + 1);
          setCount(c => c + 1);
        }
        return <Text text={'Count: ' + count} />;
      }
--------------------------------------------------------------------------------


Function 4: Counter
Language: JavaScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        const [count, setCount] = useState(0);
        if (count < 3) {
          setCount(count + 1);
        }
        return <span>Count: {count}</span>;
      }
--------------------------------------------------------------------------------


Function 5: Counter
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function Counter() {
          const [count, dispatch] = useReducer(reducer, 0);
          if (count < 3) {
            dispatch('increment');
          }
          yieldValue('Render: ' + count);
          return <Text text={count} />;
        }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T02:21:34.551Z
File: Make them available to the helpers.
Functions Extracted: 2


Function 1: readContext
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function readContext(Ctx) {
        const dispatcher =
          React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE
            .H;
        return dispatcher.readContext(Ctx);
      }
--------------------------------------------------------------------------------


Function 2: App
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
const App = () => (
        <div>
          <Theme.Provider value="light">
            <Language.Provider value="english">
              <Theme.Provider value="dark">
                <Theme.Consumer>
                  {theme => <div id="theme1">{theme}</div>}
                </Theme.Consumer>
              </Theme.Provider>
              <Language.Consumer>
                {language => <div id="language2">{language}</div>}
              </Language.Consumer>
            </Language.Provider>
          </Theme.Provider>
          <Language.Consumer>
            {language => <div id="language3">{language}</div>}
          </Language.Consumer>
        </div>
      );
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T02:21:41.208Z
Question Type: true-false
Function: Counter
Function Size: 366 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// A functional component that increments the count state multiple times.\n\nfunction Counter() {\n        const [count, setCount] = useState(0);\n        if (count < 12) {\n          setCount(c => c + 1);\n          setCount(c => c + 1);\n          setCount(c => c + 1);\n 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T02:21:44.166Z
Question Type: select-all
Function: readContext
Function Size: 291 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: readContext (JavaScript)\n// Reads context value from the provided context.\n\nfunction readContext(Ctx) {\n        const dispatcher =\n          React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE\n            .H;\n        return dispatcher.readContext(Ctx);\n      }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T02:21:44.226Z
Question Type: multiple-choice
Function: CapitalizedText
Function Size: 589 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: CapitalizedText (JavaScript)\n// Updates and capitalizes text based on state and props.\n\nfunction CapitalizedText(props) {\n          const [text, setText] = useState(props.text);\n          const [count, setCount] = useState(0);\n          const capitalizeText = useCallback(() => text.toUp
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T02:21:44.326Z
Question Type: select-all
Function: UpdateCount
Function Size: 275 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: UpdateCount (JavaScript)\n// A functional component that conditionally updates the count state.\n\nfunction UpdateCount({setCount, count, children}) {\n        if (count < 3) {\n          setCount(c => c + 1);\n        }\n        return <span>{children}</span>;\n      }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T02:21:52.537Z
Question Type: multiple-choice
Function: POST
Function Size: 455 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: POST (JavaScript)\n// Handles POST requests by decoding actions and form states.\n\nasync function POST(formData) {\n    const boundAction = await ReactServerDOMServer.decodeAction(\n      formData,\n      webpackServerMap,\n    );\n    const returnValue = boundAction();\n    const formState = a
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T02:21:54.287Z
Question Type: multiple-choice
Function: Counter
Function Size: 298 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// A functional component that increments the count state until it reaches 3.\n\nfunction Counter() {\n        const [count, setCount] = useState(0);\n        if (count < 3) {\n          setCount(count + 1);\n        }\n        return <span>Count: {count}</span>;\n      }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T02:21:58.712Z
Question Type: order-sequence
Function: Counter
Function Size: 219 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// A functional component that uses useState to manage a count state.\n\nfunction Counter(props) {\n        const [count] = useState(0);\n        return <span>Count: {count}</span>;\n      }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T02:22:02.370Z
Question Type: multiple-choice
Function: useActionState
Function Size: 1701 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: useActionState (JavaScript)\n// Tests the dispatch of useActionState with initial state.\n\nit("useActionState's dispatch binds the initial state to the provided action", async () => {\n    const serverAction = serverExports(\n      async function action(prevState, formData) {\n        return
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T02:22:05.678Z
Question Type: multiple-choice
Function: App
Function Size: 769 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: App (JavaScript)\n// Renders a component with nested context providers and consumers.\n\nconst App = () => (\n        <div>\n          <Theme.Provider value="light">\n            <Language.Provider value="english">\n              <Theme.Provider value="dark">\n                <Theme.Consumer>\n 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T02:22:16.049Z
Question Type: order-sequence
Function: useActionStateReuse
Function Size: 1309 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: useActionStateReuse (JavaScript)\n// Tests reuse of state in multiple form submissions using useActionState.\n\nit('useActionState can reuse state during MPA form submission', async () => {\n    const serverAction = serverExports(\n      async function action(prevState, formData) {\n        r
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T02:22:16.215Z
Question Type: function-variant
Function: Counter
Function Size: 314 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// Calculates and displays the count based on props and an increment value.\n\nfunction Counter(props) {\n        const renderCount = useCallback(increment => {\n          return 'Count: ' + (props.count + increment);\n        });\n        return <Text text={renderCount(3
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T02:22:18.323Z
Question Type: true-false
Function: App
Function Size: 532 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: App (JavaScript)\n// Renders a component structure with context providers and nested components.\n\nfunction App(props) {\n        return (\n          <div>\n            <Provider foo={props.foo} bar={props.bar} baz={props.baz}>\n              <Indirection>\n                <Indirection>\n      
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760138125780
Repository: Unknown
Total Questions Generated: 19
Total Chunks Processed: 18
Ended: 2025-10-11T02:22:21.378Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T03:08:55.023Z
File: nothing yielded for bad markup
Functions Extracted: 8


Function 1: Counter
Language: JavaScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
function Counter(props) {
        const renderCount = useCallback(increment => {
          return 'Count: ' + (props.count + increment);
        });
        return <Text text={renderCount(3)} />;
      }
--------------------------------------------------------------------------------


Function 2: CapitalizedText
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function CapitalizedText(props) {
          const [text, setText] = useState(props.text);
          const [count, setCount] = useState(0);
          const capitalizeText = useCallback(() => text.toUpperCase(), [text]);
          yieldValue(capitalizeText);
          if (count < 3) {
            setCount(count + 1);
          }
          if (text === 'hello' && count === 2) {
            setText('hello, world.');
          }
          return <Text text={capitalizeText()} />;
        }
--------------------------------------------------------------------------------


Function 3: Counter
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function Counter(props, ref) {
        useImperativeHandle(ref, () => {
          throw new Error('should not be invoked');
        });
        return <Text text={props.label + ': ' + ref.current} />;
      }
--------------------------------------------------------------------------------


Function 4: Counter
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        useInsertionEffect(() => {
          throw new Error('should not be invoked');
        });

        return <Text text="Count: 0" />;
      }
--------------------------------------------------------------------------------


Function 5: Counter
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        useLayoutEffect(() => {
          throw new Error('should not be invoked');
        });

        return <Text text="Count: 0" />;
      }
--------------------------------------------------------------------------------


Function 6: App
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function App(props) {
        return (
          <div>
            <Provider foo={props.foo} bar={props.bar} baz={props.baz}>
              <Indirection>
                <Indirection>
                  <FooAndBar />
                </Indirection>
                <Indirection>
                  <Baz />
                </Indirection>
              </Indirection>
            </Provider>
          </div>
        );
      }
--------------------------------------------------------------------------------


Function 7: ReadInMemo
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function ReadInMemo(props) {
        const count = React.useMemo(() => readContext(Context), []);
        return <Text text={count} />;
      }
--------------------------------------------------------------------------------


Function 8: ReadInReducer
Language: JavaScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
function ReadInReducer(props) {
        const [count, dispatch] = React.useReducer(() => readContext(Context));
        if (count !== 42) {
          dispatch();
        }
        return <Text text={count} />;
      }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T03:09:25.631Z
File: }
Functions Extracted: 5


Function 1: POST
Language: JavaScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
async function POST(formData) {
    const boundAction = await ReactServerDOMServer.decodeAction(
      formData,
      webpackServerMap,
    );
    const returnValue = boundAction();
    const formState = await ReactServerDOMServer.decodeFormState(
      await returnValue,
      formData,
      webpackServerMap,
    );
    return {returnValue, formState};
  }
--------------------------------------------------------------------------------


Function 2: submit
Language: JavaScript
Lines: 31
Full Code:
--------------------------------------------------------------------------------
function submit(submitter) {
    const form = submitter.form || submitter;
    if (!submitter.form) {
      submitter = undefined;
    }
    const submitEvent = new Event('submit', {bubbles: true, cancelable: true});
    submitEvent.submitter = submitter;
    const returnValue = form.dispatchEvent(submitEvent);
    if (!returnValue) {
      return;
    }
    const action =
      (submitter && submitter.getAttribute('formaction')) || form.action;
    if (!/\s*javascript:/i.test(action)) {
      const method = (submitter && submitter.formMethod) || form.method;
      const encType = (submitter && submitter.formEnctype) || form.enctype;
      if (method === 'post' && encType === 'multipart/form-data') {
        let formData;
        if (submitter) {
          const temp = document.createElement('input');
          temp.name = submitter.name;
          temp.value = submitter.value;
          submitter.parentNode.insertBefore(temp, submitter);
          formData = new FormData(form);
          temp.parentNode.removeChild(temp);
        } else {
          formData = new FormData(form);
        }
        return POST(formData);
      }
      throw new Error('Navigate to: ' + action);
    }
  }
--------------------------------------------------------------------------------


Function 3: readIntoContainer
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
async function readIntoContainer(stream) {
    const reader = stream.getReader();
    let result = '';
    while (true) {
      const {done, value} = await reader.read();
      if (done) {
        break;
      }
      result += Buffer.from(value).toString('utf8');
    }
    const temp = document.createElement('div');
    temp.innerHTML = result;
    insertNodesAndExecuteScripts(temp, container, null);
  }
--------------------------------------------------------------------------------


Function 4: useActionState
Language: JavaScript
Lines: 42
Full Code:
--------------------------------------------------------------------------------
it("useActionState's dispatch binds the initial state to the provided action", async () => {
    const serverAction = serverExports(
      async function action(prevState, formData) {
        return {
          count:
            prevState.count + parseInt(formData.get('incrementAmount'), 10),
        };
      },
    );

    const initialState = {count: 1};
    function Client({action}) {
      const [state, dispatch, isPending] = useActionState(action, initialState);
      return (
        <form action={dispatch}>
          <span>{isPending ? 'Pending...' : ''}</span>
          <span>Count: {state.count}</span>
          <input type="text" name="incrementAmount" defaultValue="5" />
        </form>
      );
    }

    const ClientRef = await clientExports(Client);

    const rscStream = ReactServerDOMServer.renderToReadableStream(
      <ClientRef action={serverAction} />, 
      webpackMap,
    );
    const response = ReactServerDOMClient.createFromReadableStream(rscStream, {
      serverConsumerManifest: {
        moduleMap: null,
        moduleLoading: null,
      },
    });
    const ssrStream = await ReactDOMServer.renderToReadableStream(response);
    await readIntoContainer(ssrStream);

    const form = container.getElementsByTagName('form')[0];
    const pendingSpan = container.getElementsByTagName('span')[0];
    const stateSpan = container.getElementsByTagName('span')[1];
    expect(pendingSpan.textContent).toBe('');
    expect(stateSpan.textContent).toBe('Count: 1');

    const {returnValue} = await submit(form);
    expect(await returnValue).toEqual({count: 6});
  });
--------------------------------------------------------------------------------


Function 5: useActionStateReuse
Language: JavaScript
Lines: 42
Full Code:
--------------------------------------------------------------------------------
it('useActionState can reuse state during MPA form submission', async () => {
    const serverAction = serverExports(
      async function action(prevState, formData) {
        return prevState + 1;
      },
    );

    function Form({action}) {
      const [count, dispatch, isPending] = useActionState(action, 1);
      return (
        <form action={dispatch}>
          {isPending ? 'Pending...' : ''}
          {count}
        </form>
      );
    }

    function Client({action}) {
      return (
        <div>
          <Form action={action} />
          <Form action={action} />
          <Form action={action} />
        </div>
      );
    }

    const ClientRef = await clientExports(Client);

    const rscStream = ReactServerDOMServer.renderToReadableStream(
      <ClientRef action={serverAction} />, 
      webpackMap,
    );
    const response = ReactServerDOMClient.createFromReadableStream(rscStream, {
      serverConsumerManifest: {
        moduleMap: null,
        moduleLoading: null,
      },
    });
    const ssrStream = await ReactDOMServer.renderToReadableStream(response);
    await readIntoContainer(ssrStream);

    expect(container.textContent).toBe('111');
  });
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T03:09:39.460Z
File: Make them available to the helpers.
Functions Extracted: 8


Function 1: Counter
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function Counter(props) {
        const [count] = useState(0);
        return <span>Count: {count}</span>;
      }
--------------------------------------------------------------------------------


Function 2: UpdateCount
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function UpdateCount({setCount, count, children}) {
        if (count < 3) {
          setCount(c => c + 1);
        }
        return <span>{children}</span>;
      }
--------------------------------------------------------------------------------


Function 3: Counter
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        const [count, setCount] = useState(0);
        if (count < 12) {
          setCount(c => c + 1);
          setCount(c => c + 1);
          setCount(c => c + 1);
        }
        return <Text text={'Count: ' + count} />;
      }
--------------------------------------------------------------------------------


Function 4: Counter
Language: JavaScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        const [count, setCount] = useState(0);
        if (count < 3) {
          setCount(count + 1);
        }
        return <span>Count: {count}</span>;
      }
--------------------------------------------------------------------------------


Function 5: Counter
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function Counter() {
          const [count, setCount] = useState(0);
          setCount(count + 1);
          return <span>{count}</span>;
        }
--------------------------------------------------------------------------------


Function 6: Counter
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        const [count] = useReducer(reducer, 0);
        yieldValue('Render: ' + count);
        return <Text text={count} />;
      }
--------------------------------------------------------------------------------


Function 7: Counter
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        const [count] = useReducer(reducer, 0, c => c + 1);
        yieldValue('Render: ' + count);
        return <Text text={count} />;
      }
--------------------------------------------------------------------------------


Function 8: Counter
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        const [count, dispatch] = useReducer(reducer, 0);
        if (count < 3) {
          dispatch('increment');
        }
        yieldValue('Render: ' + count);
        return <Text text={count} />;
      }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T03:09:50.374Z
File: invariant for a missing parent, which is super confusing.
Functions Extracted: 4


Function 1: getEventListenerSet
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
export function getEventListenerSet(node: EventTarget): Set<string> {
  let elementListenerSet = (node: any)[internalEventHandlersKey];
  if (elementListenerSet === undefined) {
    elementListenerSet = (node: any)[internalEventHandlersKey] = new Set();
  }
  return elementListenerSet;
}
--------------------------------------------------------------------------------


Function 2: getResourcesFromRoot
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
export function getResourcesFromRoot(root: HoistableRoot): RootResources {
  let resources = (root: any)[internalRootNodeResourcesKey];
  if (!resources) {
    resources = (root: any)[internalRootNodeResourcesKey] = {
      hoistableStyles: new Map(),
      hoistableScripts: new Map(),
    };
  }
  return resources;
}
--------------------------------------------------------------------------------


Function 3: addEventHandleToTarget
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
export function addEventHandleToTarget(
  target: EventTarget | ReactScopeInstance,
  eventHandle: ReactDOMEventHandle,
): void {
  let eventHandles = (target: any)[internalEventHandlesSetKey];
  if (eventHandles === undefined) {
    eventHandles = (target: any)[internalEventHandlesSetKey] = new Set();
  }
  eventHandles.add(eventHandle);
}
--------------------------------------------------------------------------------


Function 4: doesTargetHaveEventHandle
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
export function doesTargetHaveEventHandle(
  target: EventTarget | ReactScopeInstance,
  eventHandle: ReactDOMEventHandle,
): boolean {
  const eventHandles = (target: any)[internalEventHandlesSetKey];
  if (eventHandles === undefined) {
    return false;
  }
  return eventHandles.has(eventHandle);
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T03:09:55.270Z
File: Make them available to the helpers.
Functions Extracted: 2


Function 1: readContext
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function readContext(Ctx) {
    const dispatcher =
      React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE
        .H;
    return dispatcher.readContext(Ctx);
}
--------------------------------------------------------------------------------


Function 2: App
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
const App = () => (
    <div>
      <Theme.Provider value="light">
        <Language.Provider value="english">
          <Theme.Provider value="dark">
            <Theme.Consumer>
              {theme => <div id="theme1">{theme}</div>}
            </Theme.Consumer>
          </Theme.Provider>
        </Language.Provider>
      </Theme.Provider>
      <Language.Consumer>
        {language => <div id="language3">{language}</div>}
      </Language.Consumer>
    </div>
  );
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:10:02.840Z
Question Type: multiple-choice
Function: POST
Function Size: 453 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: POST (JavaScript)\n// Handles POST requests and decodes action and form state.\n\nasync function POST(formData) {\n    const boundAction = await ReactServerDOMServer.decodeAction(\n      formData,\n      webpackServerMap,\n    );\n    const returnValue = boundAction();\n    const formState = awa
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:10:03.315Z
Question Type: true-false
Function: addEventHandleToTarget
Function Size: 454 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: addEventHandleToTarget (TypeScript)\n// Adds an event handle to the target's set of event handles.\n\nexport function addEventHandleToTarget(\n  target: EventTarget | ReactScopeInstance,\n  eventHandle: ReactDOMEventHandle,\n): void {\n  let eventHandles = (target: any)[internalEventHandlesSet
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:10:06.518Z
Question Type: multiple-choice
Function: submit
Function Size: 1290 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: submit (JavaScript)\n// Submits a form and handles form data processing.\n\nfunction submit(submitter) {\n    const form = submitter.form || submitter;\n    if (!submitter.form) {\n      submitter = undefined;\n    }\n    const submitEvent = new Event('submit', {bubbles: true, cancelable: true}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:10:11.420Z
Question Type: function-variant
Function: Counter
Function Size: 271 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// A Counter component that uses useReducer with lazy initialization.\n\nfunction Counter() {\n        const [count] = useReducer(reducer, 0, c => c + 1);\n        yieldValue('Render: ' + count);\n        return <Text text={count} />;\n      }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:10:12.733Z
Question Type: multiple-choice
Function: Counter
Function Size: 271 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// A Counter component that uses useReducer to manage count state with a reducer.\n\nfunction Counter() {\n        const [count] = useReducer(reducer, 0);\n        yieldValue('Render: ' + count);\n        return <Text text={count} />;\n      }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:10:15.474Z
Question Type: order-sequence
Function: CapitalizedText
Function Size: 615 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: CapitalizedText (JavaScript)\n// Manages text state and capitalizes it based on conditions, updating the display.\n\nfunction CapitalizedText(props) {\n          const [text, setText] = useState(props.text);\n          const [count, setCount] = useState(0);\n          const capitalizeText = u
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:10:17.228Z
Question Type: multiple-choice
Function: readContext
Function Size: 280 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: readContext (JavaScript)\n// Reads the context value from the provided context object.\n\nfunction readContext(Ctx) {\n    const dispatcher =\n      React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE\n        .H;\n    return dispatcher.readContext(Ctx);\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:10:21.487Z
Question Type: multiple-choice
Function: ReadInMemo
Function Size: 234 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: ReadInMemo (JavaScript)\n// Reads context value using useMemo and renders it.\n\nfunction ReadInMemo(props) {\n        const count = React.useMemo(() => readContext(Context), []);\n        return <Text text={count} />;\n      }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:10:27.694Z
Question Type: multiple-choice
Function: Counter
Function Size: 318 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// Renders a text displaying the count incremented by a value using a callback.\n\nfunction Counter(props) {\n        const renderCount = useCallback(increment => {\n          return 'Count: ' + (props.count + increment);\n        });\n        return <Text text={renderCou
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:10:29.093Z
Question Type: order-sequence
Function: App
Function Size: 519 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: App (JavaScript)\n// Renders a provider with multiple components consuming context.\n\nfunction App(props) {\n        return (\n          <div>\n            <Provider foo={props.foo} bar={props.bar} baz={props.baz}>\n              <Indirection>\n                <Indirection>\n                  <
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:10:36.727Z
Question Type: multiple-choice
Function: Counter
Function Size: 295 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// A Counter component that increments the count state until it reaches 3.\n\nfunction Counter() {\n        const [count, setCount] = useState(0);\n        if (count < 3) {\n          setCount(count + 1);\n        }\n        return <span>Count: {count}</span>;\n      }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:10:36.754Z
Question Type: multiple-choice
Function: App
Function Size: 578 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: App (JavaScript)\n// Renders a nested context structure with theme and language providers.\n\nconst App = () => (\n    <div>\n      <Theme.Provider value="light">\n        <Language.Provider value="english">\n          <Theme.Provider value="dark">\n            <Theme.Consumer>\n              {t
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760138125780
Repository: Unknown
Total Questions Generated: 15
Total Chunks Processed: 27
Ended: 2025-10-11T03:10:40.916Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T03:14:38.978Z
File: the API is ~stable, so this should be fine
Functions Extracted: 2


Function 1: closeSpanWithError
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
const closeSpanWithError = (span: Span, error?: Error) => {
  if (isBubbledError(error) && error.bubble) {
    span.setAttribute('next.bubble', true)
  } else {
    if (error) {
      span.recordException(error)
      span.setAttribute('error.type', error.name)
    }
    span.setStatus({ code: SpanStatusCode.ERROR, message: error?.message })
  }
  span.end()
}
--------------------------------------------------------------------------------


Function 2: getTracePropagationData
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
public getTracePropagationData(): ClientTraceDataEntry[] {
    const activeContext = context.active()
    const entries: ClientTraceDataEntry[] = []
    propagation.inject(activeContext, entries, clientTraceDataSetter)
    return entries
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T03:14:56.926Z
File: vercel-next.js-02172b3/packages/next/src/compiled/@edge-runtime/cookies/index.d.ts
Functions Extracted: 3


Function 1: stringifyCookie
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
declare function stringifyCookie(c: ResponseCookie | RequestCookie): string {
    const cookieParts: string[] = [];
    cookieParts.push(`${c.name}=${c.value}`);
    if (c.domain) cookieParts.push(`Domain=${c.domain}`);
    if (c.path) cookieParts.push(`Path=${c.path}`);
    if (c.expires) cookieParts.push(`Expires=${new Date(c.expires).toUTCString()}`);
    if (c.httpOnly) cookieParts.push(`HttpOnly`);
    if (c.secure) cookieParts.push(`Secure`);
    if (c.sameSite) cookieParts.push(`SameSite=${c.sameSite}`);
    return cookieParts.join('; ');
}
--------------------------------------------------------------------------------


Function 2: parseCookie
Language: TypeScript
Lines: 9
Full Code:
--------------------------------------------------------------------------------
declare function parseCookie(cookie: string): Map<string, string> {
    const cookieMap = new Map<string, string>();
    const cookiePairs = cookie.split('; ');
    for (const pair of cookiePairs) {
        const [key, value] = pair.split('=');
        cookieMap.set(decodeURIComponent(key), decodeURIComponent(value));
    }
    return cookieMap;
}
--------------------------------------------------------------------------------


Function 3: parseSetCookie
Language: TypeScript
Lines: 20
Full Code:
--------------------------------------------------------------------------------
declare function parseSetCookie(setCookie: string): undefined | ResponseCookie {
    const cookieParts = setCookie.split('; ');
    const [nameValue, ...attributes] = cookieParts;
    const [name, value] = nameValue.split('=');
    const cookie: ResponseCookie = { name: decodeURIComponent(name), value: decodeURIComponent(value) };
    for (const attribute of attributes) {
        const [key, val] = attribute.split('=');
        switch (key.toLowerCase()) {
            case 'expires':
                cookie.expires = new Date(val);
                break;
            case 'max-age':
                cookie.maxAge = parseInt(val, 10);
                break;
            case 'httponly':
                cookie.httpOnly = true;
                break;
            case 'secure':
                cookie.secure = true;
                break;
            case 'samesite':
                cookie.sameSite = val;
                break;
            // Handle other attributes as needed
        }
    }
    return cookie;
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T03:15:21.708Z
File: @ts-expect-error - Argument of type 'Buffer<ArrayBufferLike>' is not assignable to parameter of type 'BufferSource'.
Functions Extracted: 4


Function 1: buildEnvironmentVariablesFrom
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function buildEnvironmentVariablesFrom(
  injectedEnvironments: Record<string, string>
): Record<string, string | undefined> {
  const pairs = Object.keys(process.env).map((key) => [key, process.env[key]])
  const env = Object.fromEntries(pairs)
  for (const key of Object.keys(injectedEnvironments)) {
    env[key] = injectedEnvironments[key]
  }
  env.NEXT_RUNTIME = 'edge'
  return env
}
--------------------------------------------------------------------------------


Function 2: throwUnsupportedAPIError
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function throwUnsupportedAPIError(name: string) {
  const error =
    new Error(`A Node.js API is used (${name}) which is not supported in the Edge Runtime.
Learn more: https://nextjs.org/docs/api-reference/edge-runtime`)
  decorateServerError(error, COMPILER_NAMES.edgeServer)
  throw error
}
--------------------------------------------------------------------------------


Function 3: createProcessPolyfill
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function createProcessPolyfill(env: Record<string, string>) {
  const processPolyfill = { env: buildEnvironmentVariablesFrom(env) }
  const overriddenValue: Record<string, any> = {}

  for (const key of Object.keys(process)) {
    if (key === 'env') continue
    Object.defineProperty(processPolyfill, key, {
      get() {
        if (overriddenValue[key] !== undefined) {
          return overriddenValue[key]
        }
        if (typeof (process as any)[key] === 'function') {
          return () => throwUnsupportedAPIError(`process.${key}`)
        }
        return undefined
      },
      set(value) {
        overriddenValue[key] = value
      },
      enumerable: false,
    })
  }
  return processPolyfill
}
--------------------------------------------------------------------------------


Function 4: createModuleContext
Language: TypeScript
Lines: 41
Full Code:
--------------------------------------------------------------------------------
async function createModuleContext(options: ModuleContextOptions) {
  const warnedEvals = new Set<string>()
  const warnedWasmCodegens = new Set<string>()
  const { edgeFunctionEntry } = options
  const wasm = await loadWasm(edgeFunctionEntry.wasm ?? [])
  const runtime = new EdgeRuntime({
    codeGeneration:
      process.env.NODE_ENV !== 'production'
        ? { strings: true, wasm: true }
        : undefined,
    extend: (context) => {
      context.process = createProcessPolyfill(edgeFunctionEntry.env)

      Object.defineProperty(context, 'require', {
        enumerable: false,
        value: (id: string) => {
          const value = NativeModuleMap.get(id)
          if (!value) {
            throw TypeError('Native module not found: ' + id)
          }
          return value
        },
      })

      if (process.env.NODE_ENV !== 'production') {
        context.__next_log_error__ = function (err: unknown) {
          options.onError(err)
        }
      }

      context.__next_eval__ = function __next_eval__(fn: Function) {
        const key = fn.toString()
        if (!warnedEvals.has(key)) {
          const warning = getServerError(
            new Error(
              `Dynamic Code Evaluation (e. g. 'eval', 'new Function') not allowed in Edge Runtime
Learn More: https://nextjs.org/docs/messages/edge-dynamic-code-evaluation`
            ),
            COMPILER_NAMES.edgeServer
          )
          warning.name = 'DynamicCodeEvaluationWarning'
          Error.captureStackTrace(warning, __next_eval__)
          warnedEvals.add(key)
          options.onWarning(warning)
        }
        return fn()
      }

      context.__next_webassembly_compile__ =
        function __next_webassembly_compile__(fn: Function) {
          const key = fn.toString()
          if (!warnedWasmCodegens.has(key)) {
            const warning = getServerError(
              new Error(`Dynamic WASM code generation (e. g. 'WebAssembly.compile') not allowed in Edge Runtime.
Learn More: https://nextjs.org/docs/messages/edge-dynamic-code-evaluation`),
              COMPILER_NAMES.edgeServer
            )
            warning.name = 'DynamicWasmCodeGenerationWarning'
            Error.captureStackTrace(warning, __next_webassembly_compile__)
            warnedWasmCodegens.add(key)
            options.onWarning(warning)
          }
          return fn()
        }

      context.__next_webassembly_instantiate__ =
        async function __next_webassembly_instantiate__(fn: Function) {
          const result = await fn()
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T03:15:27.389Z
File: This keeps autocompletion working for static routes.
Functions Extracted: 1


Function 1: generateValidatorFile
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export function generateValidatorFile(
  routesManifest: RouteTypesManifest
): string {
  const generateValidations = (
    paths: string[],
    type:
      | 'AppPageConfig'
      | 'PagesPageConfig'
      | 'LayoutConfig'
      | 'RouteHandlerConfig'
      | 'ApiRouteConfig',
    pathToRouteMap?: Map<string, string>
  ) =>
    paths
      .sort()
      .map(path => {
        const route = pathToRouteMap ? pathToRouteMap.get(path) : undefined;
        return {
          path,
          type,
          route
        };
      });

  // Logic to generate the validator file content
  const validations = generateValidations(routesManifest.paths, 'AppPageConfig');
  return JSON.stringify(validations);
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T03:16:27.931Z
File: vercel-next.js-02172b3/packages/next/src/server/route-modules/route-module.ts
Functions Extracted: 2


Function 1: instrumentationOnRequestError
Language: TypeScript
Lines: 20
Full Code:
--------------------------------------------------------------------------------
public async instrumentationOnRequestError(
    req: IncomingMessage | BaseNextRequest,
    ...args: Parameters<InstrumentationOnRequestError>
) {
    if (process.env.NEXT_RUNTIME === 'edge') {
        const { getEdgeInstrumentationModule } = await import('../web/globals')
        const instrumentation = await getEdgeInstrumentationModule()

        if (instrumentation) {
            await instrumentation.onRequestError?.(...args)
        }
    } else {
        const { join } = require('node:path') as typeof import('node:path')
        const absoluteProjectDir = join(
            /* turbopackIgnore: true */
            process.cwd(),
            getRequestMeta(req, 'relativeProjectDir') || this.relativeProjectDir
        )

        const { instrumentationOnRequestError } = await import(
            '../lib/router-utils/instrumentation-globals.external.js'
        )

        return instrumentationOnRequestError(
            absoluteProjectDir,
            this.distDir,
            ...args
        )
    }
}
--------------------------------------------------------------------------------


Function 2: loadManifests
Language: TypeScript
Lines: 70
Full Code:
--------------------------------------------------------------------------------
private loadManifests(
    srcPage: string,
    projectDir?: string
): {
    buildId: string
    buildManifest: BuildManifest
    fallbackBuildManifest: BuildManifest
    routesManifest: DeepReadonly<DevRoutesManifest>
    nextFontManifest: DeepReadonly<NextFontManifest>
    prerenderManifest: DeepReadonly<PrerenderManifest>
    serverFilesManifest: RequiredServerFilesManifest
    reactLoadableManifest: DeepReadonly<ReactLoadableManifest>
    subresourceIntegrityManifest: any
    clientReferenceManifest: any
    serverActionsManifest: any
    dynamicCssManifest: any
    interceptionRoutePatterns: RegExp[]
} {
    if (process.env.NEXT_RUNTIME === 'edge') {
        const { getEdgePreviewProps } =
            require('../web/get-edge-preview-props') as typeof import('../web/get-edge-preview-props')

        const maybeJSONParse = (str?: string) =>
            str ? JSON.parse(str) : undefined

        return {
            buildId: process.env.__NEXT_BUILD_ID || '',
            buildManifest: self.__BUILD_MANIFEST as any,
            fallbackBuildManifest: {} as any,
            reactLoadableManifest: maybeJSONParse(self.__REACT_LOADABLE_MANIFEST),
            nextFontManifest: maybeJSONParse(self.__NEXT_FONT_MANIFEST),
            prerenderManifest: {
                routes: {},
                dynamicRoutes: {},
                notFoundRoutes: [],
                version: 4,
                preview: getEdgePreviewProps(),
            },
            routesManifest: {
                version: 4,
                caseSensitive: Boolean(process.env.__NEXT_CASE_SENSITIVE_ROUTES),
                basePath: process.env.__NEXT_BASE_PATH || '',
                rewrites: (process.env.__NEXT_REWRITES as any) || {
                    beforeFiles: [],
                    afterFiles: [],
                    fallback: [],
                },
                redirects: [],
                headers: [],
                i18n:
                    (process.env.__NEXT_I18N_CONFIG as any as I18NConfig) || undefined,
                skipMiddlewareUrlNormalize: Boolean(
                    process.env.__NEXT_NO_MIDDLEWARE_URL_NORMALIZE
                ),
            },
            serverFilesManifest: {
                config: (globalThis as any).nextConfig || {},
            } as any,
            clientReferenceManifest: self.__RSC_MANIFEST?.[srcPage],
            serverActionsManifest: maybeJSONParse(self.__RSC_SERVER_MANIFEST),
            subresourceIntegrityManifest: maybeJSONParse(
                self.__SUBRESOURCE_INTEGRITY_MANIFEST
            ),
            dynamicCssManifest: maybeJSONParse(self.__DYNAMIC_CSS_MANIFEST),
            interceptionRoutePatterns: (
                maybeJSONParse(self.__INTERCEPTION_ROUTE_REWRITE_MANIFEST) ?? []
            ).map((rewrite: any) => new RegExp(rewrite.regex)),
        }
    } else {
        if (!projectDir) {
            throw new Error('Invariant: projectDir is required for node runtime')
        }
        const { loadManifestFromRelativePath } =
            require('../load-manifest.external') as typeof import('../load-manifest.external')
        const normalizedPagePath = normalizePagePath(srcPage)

        const router =
            this.definition.kind === RouteKind.PAGES ||
            this.definition.kind === RouteKind.PAGES_API
                ? 'pages'
                : 'app'

        const [
            routesManifest,
            prerenderManifest,
            buildManifest,
            fallbackBuildManifest,
            reactLoadableManifest,
            nextFontManifest,
            clientReferenceManifest,
            serverActionsManifest,
            subresourceIntegrityManifest,
            serverFilesManifest,
            buildId,
            dynamicCssManifest,
        ] = [
            loadManifestFromRelativePath<DevRoutesManifest>({
                projectDir,
                distDir: this.distDir,
                manifest: ROUTES_MANIFEST,
                shouldCache: !this.isDev,
            }),
            loadManifestFromRelativePath<PrerenderManifest>({
                projectDir,
                distDir: this.distDir,
                manifest: PRERENDER_MANIFEST,
                shouldCache: !this.isDev,
            }),
            loadManifestFromRelativePath<BuildManifest>({
                projectDir,
                distDir: this.distDir,
                manifest: BUILD_MANIFEST,
                shouldCache: !this.isDev,
            }),
            srcPage === '/_error'
                ? loadManifestFromRelativePath<BuildManifest>({
                      projectDir,
                      distDir: this.distDir,
                      manifest: `fallback-${BUILD_MANIFEST}`,
                      shouldCache: !this.isDev,
                      handleMissing: true,
                  })
                : ({} as BuildManifest),
            loadManifestFromRelativePath<ReactLoadableManifest>({
                projectDir,
                distDir: this.distDir,
                manifest: process.env.TURBOPACK
                    ? `server/${router === 'app' ? 'app' : 'pages'}${normalizedPagePath}/${REACT_LOADABLE_MANIFEST}`
                    : REACT_LOADABLE_MANIFEST,
                handleMissing: true,
                shouldCache: !this.isDev,
            }),
            loadManifestFromRelativePath<NextFontManifest>({
                projectDir,
                distDir: this.distDir,
                manifest: `server/${NEXT_FONT_MANIFEST}.json`,
                shouldCache: !this.isDev,
            }),
            router === 'app' && !isStaticMetadataRoute(srcPage)
                ? loadManifestFromRelativePath({
                      distDir: this.distDir,
                      projectDir,
                      useEval: true,
                      handleMissing: true,
                      manifest: `server/app${srcPage.replace(/%5F/g, '_') + '_' + CLIENT_REFERENCE_MANIFEST}.js`,
                      shouldCache: !this.isDev,
                  })
                : undefined,
            router === 'app'
                ? loadManifestFromRelativePath<any>({
                      distDir: this.distDir,
                      projectDir,
                      manifest: `server/${SERVER_REFERENCE_MANIFEST}.json`,
                      handleMissing: true,
                      shouldCache: !this.isDev,
                  })
                : {},
            loadManifestFromRelativePath<Record<string, string>>({
                projectDir,
                distDir: this.distDir,
                manifest: `server/${SUBRESOURCE_INTEGRITY_MANIFEST}.json`,
                handleMissing: true,
                shouldCache: !this.isDev,
            }),
            this.isDev
                ? ({} as any)
                : loadManifestFromRelativePath<RequiredServerFilesManifest>({
                      projectDir,
                      distDir: this.distDir,
                      manifest: SERVER_FILES_MANIFEST,
                  }),
            this.isDev
                ? 'development'
                : loadManifestFromRelativePath<any>({
                      projectDir,
                      distDir: this.distDir,
                      manifest: BUILD_ID_FILE,
                      skipParse: true,
                  }),
            loadManifestFromRelativePath<any>({
                projectDir,
                distDir: this.distDir,
                manifest: DYNAMIC_CSS_MANIFEST,
                handleMissing: true,
            }),
        ]

        return {
            buildId,
            buildManifest,
            fallbackBuildManifest,
            routesManifest,
            nextFontManifest,
            prerenderManifest,
            serverFilesManifest,
            reactLoadableManifest,
            clientReferenceManifest: (clientReferenceManifest as any)
                ?.__RSC_MANIFEST?.[srcPage.replace(/%5F/g, '_')],
            serverActionsManifest,
            subresourceIntegrityManifest,
            dynamicCssManifest,
            interceptionRoutePatterns: routesManifest.rewrites.beforeFiles
                .filter(isInterceptionRouteRewrite)
                .map((rewrite) => new RegExp(rewrite.regex)),
        }
    }
}
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:16:33.490Z
Question Type: multiple-choice
Function: parseCookie
Function Size: 459 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: parseCookie (TypeScript)\n// Parses a Cookie header value into a Map of cookie name-value pairs.\n\ndeclare function parseCookie(cookie: string): Map<string, string> {\n    const cookieMap = new Map<string, string>();\n    const cookiePairs = cookie.split('; ');\n    for (const pair of cookie
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:16:34.301Z
Question Type: true-false
Function: throwUnsupportedAPIError
Function Size: 432 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: throwUnsupportedAPIError (TypeScript)\n// Throws an error indicating that a Node.js API is not supported in the Edge Runtime.\n\nfunction throwUnsupportedAPIError(name: string) {\n  const error =\n    new Error(`A Node.js API is used (${name}) which is not supported in the Edge Runtime.\nLear
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:16:37.661Z
Question Type: multiple-choice
Function: instrumentationOnRequestError
Function Size: 1156 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: instrumentationOnRequestError (TypeScript)\n// Handles instrumentation errors for requests in both edge and node runtimes.\n\npublic async instrumentationOnRequestError(\n    req: IncomingMessage | BaseNextRequest,\n    ...args: Parameters<InstrumentationOnRequestError>\n) {\n    if (process.e
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:16:49.650Z
Question Type: multiple-choice
Function: createModuleContext
Function Size: 2677 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: createModuleContext (TypeScript)\n// Creates a module context with a runtime, require cache, and paths cache for edge functions.\n\nasync function createModuleContext(options: ModuleContextOptions) {\n  const warnedEvals = new Set<string>()\n  const warnedWasmCodegens = new Set<string>()\n  c
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:16:51.486Z
Question Type: multiple-choice
Function: getTracePropagationData
Function Size: 360 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: getTracePropagationData (TypeScript)\n// Retrieves trace propagation data for the currently active context.\n\npublic getTracePropagationData(): ClientTraceDataEntry[] {\n    const activeContext = context.active()\n    const entries: ClientTraceDataEntry[] = []\n    propagation.inject(activeC
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:16:54.023Z
Question Type: function-variant
Function: stringifyCookie
Function Size: 676 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: stringifyCookie (TypeScript)\n// Serializes a cookie object into a string suitable for the Set-Cookie header.\n\ndeclare function stringifyCookie(c: ResponseCookie | RequestCookie): string {\n    const cookieParts: string[] = [];\n    cookieParts.push(`${c.name}=${c.value}`);\n    if (c.domai
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:16:55.508Z
Question Type: select-all
Function: createModuleContext
Function Size: 2677 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: createModuleContext (TypeScript)\n// Creates a module context with a runtime, require cache, and paths cache for edge functions.\n\nasync function createModuleContext(options: ModuleContextOptions) {\n  const warnedEvals = new Set<string>()\n  const warnedWasmCodegens = new Set<string>()\n  c
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:17:00.423Z
Question Type: multiple-choice
Function: createProcessPolyfill
Function Size: 851 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: createProcessPolyfill (TypeScript)\n// Creates a polyfill for the process object, overriding its properties and methods.\n\nfunction createProcessPolyfill(env: Record<string, string>) {\n  const processPolyfill = { env: buildEnvironmentVariablesFrom(env) }\n  const overriddenValue: Record<st
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:17:06.148Z
Question Type: select-all
Function: instrumentationOnRequestError
Function Size: 1156 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: instrumentationOnRequestError (TypeScript)\n// Handles instrumentation errors for requests in both edge and node runtimes.\n\npublic async instrumentationOnRequestError(\n    req: IncomingMessage | BaseNextRequest,\n    ...args: Parameters<InstrumentationOnRequestError>\n) {\n    if (process.e
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760138125780
Repository: Unknown
Total Questions Generated: 16
Total Chunks Processed: 12
Ended: 2025-10-11T03:17:10.149Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T03:19:27.552Z
File: the API is ~stable, so this should be fine
Functions Extracted: 2


Function 1: closeSpanWithError
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
const closeSpanWithError = (span: Span, error?: Error) => {
  if (isBubbledError(error) && error.bubble) {
    span.setAttribute('next.bubble', true)
  } else {
    if (error) {
      span.recordException(error)
      span.setAttribute('error.type', error.name)
    }
    span.setStatus({ code: SpanStatusCode.ERROR, message: error?.message })
  }
  span.end()
}
--------------------------------------------------------------------------------


Function 2: getTracePropagationData
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
public getTracePropagationData(): ClientTraceDataEntry[] {
    const activeContext = context.active()
    const entries: ClientTraceDataEntry[] = []
    propagation.inject(activeContext, entries, clientTraceDataSetter)
    return entries
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T03:19:47.811Z
File: vercel-next.js-02172b3/packages/next/src/compiled/@edge-runtime/cookies/index.d.ts
Functions Extracted: 3


Function 1: stringifyCookie
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
declare function stringifyCookie(c: ResponseCookie | RequestCookie): string {
    const cookieParts: string[] = [];
    cookieParts.push(`${c.name}=${c.value}`);
    if (c.domain) cookieParts.push(`Domain=${c.domain}`);
    if (c.path) cookieParts.push(`Path=${c.path}`);
    if (c.expires) cookieParts.push(`Expires=${new Date(c.expires).toUTCString()}`);
    if (c.httpOnly) cookieParts.push(`HttpOnly`);
    if (c.secure) cookieParts.push(`Secure`);
    if (c.sameSite) cookieParts.push(`SameSite=${c.sameSite}`);
    if (c.maxAge) cookieParts.push(`Max-Age=${c.maxAge}`);
    if (c.priority) cookieParts.push(`Priority=${c.priority}`);
    return cookieParts.join('; ');
}
--------------------------------------------------------------------------------


Function 2: parseCookie
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
declare function parseCookie(cookie: string): Map<string, string> {
    const result = new Map<string, string>();
    const cookies = cookie.split('; ');
    for (const cookie of cookies) {
        const [name, value] = cookie.split('=');
        result.set(decodeURIComponent(name), decodeURIComponent(value));
    }
    return result;
}
--------------------------------------------------------------------------------


Function 3: parseSetCookie
Language: TypeScript
Lines: 20
Full Code:
--------------------------------------------------------------------------------
declare function parseSetCookie(setCookie: string): undefined | ResponseCookie {
    const cookieParts = setCookie.split('; ');
    const [nameValue, ...attributes] = cookieParts;
    const [name, value] = nameValue.split('=');
    const cookie: ResponseCookie = { name: decodeURIComponent(name), value: decodeURIComponent(value) };
    for (const attribute of attributes) {
        const [key, val] = attribute.split('=');
        switch (key.toLowerCase()) {
            case 'expires':
                cookie.expires = new Date(val);
                break;
            case 'max-age':
                cookie.maxAge = parseInt(val, 10);
                break;
            case 'httponly':
                cookie.httpOnly = true;
                break;
            case 'secure':
                cookie.secure = true;
                break;
            case 'samesite':
                cookie.sameSite = val;
                break;
            case 'domain':
                cookie.domain = val;
                break;
            case 'path':
                cookie.path = val;
                break;
            case 'partitioned':
                cookie.partitioned = true;
                break;
            case 'priority':
                cookie.priority = val;
                break;
        }
    }
    return cookie;
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T03:20:12.807Z
File: @ts-expect-error - Argument of type 'Buffer<ArrayBufferLike>' is not assignable to parameter of type 'BufferSource'.
Functions Extracted: 4


Function 1: buildEnvironmentVariablesFrom
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function buildEnvironmentVariablesFrom(
  injectedEnvironments: Record<string, string>
): Record<string, string | undefined> {
  const pairs = Object.keys(process.env).map((key) => [key, process.env[key]])
  const env = Object.fromEntries(pairs)
  for (const key of Object.keys(injectedEnvironments)) {
    env[key] = injectedEnvironments[key]
  }
  env.NEXT_RUNTIME = 'edge'
  return env
}
--------------------------------------------------------------------------------


Function 2: throwUnsupportedAPIError
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function throwUnsupportedAPIError(name: string) {
  const error =
    new Error(`A Node.js API is used (${name}) which is not supported in the Edge Runtime.
Learn more: https://nextjs.org/docs/api-reference/edge-runtime`)
  decorateServerError(error, COMPILER_NAMES.edgeServer)
  throw error
}
--------------------------------------------------------------------------------


Function 3: createProcessPolyfill
Language: TypeScript
Lines: 20
Full Code:
--------------------------------------------------------------------------------
function createProcessPolyfill(env: Record<string, string>) {
  const processPolyfill = { env: buildEnvironmentVariablesFrom(env) }
  const overriddenValue: Record<string, any> = {}

  for (const key of Object.keys(process)) {
    if (key === 'env') continue
    Object.defineProperty(processPolyfill, key, {
      get() {
        if (overriddenValue[key] !== undefined) {
          return overriddenValue[key]
        }
        if (typeof (process as any)[key] === 'function') {
          return () => throwUnsupportedAPIError(`process.${key}`)
        }
        return undefined
      },
      set(value) {
        overriddenValue[key] = value
      },
      enumerable: false,
    })
  }
  return processPolyfill
}
--------------------------------------------------------------------------------


Function 4: createModuleContext
Language: TypeScript
Lines: 41
Full Code:
--------------------------------------------------------------------------------
async function createModuleContext(options: ModuleContextOptions) {
  const warnedEvals = new Set<string>()
  const warnedWasmCodegens = new Set<string>()
  const { edgeFunctionEntry } = options
  const wasm = await loadWasm(edgeFunctionEntry.wasm ?? [])
  const runtime = new EdgeRuntime({
    codeGeneration:
      process.env.NODE_ENV !== 'production'
        ? { strings: true, wasm: true }
        : undefined,
    extend: (context) => {
      context.process = createProcessPolyfill(edgeFunctionEntry.env)

      Object.defineProperty(context, 'require', {
        enumerable: false,
        value: (id: string) => {
          const value = NativeModuleMap.get(id)
          if (!value) {
            throw TypeError('Native module not found: ' + id)
          }
          return value
        },
      })

      if (process.env.NODE_ENV !== 'production') {
        context.__next_log_error__ = function (err: unknown) {
          options.onError(err)
        }
      }

      context.__next_eval__ = function __next_eval__(fn: Function) {
        const key = fn.toString()
        if (!warnedEvals.has(key)) {
          const warning = getServerError(
            new Error(
              `Dynamic Code Evaluation (e. g. 'eval', 'new Function') not allowed in Edge Runtime
Learn More: https://nextjs.org/docs/messages/edge-dynamic-code-evaluation`
            ),
            COMPILER_NAMES.edgeServer
          )
          warning.name = 'DynamicCodeEvaluationWarning'
          Error.captureStackTrace(warning, __next_eval__)
          warnedEvals.add(key)
          options.onWarning(warning)
        }
        return fn()
      }

      context.__next_webassembly_compile__ =
        function __next_webassembly_compile__(fn: Function) {
          const key = fn.toString()
          if (!warnedWasmCodegens.has(key)) {
            const warning = getServerError(
              new Error(`Dynamic WASM code generation (e. g. 'WebAssembly.compile') not allowed in Edge Runtime.
Learn More: https://nextjs.org/docs/messages/edge-dynamic-code-evaluation`),
              COMPILER_NAMES.edgeServer
            )
            warning.name = 'DynamicWasmCodeGenerationWarning'
            Error.captureStackTrace(warning, __next_webassembly_compile__)
            warnedWasmCodegens.add(key)
            options.onWarning(warning)
          }
          return fn()
        }

      context.__next_webassembly_instantiate__ =
        async function __next_webassembly_instantiate__(fn: Function) {
          const result = await fn()
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T03:20:18.791Z
File: This keeps autocompletion working for static routes.
Functions Extracted: 1


Function 1: generateValidatorFile
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export function generateValidatorFile(
  routesManifest: RouteTypesManifest
): string {
  const generateValidations = (
    paths: string[],
    type:
      | 'AppPageConfig'
      | 'PagesPageConfig'
      | 'LayoutConfig'
      | 'RouteHandlerConfig'
      | 'ApiRouteConfig',
    pathToRouteMap?: Map<string, string>
  ) =>
    paths
      .sort()
      .map((path) => {
        const route = pathToRouteMap ? pathToRouteMap.get(path) : undefined;
        return `Validation for ${path} of type ${type} with route ${route}`;
      });

  return 'Validator file generated';
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T03:20:51.634Z
File: vercel-next.js-02172b3/packages/next/src/server/route-modules/route-module.ts
Functions Extracted: 1


Function 1: loadManifests
Language: TypeScript
Lines: 61
Full Code:
--------------------------------------------------------------------------------
private loadManifests(
    srcPage: string,
    projectDir?: string
  ): {
    buildId: string
    buildManifest: BuildManifest
    fallbackBuildManifest: BuildManifest
    routesManifest: DeepReadonly<DevRoutesManifest>
    nextFontManifest: DeepReadonly<NextFontManifest>
    prerenderManifest: DeepReadonly<PrerenderManifest>
    serverFilesManifest: RequiredServerFilesManifest
    reactLoadableManifest: DeepReadonly<ReactLoadableManifest>
    subresourceIntegrityManifest: any
    clientReferenceManifest: any
    serverActionsManifest: any
    dynamicCssManifest: any
    interceptionRoutePatterns: RegExp[]
  } {
    if (process.env.NEXT_RUNTIME === 'edge') {
      const { getEdgePreviewProps } =
        require('../web/get-edge-preview-props') as typeof import('../web/get-edge-preview-props')

      const maybeJSONParse = (str?: string) =>
        str ? JSON.parse(str) : undefined

      return {
        buildId: process.env.__NEXT_BUILD_ID || '',
        buildManifest: self.__BUILD_MANIFEST as any,
        fallbackBuildManifest: {} as any,
        reactLoadableManifest: maybeJSONParse(self.__REACT_LOADABLE_MANIFEST),
        nextFontManifest: maybeJSONParse(self.__NEXT_FONT_MANIFEST),
        prerenderManifest: {
          routes: {},
          dynamicRoutes: {},
          notFoundRoutes: [],
          version: 4,
          preview: getEdgePreviewProps(),
        },
        routesManifest: {
          version: 4,
          caseSensitive: Boolean(process.env.__NEXT_CASE_SENSITIVE_ROUTES),
          basePath: process.env.__NEXT_BASE_PATH || '',
          rewrites: (process.env.__NEXT_REWRITES as any) || {
            beforeFiles: [],
            afterFiles: [],
            fallback: [],
          },
          redirects: [],
          headers: [],
          i18n:
            (process.env.__NEXT_I18N_CONFIG as any as I18NConfig) || undefined,
          skipMiddlewareUrlNormalize: Boolean(
            process.env.__NEXT_NO_MIDDLEWARE_URL_NORMALIZE
          ),
        },
        serverFilesManifest: {
          config: (globalThis as any).nextConfig || {},
        } as any,
        clientReferenceManifest: self.__RSC_MANIFEST?.[srcPage],
        serverActionsManifest: maybeJSONParse(self.__RSC_SERVER_MANIFEST),
        subresourceIntegrityManifest: maybeJSONParse(
          self.__SUBRESOURCE_INTEGRITY_MANIFEST
        ),
        dynamicCssManifest: maybeJSONParse(self.__DYNAMIC_CSS_MANIFEST),
        interceptionRoutePatterns: (
          maybeJSONParse(self.__INTERCEPTION_ROUTE_REWRITE_MANIFEST) ?? []
        ).map((rewrite: any) => new RegExp(rewrite.regex)),
      }
    } else {
      if (!projectDir) {
        throw new Error('Invariant: projectDir is required for node runtime')
      }
      const { loadManifestFromRelativePath } =
        require('../load-manifest.external') as typeof import('../load-manifest.external')
      const normalizedPagePath = normalizePagePath(srcPage)

      const router =
        this.definition.kind === RouteKind.PAGES ||
        this.definition.kind === RouteKind.PAGES_API
          ? 'pages'
          : 'app'

      const [
        routesManifest,
        prerenderManifest,
        buildManifest,
        fallbackBuildManifest,
        reactLoadableManifest,
        nextFontManifest,
        clientReferenceManifest,
        serverActionsManifest,
        subresourceIntegrityManifest,
        serverFilesManifest,
        buildId,
        dynamicCssManifest,
      ] = [
        loadManifestFromRelativePath<DevRoutesManifest>({
          projectDir,
          distDir: this.distDir,
          manifest: ROUTES_MANIFEST,
          shouldCache: !this.isDev,
        }),
        loadManifestFromRelativePath<PrerenderManifest>({
          projectDir,
          distDir: this.distDir,
          manifest: PRERENDER_MANIFEST,
          shouldCache: !this.isDev,
        }),
        loadManifestFromRelativePath<BuildManifest>({
          projectDir,
          distDir: this.distDir,
          manifest: BUILD_MANIFEST,
          shouldCache: !this.isDev,
        }),
        srcPage === '/_error'
          ? loadManifestFromRelativePath<BuildManifest>({
              projectDir,
              distDir: this.distDir,
              manifest: `fallback-${BUILD_MANIFEST}`,
              shouldCache: !this.isDev,
              handleMissing: true,
            })
          : ({} as BuildManifest),
        loadManifestFromRelativePath<ReactLoadableManifest>({
          projectDir,
          distDir: this.distDir,
          manifest: process.env.TURBOPACK
            ? `server/${router === 'app' ? 'app' : 'pages'}${normalizedPagePath}/${REACT_LOADABLE_MANIFEST}`
            : REACT_LOADABLE_MANIFEST,
          handleMissing: true,
          shouldCache: !this.isDev,
        }),
        loadManifestFromRelativePath<NextFontManifest>({
          projectDir,
          distDir: this.distDir,
          manifest: `server/${NEXT_FONT_MANIFEST}.json`,
          shouldCache: !this.isDev,
        }),
        router === 'app' && !isStaticMetadataRoute(srcPage)
          ? loadManifestFromRelativePath({
              distDir: this.distDir,
              projectDir,
              useEval: true,
              handleMissing: true,
              manifest: `server/app${srcPage.replace(/%5F/g, '_') + '_' + CLIENT_REFERENCE_MANIFEST}.js`,
              shouldCache: !this.isDev,
            })
          : undefined,
        router === 'app'
          ? loadManifestFromRelativePath<any>({
              distDir: this.distDir,
              projectDir,
              manifest: `server/${SERVER_REFERENCE_MANIFEST}.json`,
              handleMissing: true,
              shouldCache: !this.isDev,
            })
          : {},
        loadManifestFromRelativePath<Record<string, string>>({
          projectDir,
          distDir: this.distDir,
          manifest: `server/${SUBRESOURCE_INTEGRITY_MANIFEST}.json`,
          handleMissing: true,
          shouldCache: !this.isDev,
        }),
        this.isDev
          ? ({} as any)
          : loadManifestFromRelativePath<RequiredServerFilesManifest>({
              projectDir,
              distDir: this.distDir,
              manifest: SERVER_FILES_MANIFEST,
            }),
        this.isDev
          ? 'development'
          : loadManifestFromRelativePath<any>({
              projectDir,
              distDir: this.distDir,
              manifest: BUILD_ID_FILE,
              skipParse: true,
            }),
        loadManifestFromRelativePath<any>({
          projectDir,
          distDir: this.distDir,
          manifest: DYNAMIC_CSS_MANIFEST,
          handleMissing: true,
        }),
      ]

      return {
        buildId,
        buildManifest,
        fallbackBuildManifest,
        routesManifest,
        nextFontManifest,
        prerenderManifest,
        serverFilesManifest,
        reactLoadableManifest,
        clientReferenceManifest: (clientReferenceManifest as any)
          ?.__RSC_MANIFEST?.[srcPage.replace(/%5F/g, '_')],
        serverActionsManifest,
        subresourceIntegrityManifest,
        dynamicCssManifest,
        interceptionRoutePatterns: routesManifest.rewrites.beforeFiles
          .filter(isInterceptionRouteRewrite)
          .map((rewrite) => new RegExp(rewrite.regex)),
      }
    }
  }
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:20:59.926Z
Question Type: multiple-choice
Function: getTracePropagationData
Function Size: 371 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: getTracePropagationData (TypeScript)\n// Injects the active context into a carrier and returns trace propagation data.\n\npublic getTracePropagationData(): ClientTraceDataEntry[] {\n    const activeContext = context.active()\n    const entries: ClientTraceDataEntry[] = []\n    propagation.inj
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:21:00.780Z
Question Type: select-all
Function: throwUnsupportedAPIError
Function Size: 409 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: throwUnsupportedAPIError (TypeScript)\n// Throws an error for unsupported Node.js APIs in Edge Runtime\n\nfunction throwUnsupportedAPIError(name: string) {\n  const error =\n    new Error(`A Node.js API is used (${name}) which is not supported in the Edge Runtime.\nLearn more: https://nextjs.
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:21:02.724Z
Question Type: true-false
Function: stringifyCookie
Function Size: 797 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: stringifyCookie (TypeScript)\n// Converts a cookie object into a string suitable for the Set-Cookie header.\n\ndeclare function stringifyCookie(c: ResponseCookie | RequestCookie): string {\n    const cookieParts: string[] = [];\n    cookieParts.push(`${c.name}=${c.value}`);\n    if (c.domain)
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:21:04.328Z
Question Type: select-all
Function: createProcessPolyfill
Function Size: 827 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: createProcessPolyfill (TypeScript)\n// Creates a polyfill for the process object in Edge Runtime\n\nfunction createProcessPolyfill(env: Record<string, string>) {\n  const processPolyfill = { env: buildEnvironmentVariablesFrom(env) }\n  const overriddenValue: Record<string, any> = {}\n\n  for (
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:21:11.355Z
Question Type: multiple-choice
Function: loadManifests
Function Size: 7421 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: loadManifests (TypeScript)\n// Loads various manifests needed for route handling based on the runtime environment.\n\nprivate loadManifests(\n    srcPage: string,\n    projectDir?: string\n  ): {\n    buildId: string\n    buildManifest: BuildManifest\n    fallbackBuildManifest: BuildManifest\n   
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:21:18.302Z
Question Type: function-variant
Function: getTracePropagationData
Function Size: 371 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getTracePropagationData (TypeScript)\n// Injects the active context into a carrier and returns trace propagation data.\n\npublic getTracePropagationData(): ClientTraceDataEntry[] {\n    const activeContext = context.active()\n    const entries: ClientTraceDataEntry[] = []\n    propagation.inj
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:21:18.409Z
Question Type: multiple-choice
Function: parseCookie
Function Size: 456 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: parseCookie (TypeScript)\n// Parses a Cookie header string and returns a map of cookie names and values.\n\ndeclare function parseCookie(cookie: string): Map<string, string> {\n    const result = new Map<string, string>();\n    const cookies = cookie.split('; ');\n    for (const cookie of coo
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:21:20.770Z
Question Type: true-false
Function: parseSetCookie
Function Size: 1444 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: parseSetCookie (TypeScript)\n// Parses a Set-Cookie header string and returns a ResponseCookie object.\n\ndeclare function parseSetCookie(setCookie: string): undefined | ResponseCookie {\n    const cookieParts = setCookie.split('; ');\n    const [nameValue, ...attributes] = cookieParts;\n    
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:21:22.019Z
Question Type: order-sequence
Function: buildEnvironmentVariablesFrom
Function Size: 522 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: buildEnvironmentVariablesFrom (TypeScript)\n// Builds environment variables from injected environments and process.env\n\nfunction buildEnvironmentVariablesFrom(\n  injectedEnvironments: Record<string, string>\n): Record<string, string | undefined> {\n  const pairs = Object.keys(process.env).
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:21:29.647Z
Question Type: multiple-choice
Function: createProcessPolyfill
Function Size: 827 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: createProcessPolyfill (TypeScript)\n// Creates a polyfill for the process object in Edge Runtime\n\nfunction createProcessPolyfill(env: Record<string, string>) {\n  const processPolyfill = { env: buildEnvironmentVariablesFrom(env) }\n  const overriddenValue: Record<string, any> = {}\n\n  for (
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:21:33.602Z
Question Type: multiple-choice
Function: parseSetCookie
Function Size: 1444 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: parseSetCookie (TypeScript)\n// Parses a Set-Cookie header string and returns a ResponseCookie object.\n\ndeclare function parseSetCookie(setCookie: string): undefined | ResponseCookie {\n    const cookieParts = setCookie.split('; ');\n    const [nameValue, ...attributes] = cookieParts;\n    
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760138125780
Repository: Unknown
Total Questions Generated: 15
Total Chunks Processed: 11
Ended: 2025-10-11T03:21:41.337Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T03:28:17.454Z
File: the API is ~stable, so this should be fine
Functions Extracted: 2


Function 1: closeSpanWithError
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
const closeSpanWithError = (span: Span, error?: Error) => {
  if (isBubbledError(error) && error.bubble) {
    span.setAttribute('next.bubble', true)
  } else {
    if (error) {
      span.recordException(error)
      span.setAttribute('error.type', error.name)
    }
    span.setStatus({ code: SpanStatusCode.ERROR, message: error?.message })
  }
  span.end()
}
--------------------------------------------------------------------------------


Function 2: getTracePropagationData
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
public getTracePropagationData(): ClientTraceDataEntry[] {
    const activeContext = context.active()
    const entries: ClientTraceDataEntry[] = []
    propagation.inject(activeContext, entries, clientTraceDataSetter)
    return entries
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T03:28:34.743Z
File: vercel-next.js-02172b3/packages/next/src/compiled/@edge-runtime/cookies/index.d.ts
Functions Extracted: 3


Function 1: stringifyCookie
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
declare function stringifyCookie(c: ResponseCookie | RequestCookie): string {
    const cookieParts: string[] = [];
    cookieParts.push(`${c.name}=${c.value}`);
    if (c.domain) cookieParts.push(`Domain=${c.domain}`);
    if (c.path) cookieParts.push(`Path=${c.path}`);
    if (c.expires) cookieParts.push(`Expires=${new Date(c.expires).toUTCString()}`);
    if (c.httpOnly) cookieParts.push(`HttpOnly`);
    if (c.secure) cookieParts.push(`Secure`);
    if (c.sameSite) cookieParts.push(`SameSite=${c.sameSite}`);
    return cookieParts.join('; ');
}
--------------------------------------------------------------------------------


Function 2: parseCookie
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
declare function parseCookie(cookie: string): Map<string, string> {
    const cookieMap = new Map<string, string>();
    const cookiePairs = cookie.split('; ');
    for (const pair of cookiePairs) {
        const [name, value] = pair.split('=');
        cookieMap.set(decodeURIComponent(name), decodeURIComponent(value));
    }
    return cookieMap;
}
--------------------------------------------------------------------------------


Function 3: parseSetCookie
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
declare function parseSetCookie(setCookie: string): undefined | ResponseCookie {
    const cookie: ResponseCookie = { name: '', value: '' };
    const parts = setCookie.split('; ');
    const [nameValue, ...attributes] = parts;
    const [name, value] = nameValue.split('=');
    cookie.name = decodeURIComponent(name);
    cookie.value = decodeURIComponent(value);
    for (const attr of attributes) {
        const [key, val] = attr.split('=');
        switch (key.toLowerCase()) {
            case 'expires':
                cookie.expires = new Date(val);
                break;
            case 'max-age':
                cookie.maxAge = parseInt(val, 10);
                break;
            case 'httponly':
                cookie.httpOnly = true;
                break;
            case 'secure':
                cookie.secure = true;
                break;
            case 'samesite':
                cookie.sameSite = val;
                break;
        }
    }
    return cookie;
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T03:29:02.103Z
File: @ts-expect-error - Argument of type 'Buffer<ArrayBufferLike>' is not assignable to parameter of type 'BufferSource'.
Functions Extracted: 4


Function 1: buildEnvironmentVariablesFrom
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function buildEnvironmentVariablesFrom(
  injectedEnvironments: Record<string, string>
): Record<string, string | undefined> {
  const pairs = Object.keys(process.env).map((key) => [key, process.env[key]])
  const env = Object.fromEntries(pairs)
  for (const key of Object.keys(injectedEnvironments)) {
    env[key] = injectedEnvironments[key]
  }
  env.NEXT_RUNTIME = 'edge'
  return env
}
--------------------------------------------------------------------------------


Function 2: throwUnsupportedAPIError
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function throwUnsupportedAPIError(name: string) {
  const error =
    new Error(`A Node.js API is used (${name}) which is not supported in the Edge Runtime.
Learn more: https://nextjs.org/docs/api-reference/edge-runtime`)
  decorateServerError(error, COMPILER_NAMES.edgeServer)
  throw error
}
--------------------------------------------------------------------------------


Function 3: createProcessPolyfill
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function createProcessPolyfill(env: Record<string, string>) {
  const processPolyfill = { env: buildEnvironmentVariablesFrom(env) }
  const overriddenValue: Record<string, any> = {}

  for (const key of Object.keys(process)) {
    if (key === 'env') continue
    Object.defineProperty(processPolyfill, key, {
      get() {
        if (overriddenValue[key] !== undefined) {
          return overriddenValue[key]
        }
        if (typeof (process as any)[key] === 'function') {
          return () => throwUnsupportedAPIError(`process.${key}`)
        }
        return undefined
      },
      set(value) {
        overriddenValue[key] = value
      },
      enumerable: false,
    })
  }
  return processPolyfill
}
--------------------------------------------------------------------------------


Function 4: createModuleContext
Language: TypeScript
Lines: 40
Full Code:
--------------------------------------------------------------------------------
async function createModuleContext(options: ModuleContextOptions) {
  const warnedEvals = new Set<string>()
  const warnedWasmCodegens = new Set<string>()
  const { edgeFunctionEntry } = options
  const wasm = await loadWasm(edgeFunctionEntry.wasm ?? [])
  const runtime = new EdgeRuntime({
    codeGeneration:
      process.env.NODE_ENV !== 'production'
        ? { strings: true, wasm: true }
        : undefined,
    extend: (context) => {
      context.process = createProcessPolyfill(edgeFunctionEntry.env)

      Object.defineProperty(context, 'require', {
        enumerable: false,
        value: (id: string) => {
          const value = NativeModuleMap.get(id)
          if (!value) {
            throw TypeError('Native module not found: ' + id)
          }
          return value
        },
      })

      if (process.env.NODE_ENV !== 'production') {
        context.__next_log_error__ = function (err: unknown) {
          options.onError(err)
        }
      }

      context.__next_eval__ = function __next_eval__(fn: Function) {
        const key = fn.toString()
        if (!warnedEvals.has(key)) {
          const warning = getServerError(
            new Error(
              `Dynamic Code Evaluation (e. g. 'eval', 'new Function') not allowed in Edge Runtime
Learn More: https://nextjs.org/docs/messages/edge-dynamic-code-evaluation`
            ),
            COMPILER_NAMES.edgeServer
          )
          warning.name = 'DynamicCodeEvaluationWarning'
          Error.captureStackTrace(warning, __next_eval__)
          warnedEvals.add(key)
          options.onWarning(warning)
        }
        return fn()
      }

      context.__next_webassembly_compile__ =
        function __next_webassembly_compile__(fn: Function) {
          const key = fn.toString()
          if (!warnedWasmCodegens.has(key)) {
            const warning = getServerError(
              new Error(`Dynamic WASM code generation (e. g. 'WebAssembly.compile') not allowed in Edge Runtime.
Learn More: https://nextjs.org/docs/messages/edge-dynamic-code-evaluation`),
              COMPILER_NAMES.edgeServer
            )
            warning.name = 'DynamicWasmCodeGenerationWarning'
            Error.captureStackTrace(warning, __next_webassembly_compile__)
            warnedWasmCodegens.add(key)
            options.onWarning(warning)
          }
          return fn()
        }

      context.__next_webassembly_instantiate__ =
        async function __next_webassembly_instantiate__(fn: Function) {
          const result = await fn()
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T03:29:07.767Z
File: This keeps autocompletion working for static routes.
Functions Extracted: 1


Function 1: generateValidatorFile
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export function generateValidatorFile(
  routesManifest: RouteTypesManifest
): string {
  const generateValidations = (
    paths: string[],
    type:
      | 'AppPageConfig'
      | 'PagesPageConfig'
      | 'LayoutConfig'
      | 'RouteHandlerConfig'
      | 'ApiRouteConfig',
    pathToRouteMap?: Map<string, string>
  ) =>
    paths
      .sort()
      .map((path) => {
        const route = pathToRouteMap ? pathToRouteMap.get(path) : undefined;
        return {
          path,
          type,
          route
        };
      });
  return JSON.stringify(generateValidations(routesManifest.paths, routesManifest.type, routesManifest.pathToRouteMap));
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T03:29:43.876Z
File: vercel-next.js-02172b3/packages/next/src/server/route-modules/route-module.ts
Functions Extracted: 1


Function 1: loadManifests
Language: TypeScript
Lines: 65
Full Code:
--------------------------------------------------------------------------------
private loadManifests(
    srcPage: string,
    projectDir?: string
  ): {
    buildId: string
    buildManifest: BuildManifest
    fallbackBuildManifest: BuildManifest
    routesManifest: DeepReadonly<DevRoutesManifest>
    nextFontManifest: DeepReadonly<NextFontManifest>
    prerenderManifest: DeepReadonly<PrerenderManifest>
    serverFilesManifest: RequiredServerFilesManifest
    reactLoadableManifest: DeepReadonly<ReactLoadableManifest>
    subresourceIntegrityManifest: any
    clientReferenceManifest: any
    serverActionsManifest: any
    dynamicCssManifest: any
    interceptionRoutePatterns: RegExp[]
  } {
    if (process.env.NEXT_RUNTIME === 'edge') {
      const { getEdgePreviewProps } =
        require('../web/get-edge-preview-props') as typeof import('../web/get-edge-preview-props')

      const maybeJSONParse = (str?: string) =>
        str ? JSON.parse(str) : undefined

      return {
        buildId: process.env.__NEXT_BUILD_ID || '',
        buildManifest: self.__BUILD_MANIFEST as any,
        fallbackBuildManifest: {} as any,
        reactLoadableManifest: maybeJSONParse(self.__REACT_LOADABLE_MANIFEST),
        nextFontManifest: maybeJSONParse(self.__NEXT_FONT_MANIFEST),
        prerenderManifest: {
          routes: {},
          dynamicRoutes: {},
          notFoundRoutes: [],
          version: 4,
          preview: getEdgePreviewProps(),
        },
        routesManifest: {
          version: 4,
          caseSensitive: Boolean(process.env.__NEXT_CASE_SENSITIVE_ROUTES),
          basePath: process.env.__NEXT_BASE_PATH || '',
          rewrites: (process.env.__NEXT_REWRITES as any) || {
            beforeFiles: [],
            afterFiles: [],
            fallback: [],
          },
          redirects: [],
          headers: [],
          i18n:
            (process.env.__NEXT_I18N_CONFIG as any as I18NConfig) || undefined,
          skipMiddlewareUrlNormalize: Boolean(
            process.env.__NEXT_NO_MIDDLEWARE_URL_NORMALIZE
          ),
        },
        serverFilesManifest: {
          config: (globalThis as any).nextConfig || {},
        } as any,
        clientReferenceManifest: self.__RSC_MANIFEST?.[srcPage],
        serverActionsManifest: maybeJSONParse(self.__RSC_SERVER_MANIFEST),
        subresourceIntegrityManifest: maybeJSONParse(
          self.__SUBRESOURCE_INTEGRITY_MANIFEST
        ),
        dynamicCssManifest: maybeJSONParse(self.__DYNAMIC_CSS_MANIFEST),
        interceptionRoutePatterns: (
          maybeJSONParse(self.__INTERCEPTION_ROUTE_REWRITE_MANIFEST) ?? []
        ).map((rewrite: any) => new RegExp(rewrite.regex)),
      }
    } else {
      if (!projectDir) {
        throw new Error('Invariant: projectDir is required for node runtime')
      }
      const { loadManifestFromRelativePath } =
        require('../load-manifest.external') as typeof import('../load-manifest.external')
      const normalizedPagePath = normalizePagePath(srcPage)

      const router =
        this.definition.kind === RouteKind.PAGES ||
        this.definition.kind === RouteKind.PAGES_API
          ? 'pages'
          : 'app'

      const [
        routesManifest,
        prerenderManifest,
        buildManifest,
        fallbackBuildManifest,
        reactLoadableManifest,
        nextFontManifest,
        clientReferenceManifest,
        serverActionsManifest,
        subresourceIntegrityManifest,
        serverFilesManifest,
        buildId,
        dynamicCssManifest,
      ] = [
        loadManifestFromRelativePath<DevRoutesManifest>({
          projectDir,
          distDir: this.distDir,
          manifest: ROUTES_MANIFEST,
          shouldCache: !this.isDev,
        }),
        loadManifestFromRelativePath<PrerenderManifest>({
          projectDir,
          distDir: this.distDir,
          manifest: PRERENDER_MANIFEST,
          shouldCache: !this.isDev,
        }),
        loadManifestFromRelativePath<BuildManifest>({
          projectDir,
          distDir: this.distDir,
          manifest: BUILD_MANIFEST,
          shouldCache: !this.isDev,
        }),
        srcPage === '/_error'
          ? loadManifestFromRelativePath<BuildManifest>({
              projectDir,
              distDir: this.distDir,
              manifest: `fallback-${BUILD_MANIFEST}`,
              shouldCache: !this.isDev,
              handleMissing: true,
            })
          : ({} as BuildManifest),
        loadManifestFromRelativePath<ReactLoadableManifest>({
          projectDir,
          distDir: this.distDir,
          manifest: process.env.TURBOPACK
            ? `server/${router === 'app' ? 'app' : 'pages'}${normalizedPagePath}/${REACT_LOADABLE_MANIFEST}`
            : REACT_LOADABLE_MANIFEST,
          handleMissing: true,
          shouldCache: !this.isDev,
        }),
        loadManifestFromRelativePath<NextFontManifest>({
          projectDir,
          distDir: this.distDir,
          manifest: `server/${NEXT_FONT_MANIFEST}.json`,
          shouldCache: !this.isDev,
        }),
        router === 'app' && !isStaticMetadataRoute(srcPage)
          ? loadManifestFromRelativePath({
              distDir: this.distDir,
              projectDir,
              useEval: true,
              handleMissing: true,
              manifest: `server/app${srcPage.replace(/%5F/g, '_') + '_' + CLIENT_REFERENCE_MANIFEST}.js`,
              shouldCache: !this.isDev,
            })
          : undefined,
        router === 'app'
          ? loadManifestFromRelativePath<any>({
              distDir: this.distDir,
              projectDir,
              manifest: `server/${SERVER_REFERENCE_MANIFEST}.json`,
              handleMissing: true,
              shouldCache: !this.isDev,
            })
          : {},
        loadManifestFromRelativePath<Record<string, string>>({
          projectDir,
          distDir: this.distDir,
          manifest: `server/${SUBRESOURCE_INTEGRITY_MANIFEST}.json`,
          handleMissing: true,
          shouldCache: !this.isDev,
        }),
        this.isDev
          ? ({} as any)
          : loadManifestFromRelativePath<RequiredServerFilesManifest>({
              projectDir,
              distDir: this.distDir,
              manifest: SERVER_FILES_MANIFEST,
            }),
        this.isDev
          ? 'development'
          : loadManifestFromRelativePath<any>({
              projectDir,
              distDir: this.distDir,
              manifest: BUILD_ID_FILE,
              skipParse: true,
            }),
        loadManifestFromRelativePath<any>({
          projectDir,
          distDir: this.distDir,
          manifest: DYNAMIC_CSS_MANIFEST,
          handleMissing: true,
        }),
      ]

      return {
        buildId,
        buildManifest,
        fallbackBuildManifest,
        routesManifest,
        nextFontManifest,
        prerenderManifest,
        serverFilesManifest,
        reactLoadableManifest,
        clientReferenceManifest: (clientReferenceManifest as any)
          ?.__RSC_MANIFEST?.[srcPage.replace(/%5F/g, '_')],
        serverActionsManifest,
        subresourceIntegrityManifest,
        dynamicCssManifest,
        interceptionRoutePatterns: routesManifest.rewrites.beforeFiles
          .filter(isInterceptionRouteRewrite)
          .map((rewrite) => new RegExp(rewrite.regex)),
      }
    }
  }
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:29:54.486Z
Question Type: multiple-choice
Function: createModuleContext
Function Size: 2666 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: createModuleContext (TypeScript)\n// Creates a module context with runtime settings and polyfills for Edge functions.\n\nasync function createModuleContext(options: ModuleContextOptions) {\n  const warnedEvals = new Set<string>()\n  const warnedWasmCodegens = new Set<string>()\n  const { edge
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:29:58.932Z
Question Type: order-sequence
Function: createProcessPolyfill
Function Size: 865 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: createProcessPolyfill (TypeScript)\n// Creates a polyfill for the process object, handling environment variables and unsupported APIs.\n\nfunction createProcessPolyfill(env: Record<string, string>) {\n  const processPolyfill = { env: buildEnvironmentVariablesFrom(env) }\n  const overriddenVa
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:30:04.453Z
Question Type: true-false
Function: loadManifests
Function Size: 7430 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: loadManifests (TypeScript)\n// Loads various manifests required for routing and rendering based on the runtime environment.\n\nprivate loadManifests(\n    srcPage: string,\n    projectDir?: string\n  ): {\n    buildId: string\n    buildManifest: BuildManifest\n    fallbackBuildManifest: BuildMan
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:30:06.350Z
Question Type: order-sequence
Function: generateValidatorFile
Function Size: 767 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: generateValidatorFile (TypeScript)\n// Generates a validator file based on the routes manifest.\n\nexport function generateValidatorFile(\n  routesManifest: RouteTypesManifest\n): string {\n  const generateValidations = (\n    paths: string[],\n    type:\n      | 'AppPageConfig'\n      | 'PagesPa
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:30:16.562Z
Question Type: true-false
Function: stringifyCookie
Function Size: 678 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: stringifyCookie (TypeScript)\n// Converts a ResponseCookie or RequestCookie object into a cookie string format.\n\ndeclare function stringifyCookie(c: ResponseCookie | RequestCookie): string {\n    const cookieParts: string[] = [];\n    cookieParts.push(`${c.name}=${c.value}`);\n    if (c.dom
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:30:19.680Z
Question Type: multiple-choice
Function: closeSpanWithError
Function Size: 463 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: closeSpanWithError (TypeScript)\n// Closes a span and records error details if present.\n\nconst closeSpanWithError = (span: Span, error?: Error) => {\n  if (isBubbledError(error) && error.bubble) {\n    span.setAttribute('next.bubble', true)\n  } else {\n    if (error) {\n      span.recordExce
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:30:35.278Z
Question Type: multiple-choice
Function: getTracePropagationData
Function Size: 360 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: getTracePropagationData (TypeScript)\n// Retrieves trace propagation data for the currently active context.\n\npublic getTracePropagationData(): ClientTraceDataEntry[] {\n    const activeContext = context.active()\n    const entries: ClientTraceDataEntry[] = []\n    propagation.inject(activeC
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:30:35.911Z
Question Type: function-variant
Function: parseSetCookie
Function Size: 1100 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: parseSetCookie (TypeScript)\n// Parses a Set-Cookie header value into a ResponseCookie object.\n\ndeclare function parseSetCookie(setCookie: string): undefined | ResponseCookie {\n    const cookie: ResponseCookie = { name: '', value: '' };\n    const parts = setCookie.split('; ');\n    const 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:30:36.555Z
Question Type: multiple-choice
Function: loadManifests
Function Size: 7430 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: loadManifests (TypeScript)\n// Loads various manifests required for routing and rendering based on the runtime environment.\n\nprivate loadManifests(\n    srcPage: string,\n    projectDir?: string\n  ): {\n    buildId: string\n    buildManifest: BuildManifest\n    fallbackBuildManifest: BuildMan
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:30:39.281Z
Question Type: function-variant
Function: createModuleContext
Function Size: 2666 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: createModuleContext (TypeScript)\n// Creates a module context with runtime settings and polyfills for Edge functions.\n\nasync function createModuleContext(options: ModuleContextOptions) {\n  const warnedEvals = new Set<string>()\n  const warnedWasmCodegens = new Set<string>()\n  const { edge
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:30:42.430Z
Question Type: multiple-choice
Function: generateValidatorFile
Function Size: 767 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: generateValidatorFile (TypeScript)\n// Generates a validator file based on the routes manifest.\n\nexport function generateValidatorFile(\n  routesManifest: RouteTypesManifest\n): string {\n  const generateValidations = (\n    paths: string[],\n    type:\n      | 'AppPageConfig'\n      | 'PagesPa
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:30:44.335Z
Question Type: multiple-choice
Function: parseCookie
Function Size: 461 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: parseCookie (TypeScript)\n// Parses a Cookie header value into a Map of cookie names and values.\n\ndeclare function parseCookie(cookie: string): Map<string, string> {\n    const cookieMap = new Map<string, string>();\n    const cookiePairs = cookie.split('; ');\n    for (const pair of cookie
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:30:50.161Z
Question Type: select-all
Function: getTracePropagationData
Function Size: 360 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getTracePropagationData (TypeScript)\n// Retrieves trace propagation data for the currently active context.\n\npublic getTracePropagationData(): ClientTraceDataEntry[] {\n    const activeContext = context.active()\n    const entries: ClientTraceDataEntry[] = []\n    propagation.inject(activeC
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:30:56.345Z
Question Type: multiple-choice
Function: createProcessPolyfill
Function Size: 865 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: createProcessPolyfill (TypeScript)\n// Creates a polyfill for the process object, handling environment variables and unsupported APIs.\n\nfunction createProcessPolyfill(env: Record<string, string>) {\n  const processPolyfill = { env: buildEnvironmentVariablesFrom(env) }\n  const overriddenVa
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:31:01.916Z
Question Type: select-all
Function: parseCookie
Function Size: 461 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: parseCookie (TypeScript)\n// Parses a Cookie header value into a Map of cookie names and values.\n\ndeclare function parseCookie(cookie: string): Map<string, string> {\n    const cookieMap = new Map<string, string>();\n    const cookiePairs = cookie.split('; ');\n    for (const pair of cookie
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:31:02.846Z
Question Type: multiple-choice
Function: buildEnvironmentVariablesFrom
Function Size: 540 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: buildEnvironmentVariablesFrom (TypeScript)\n// Builds a complete environment variable object from injected environments and process.env.\n\nfunction buildEnvironmentVariablesFrom(\n  injectedEnvironments: Record<string, string>\n): Record<string, string | undefined> {\n  const pairs = Object.
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:31:04.147Z
Question Type: multiple-choice
Function: throwUnsupportedAPIError
Function Size: 414 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: throwUnsupportedAPIError (TypeScript)\n// Throws an error for unsupported Node.js APIs in the Edge Runtime.\n\nfunction throwUnsupportedAPIError(name: string) {\n  const error =\n    new Error(`A Node.js API is used (${name}) which is not supported in the Edge Runtime.\nLearn more: https://ne
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:31:15.728Z
Question Type: multiple-choice
Function: parseSetCookie
Function Size: 1100 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: parseSetCookie (TypeScript)\n// Parses a Set-Cookie header value into a ResponseCookie object.\n\ndeclare function parseSetCookie(setCookie: string): undefined | ResponseCookie {\n    const cookie: ResponseCookie = { name: '', value: '' };\n    const parts = setCookie.split('; ');\n    const 
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760138125780
Repository: Unknown
Total Questions Generated: 33
Total Chunks Processed: 11
Ended: 2025-10-11T03:31:26.653Z
================================================================================

