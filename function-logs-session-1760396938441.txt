=== FUNCTION EXTRACTION & QUESTION GENERATION LOG ===
Session ID: session-1760396938441
Started: 2025-10-13T23:08:58.442Z


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-13T23:08:58.442Z
File: [8 files: index.js, ListEmployeeComponent.jsx, UpdateEmployeeComponent.jsx, ViewEmployeeComponent.jsx, FooterComponent.jsx, 8 are considered localhost for IPv4., SpringbootBackendApplicationTests.java, CreateEmployeeComponent.jsx]
Functions Extracted: 4


Function 1: deleteEmployee
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
deleteEmployee(id){
    EmployeeService.deleteEmployee(id).then( res => {
        this.setState({employees: this.state.employees.filter(employee => employee.id !== id)});
    });
}
--------------------------------------------------------------------------------


Function 2: componentDidMount
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
componentDidMount(){
    EmployeeService.getEmployees().then((res) => {
        this.setState({ employees: res.data});
    });
}
--------------------------------------------------------------------------------


Function 3: updateEmployee
Language: JavaScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
updateEmployee = (e) => {
        e.preventDefault();
        let employee = {firstName: this.state.firstName, lastName: this.state.lastName, emailId: this.state.emailId};
        console.log('employee => ' + JSON.stringify(employee));
        console.log('id => ' + JSON.stringify(this.state.id));
        EmployeeService.updateEmployee(employee, this.state.id).then( res => {
            this.props.history.push('/employees');
        });
    }
--------------------------------------------------------------------------------


Function 4: componentDidMount
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
componentDidMount(){
        EmployeeService.getEmployeeById(this.state.id).then( res => {
            this.setState({employee: res.data});
        })
    }
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:09:05.905Z
Question Type: function-variant
Function: deleteEmployee
Function Size: 274 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: deleteEmployee (JavaScript)\n// Deletes an employee by ID and updates the state.\n\ndeleteEmployee(id){\n    EmployeeService.deleteEmployee(id).then( res => {\n        this.setState({employees: this.state.employees.filter(employee => employee.id !== id)});\n    });\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:09:06.148Z
Question Type: select-all
Function: deleteEmployee
Function Size: 274 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: deleteEmployee (JavaScript)\n// Deletes an employee by ID and updates the state.\n\ndeleteEmployee(id){\n    EmployeeService.deleteEmployee(id).then( res => {\n        this.setState({employees: this.state.employees.filter(employee => employee.id !== id)});\n    });\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:09:11.476Z
Question Type: order-sequence
Function: componentDidMount
Function Size: 233 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches the list of employees when the component mounts.\n\ncomponentDidMount(){\n    EmployeeService.getEmployees().then((res) => {\n        this.setState({ employees: res.data});\n    });\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:09:12.921Z
Question Type: multiple-choice
Function: updateEmployee
Function Size: 561 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: updateEmployee (JavaScript)\n// Updates the employee details and navigates back to the employee list.\n\nupdateEmployee = (e) => {\n        e.preventDefault();\n        let employee = {firstName: this.state.firstName, lastName: this.state.lastName, emailId: this.state.emailId};\n        conso
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:09:13.782Z
Question Type: select-all
Function: componentDidMount
Function Size: 233 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches the list of employees when the component mounts.\n\ncomponentDidMount(){\n    EmployeeService.getEmployees().then((res) => {\n        this.setState({ employees: res.data});\n    });\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:09:15.033Z
Question Type: function-variant
Function: componentDidMount
Function Size: 262 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches employee details by ID when the component mounts.\n\ncomponentDidMount(){\n        EmployeeService.getEmployeeById(this.state.id).then( res => {\n            this.setState({employee: res.data});\n        })\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:09:20.595Z
Question Type: function-variant
Function: deleteEmployee
Function Size: 274 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: deleteEmployee (JavaScript)\n// Deletes an employee by ID and updates the state.\n\ndeleteEmployee(id){\n    EmployeeService.deleteEmployee(id).then( res => {\n        this.setState({employees: this.state.employees.filter(employee => employee.id !== id)});\n    });\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:09:24.939Z
Question Type: function-variant
Function: componentDidMount
Function Size: 233 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches the list of employees when the component mounts.\n\ncomponentDidMount(){\n    EmployeeService.getEmployees().then((res) => {\n        this.setState({ employees: res.data});\n    });\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:09:25.333Z
Question Type: order-sequence
Function: updateEmployee
Function Size: 561 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: updateEmployee (JavaScript)\n// Updates the employee details and navigates back to the employee list.\n\nupdateEmployee = (e) => {\n        e.preventDefault();\n        let employee = {firstName: this.state.firstName, lastName: this.state.lastName, emailId: this.state.emailId};\n        conso
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:09:27.951Z
Question Type: select-all
Function: componentDidMount
Function Size: 262 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches employee details by ID when the component mounts.\n\ncomponentDidMount(){\n        EmployeeService.getEmployeeById(this.state.id).then( res => {\n            this.setState({employee: res.data});\n        })\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:09:29.771Z
Question Type: true-false
Function: componentDidMount
Function Size: 262 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches employee details by ID when the component mounts.\n\ncomponentDidMount(){\n        EmployeeService.getEmployeeById(this.state.id).then( res => {\n            this.setState({employee: res.data});\n        })\n    }
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760396938441
Repository: Unknown
Total Questions Generated: 11
Total Chunks Processed: 4
Ended: 2025-10-13T23:09:29.800Z
================================================================================


--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:09:32.995Z
Question Type: true-false
Function: componentDidMount
Function Size: 233 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches the list of employees when the component mounts.\n\ncomponentDidMount(){\n    EmployeeService.getEmployees().then((res) => {\n        this.setState({ employees: res.data});\n    });\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:09:38.219Z
Question Type: select-all
Function: updateEmployee
Function Size: 561 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: updateEmployee (JavaScript)\n// Updates the employee details and navigates back to the employee list.\n\nupdateEmployee = (e) => {\n        e.preventDefault();\n        let employee = {firstName: this.state.firstName, lastName: this.state.lastName, emailId: this.state.emailId};\n        conso
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:09:38.588Z
Question Type: select-all
Function: updateEmployee
Function Size: 561 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: updateEmployee (JavaScript)\n// Updates the employee details and navigates back to the employee list.\n\nupdateEmployee = (e) => {\n        e.preventDefault();\n        let employee = {firstName: this.state.firstName, lastName: this.state.lastName, emailId: this.state.emailId};\n        conso
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:09:43.690Z
Question Type: order-sequence
Function: deleteEmployee
Function Size: 274 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: deleteEmployee (JavaScript)\n// Deletes an employee by ID and updates the state.\n\ndeleteEmployee(id){\n    EmployeeService.deleteEmployee(id).then( res => {\n        this.setState({employees: this.state.employees.filter(employee => employee.id !== id)});\n    });\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:09:46.487Z
Question Type: order-sequence
Function: componentDidMount
Function Size: 262 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches employee details by ID when the component mounts.\n\ncomponentDidMount(){\n        EmployeeService.getEmployeeById(this.state.id).then( res => {\n            this.setState({employee: res.data});\n        })\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:09:50.061Z
Question Type: select-all
Function: deleteEmployee
Function Size: 274 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: deleteEmployee (JavaScript)\n// Deletes an employee by ID and updates the state.\n\ndeleteEmployee(id){\n    EmployeeService.deleteEmployee(id).then( res => {\n        this.setState({employees: this.state.employees.filter(employee => employee.id !== id)});\n    });\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:09:55.835Z
Question Type: function-variant
Function: deleteEmployee
Function Size: 274 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: deleteEmployee (JavaScript)\n// Deletes an employee by ID and updates the state.\n\ndeleteEmployee(id){\n    EmployeeService.deleteEmployee(id).then( res => {\n        this.setState({employees: this.state.employees.filter(employee => employee.id !== id)});\n    });\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:09:57.998Z
Question Type: function-variant
Function: componentDidMount
Function Size: 233 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches the list of employees when the component mounts.\n\ncomponentDidMount(){\n    EmployeeService.getEmployees().then((res) => {\n        this.setState({ employees: res.data});\n    });\n}
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760396938441
Repository: Unknown
Total Questions Generated: 8
Total Chunks Processed: 4
Ended: 2025-10-13T23:09:58.038Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-13T23:13:28.259Z
File: [8 files: CreateEmployeeComponent.jsx, EmployeeService.js, ViewEmployeeComponent.jsx, HeaderComponent.js, SpringbootBackendApplication.java, ListEmployeeComponent.jsx, 8 are considered localhost for IPv4., UpdateEmployeeComponent.jsx]
Functions Extracted: 3


Function 1: componentDidMount
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
componentDidMount(){
        EmployeeService.getEmployeeById(this.state.id).then( res => {
            this.setState({employee: res.data});
        })
    }
--------------------------------------------------------------------------------


Function 2: componentDidMount
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
componentDidMount(){
        EmployeeService.getEmployees().then((res) => {
            this.setState({ employees: res.data});
        });
    }
--------------------------------------------------------------------------------


Function 3: updateEmployee
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
updateEmployee = (e) => {
        e.preventDefault();
        let employee = {firstName: this.state.firstName, lastName: this.state.lastName, emailId: this.state.emailId};
        console.log('employee => ' + JSON.stringify(employee));
        console.log('id => ' + JSON.stringify(this.state.id));
        EmployeeService.updateEmployee(employee, this.state.id).then( res => {
            this.props.history.push('/employees');
        });
    }
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:13:34.905Z
Question Type: true-false
Function: updateEmployee
Function Size: 536 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: updateEmployee (JavaScript)\n// Handles the update of an employee's details.\n\nupdateEmployee = (e) => {\n        e.preventDefault();\n        let employee = {firstName: this.state.firstName, lastName: this.state.lastName, emailId: this.state.emailId};\n        console.log('employee => ' + J
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:13:35.209Z
Question Type: select-all
Function: componentDidMount
Function Size: 256 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches employee details when the component mounts.\n\ncomponentDidMount(){\n        EmployeeService.getEmployeeById(this.state.id).then( res => {\n            this.setState({employee: res.data});\n        })\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:13:38.048Z
Question Type: select-all
Function: componentDidMount
Function Size: 249 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches the list of employees when the component mounts.\n\ncomponentDidMount(){\n        EmployeeService.getEmployees().then((res) => {\n            this.setState({ employees: res.data});\n        });\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:13:44.468Z
Question Type: order-sequence
Function: componentDidMount
Function Size: 256 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches employee details when the component mounts.\n\ncomponentDidMount(){\n        EmployeeService.getEmployeeById(this.state.id).then( res => {\n            this.setState({employee: res.data});\n        })\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:13:47.697Z
Question Type: select-all
Function: updateEmployee
Function Size: 536 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: updateEmployee (JavaScript)\n// Handles the update of an employee's details.\n\nupdateEmployee = (e) => {\n        e.preventDefault();\n        let employee = {firstName: this.state.firstName, lastName: this.state.lastName, emailId: this.state.emailId};\n        console.log('employee => ' + J
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:13:49.828Z
Question Type: function-variant
Function: componentDidMount
Function Size: 249 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches the list of employees when the component mounts.\n\ncomponentDidMount(){\n        EmployeeService.getEmployees().then((res) => {\n            this.setState({ employees: res.data});\n        });\n    }
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760396938441
Repository: Unknown
Total Questions Generated: 6
Total Chunks Processed: 3
Ended: 2025-10-13T23:13:50.109Z
================================================================================


--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:13:54.357Z
Question Type: true-false
Function: componentDidMount
Function Size: 249 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches the list of employees when the component mounts.\n\ncomponentDidMount(){\n        EmployeeService.getEmployees().then((res) => {\n            this.setState({ employees: res.data});\n        });\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:13:58.761Z
Question Type: multiple-choice
Function: componentDidMount
Function Size: 256 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches employee details when the component mounts.\n\ncomponentDidMount(){\n        EmployeeService.getEmployeeById(this.state.id).then( res => {\n            this.setState({employee: res.data});\n        })\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:13:59.325Z
Question Type: select-all
Function: updateEmployee
Function Size: 536 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: updateEmployee (JavaScript)\n// Handles the update of an employee's details.\n\nupdateEmployee = (e) => {\n        e.preventDefault();\n        let employee = {firstName: this.state.firstName, lastName: this.state.lastName, emailId: this.state.emailId};\n        console.log('employee => ' + J
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:14:01.717Z
Question Type: select-all
Function: updateEmployee
Function Size: 536 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: updateEmployee (JavaScript)\n// Handles the update of an employee's details.\n\nupdateEmployee = (e) => {\n        e.preventDefault();\n        let employee = {firstName: this.state.firstName, lastName: this.state.lastName, emailId: this.state.emailId};\n        console.log('employee => ' + J
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:14:06.634Z
Question Type: select-all
Function: componentDidMount
Function Size: 256 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches employee details when the component mounts.\n\ncomponentDidMount(){\n        EmployeeService.getEmployeeById(this.state.id).then( res => {\n            this.setState({employee: res.data});\n        })\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:14:08.543Z
Question Type: order-sequence
Function: updateEmployee
Function Size: 536 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: updateEmployee (JavaScript)\n// Handles the update of an employee's details.\n\nupdateEmployee = (e) => {\n        e.preventDefault();\n        let employee = {firstName: this.state.firstName, lastName: this.state.lastName, emailId: this.state.emailId};\n        console.log('employee => ' + J
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:14:10.077Z
Question Type: select-all
Function: componentDidMount
Function Size: 249 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches the list of employees when the component mounts.\n\ncomponentDidMount(){\n        EmployeeService.getEmployees().then((res) => {\n            this.setState({ employees: res.data});\n        });\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:14:10.757Z
Question Type: function-variant
Function: componentDidMount
Function Size: 256 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches employee details when the component mounts.\n\ncomponentDidMount(){\n        EmployeeService.getEmployeeById(this.state.id).then( res => {\n            this.setState({employee: res.data});\n        })\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:14:18.698Z
Question Type: select-all
Function: componentDidMount
Function Size: 249 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches the list of employees when the component mounts.\n\ncomponentDidMount(){\n        EmployeeService.getEmployees().then((res) => {\n            this.setState({ employees: res.data});\n        });\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:14:21.785Z
Question Type: function-variant
Function: componentDidMount
Function Size: 249 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches the list of employees when the component mounts.\n\ncomponentDidMount(){\n        EmployeeService.getEmployees().then((res) => {\n            this.setState({ employees: res.data});\n        });\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:14:22.369Z
Question Type: function-variant
Function: componentDidMount
Function Size: 256 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches employee details when the component mounts.\n\ncomponentDidMount(){\n        EmployeeService.getEmployeeById(this.state.id).then( res => {\n            this.setState({employee: res.data});\n        })\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:14:23.595Z
Question Type: function-variant
Function: updateEmployee
Function Size: 536 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: updateEmployee (JavaScript)\n// Handles the update of an employee's details.\n\nupdateEmployee = (e) => {\n        e.preventDefault();\n        let employee = {firstName: this.state.firstName, lastName: this.state.lastName, emailId: this.state.emailId};\n        console.log('employee => ' + J
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760396938441
Repository: Unknown
Total Questions Generated: 10
Total Chunks Processed: 3
Ended: 2025-10-13T23:14:23.685Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-13T23:45:09.411Z
File: TryGhost-Ghost-48bf751/apps/portal/src/utils/helpers.js
Functions Extracted: 6


Function 1: getPortalLink
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
export function getPortalLink({page, siteUrl}) {
    const url = siteUrl || `${window.location.protocol}//${window.location.host}${window.location.pathname}`;
    const portalLinkPath = getPortalLinkPath({page});
    return `${url}${portalLinkPath}`;
}
--------------------------------------------------------------------------------


Function 2: getMemberSubscription
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
export function getMemberSubscription({member = {}}) {
    if (isPaidMember({member})) {
        const subscriptions = member.subscriptions || [];
        const activeSubscription = subscriptions.find((sub) => {
            return ['active', 'trialing', 'unpaid', 'past_due'].includes(sub.status);
        });
        if (!activeSubscription?.price && activeSubscription?.plan) {
            activeSubscription.price = activeSubscription.plan;
        }
        return activeSubscription;
    }
    return null;
}
--------------------------------------------------------------------------------


Function 3: getUpgradeProducts
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export function getUpgradeProducts({site, member}) {
    const activePrice = getMemberActivePrice({member});
    const activePriceCurrency = activePrice?.currency;
    const availableProducts = getAvailableProducts({site});
    if (!activePrice?.id) {
        return availableProducts;
    }
    return availableProducts.filter((product) => {
        return (isSameCurrency(getProductCurrency({product}), activePriceCurrency));
    });
}
--------------------------------------------------------------------------------


Function 4: getCheckoutSessionDataFromPlanAttribute
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
export function getCheckoutSessionDataFromPlanAttribute(site, plan) {
    const products = getAvailableProducts({site});
    const defaultTier = products.find(p => p.type === 'paid');
    if (plan === 'monthly') {
        return {
            cadence: 'month',
            tierId: defaultTier.id
        };
    }
    if (plan === 'yearly') {
        return {
            cadence: 'year',
            tierId: defaultTier.id
        };
    }
    return {
        priceId: plan
    };
}
--------------------------------------------------------------------------------


Function 5: getQueryPrice
Language: JavaScript
Lines: 20
Full Code:
--------------------------------------------------------------------------------
export function getQueryPrice({site = {}, priceId}) {
    const prices = getAvailablePrices({site});
    if (priceId === 'free') {
        return !prices || prices.length === 0 || prices.find(p => p.type === 'free');
    } else if (prices && prices.length > 0 && priceId === 'monthly') {
        const monthlyByName = prices.find(p => p.name === 'Monthly');
        const monthlyByInterval = prices.find(p => p.interval === 'month');
        return monthlyByName || monthlyByInterval;
    } else if (prices && prices.length > 0 && priceId === 'yearly') {
        const yearlyByName = prices.find(p => p.name === 'Yearly');
        const yearlyByInterval = prices.find(p => p.interval === 'year');
        return yearlyByName || yearlyByInterval;
    } else if (prices && prices.length > 0 && priceId) {
        return prices.find(p => p.id === priceId);
    }
    return null;
}
--------------------------------------------------------------------------------


Function 6: transformApiSiteData
Language: JavaScript
Lines: 16
Full Code:
--------------------------------------------------------------------------------
export function transformApiSiteData({site}) {
    try {
        if (!site) {
            return null;
        }

        if (site.tiers) {
            site.products = site.tiers;
        }

        site.products = site.products?.map((product) => {
            return {
                ...product,
                monthlyPrice: product.monthly_price,
                yearlyPrice: product.yearly_price
            };
        });

        site.is_stripe_configured = !!site.paid_members_enabled;
    } catch (error) {
        console.error('Error transforming site data:', error);
    }
}
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:45:15.950Z
Question Type: true-false
Function: getPortalLink
Function Size: 353 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getPortalLink (JavaScript)\n// Constructs a portal link based on the page and site URL.\n\nexport function getPortalLink({page, siteUrl}) {\n    const url = siteUrl || `${window.location.protocol}//${window.location.host}${window.location.pathname}`;\n    const portalLinkPath = getPortalLink
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:45:21.019Z
Question Type: true-false
Function: transformApiSiteData
Function Size: 688 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: transformApiSiteData (JavaScript)\n// Transforms API site data to a standardized format.\n\nexport function transformApiSiteData({site}) {\n    try {\n        if (!site) {\n            return null;\n        }\n\n        if (site.tiers) {\n            site.products = site.tiers;\n        }\n\n       
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:45:32.780Z
Question Type: function-variant
Function: getQueryPrice
Function Size: 982 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getQueryPrice (JavaScript)\n// Retrieves price information based on the provided price ID.\n\nexport function getQueryPrice({site = {}, priceId}) {\n    const prices = getAvailablePrices({site});\n    if (priceId === 'free') {\n        return !prices || prices.length === 0 || prices.find(p =>
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:45:32.940Z
Question Type: function-variant
Function: getUpgradeProducts
Function Size: 549 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getUpgradeProducts (JavaScript)\n// Filters available products based on the active price currency.\n\nexport function getUpgradeProducts({site, member}) {\n    const activePrice = getMemberActivePrice({member});\n    const activePriceCurrency = activePrice?.currency;\n    const availableProdu
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:45:34.735Z
Question Type: select-all
Function: getPortalLink
Function Size: 353 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getPortalLink (JavaScript)\n// Constructs a portal link based on the page and site URL.\n\nexport function getPortalLink({page, siteUrl}) {\n    const url = siteUrl || `${window.location.protocol}//${window.location.host}${window.location.pathname}`;\n    const portalLinkPath = getPortalLink
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:45:36.945Z
Question Type: function-variant
Function: transformApiSiteData
Function Size: 688 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: transformApiSiteData (JavaScript)\n// Transforms API site data to a standardized format.\n\nexport function transformApiSiteData({site}) {\n    try {\n        if (!site) {\n            return null;\n        }\n\n        if (site.tiers) {\n            site.products = site.tiers;\n        }\n\n       
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:45:43.931Z
Question Type: select-all
Function: getQueryPrice
Function Size: 982 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getQueryPrice (JavaScript)\n// Retrieves price information based on the provided price ID.\n\nexport function getQueryPrice({site = {}, priceId}) {\n    const prices = getAvailablePrices({site});\n    if (priceId === 'free') {\n        return !prices || prices.length === 0 || prices.find(p =>
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:45:47.838Z
Question Type: select-all
Function: getUpgradeProducts
Function Size: 549 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getUpgradeProducts (JavaScript)\n// Filters available products based on the active price currency.\n\nexport function getUpgradeProducts({site, member}) {\n    const activePrice = getMemberActivePrice({member});\n    const activePriceCurrency = activePrice?.currency;\n    const availableProdu
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:45:50.609Z
Question Type: function-variant
Function: getPortalLink
Function Size: 353 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getPortalLink (JavaScript)\n// Constructs a portal link based on the page and site URL.\n\nexport function getPortalLink({page, siteUrl}) {\n    const url = siteUrl || `${window.location.protocol}//${window.location.host}${window.location.pathname}`;\n    const portalLinkPath = getPortalLink
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:45:51.782Z
Question Type: order-sequence
Function: getCheckoutSessionDataFromPlanAttribute
Function Size: 613 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getCheckoutSessionDataFromPlanAttribute (JavaScript)\n// Generates checkout session data based on the selected plan.\n\nexport function getCheckoutSessionDataFromPlanAttribute(site, plan) {\n    const products = getAvailableProducts({site});\n    const defaultTier = products.find(p => p.type
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:46:00.395Z
Question Type: multiple-choice
Function: getQueryPrice
Function Size: 982 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: getQueryPrice (JavaScript)\n// Retrieves price information based on the provided price ID.\n\nexport function getQueryPrice({site = {}, priceId}) {\n    const prices = getAvailablePrices({site});\n    if (priceId === 'free') {\n        return !prices || prices.length === 0 || prices.find(p =>
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:46:01.030Z
Question Type: select-all
Function: getCheckoutSessionDataFromPlanAttribute
Function Size: 613 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getCheckoutSessionDataFromPlanAttribute (JavaScript)\n// Generates checkout session data based on the selected plan.\n\nexport function getCheckoutSessionDataFromPlanAttribute(site, plan) {\n    const products = getAvailableProducts({site});\n    const defaultTier = products.find(p => p.type
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:46:04.431Z
Question Type: function-variant
Function: getMemberSubscription
Function Size: 618 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getMemberSubscription (JavaScript)\n// Retrieves the active subscription for a paid member.\n\nexport function getMemberSubscription({member = {}}) {\n    if (isPaidMember({member})) {\n        const subscriptions = member.subscriptions || [];\n        const activeSubscription = subscriptions
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760396938441
Repository: Unknown
Total Questions Generated: 12
Total Chunks Processed: 6
Ended: 2025-10-13T23:46:10.187Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-13T23:46:29.431Z
File: TryGhost-Ghost-48bf751/ghost/core/core/server/models/base/plugins/bulk-operations.js
Functions Extracted: 7


Function 1: createBulkOperation
Language: JavaScript
Lines: 31
Full Code:
--------------------------------------------------------------------------------
function createBulkOperation(singular, multiple) {
    return async function (knex, table, data, options) {
        const result = {
            successful: 0,
            unsuccessful: 0,
            unsuccessfulData: [],
            errors: []
        };

        for (const chunkedData of _.chunk(data, CHUNK_SIZE)) {
            try {
                await multiple(knex, table, chunkedData, options);
                result.successful += chunkedData.length;
            } catch (errToIgnore) {
                if (options.throwErrors) {
                    throw errToIgnore;
                }
                for (const singularData of chunkedData) {
                    try {
                        await singular(knex, table, singularData, options);
                        result.successful += 1;
                    } catch (err) {
                        err.errorDetails = singularData;
                        result.errors.push(err);
                        result.unsuccessfulData.push(singularData);
                        result.unsuccessful += 1;
                    }
                }
            }
        }

        return result;
    };
}
--------------------------------------------------------------------------------


Function 2: insertSingle
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
async function insertSingle(knex, table, record, options) {
    let k = knex(table);
    if (options.transacting) {
        k = k.transacting(options.transacting);
    }
    await k.insert(record);
}
--------------------------------------------------------------------------------


Function 3: insertMultiple
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
async function insertMultiple(knex, table, chunk, options) {
    let k = knex(table);
    if (options.transacting) {
        k = k.transacting(options.transacting);
    }
    await k.insert(chunk);
}
--------------------------------------------------------------------------------


Function 4: editSingle
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
async function editSingle(knex, table, id, options) {
    let k = knex(table);
    if (options.transacting) {
        k = k.transacting(options.transacting);
    }
    await k.where(options.column ?? 'id', id).update(options.data);
}
--------------------------------------------------------------------------------


Function 5: editMultiple
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
async function editMultiple(knex, table, chunk, options) {
    let k = knex(table);
    if (options.transacting) {
        k = k.transacting(options.transacting);
    }
    await k.whereIn(options.column ?? 'id', chunk).update(options.data);
}
--------------------------------------------------------------------------------


Function 6: delSingle
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
async function delSingle(knex, table, id, options) {
    try {
        let k = knex(table);
        if (options.transacting) {
            k = k.transacting(options.transacting);
        }
        await k.where(options.column ?? 'id', id).del();
    } catch (err) {
        const importError = new errors.DataImportError({
            message: `Failed to remove entry from ${table}`,
            context: `Entry id: ${id}`,
            err: err
        });
        logging.error(importError);
        throw importError;
    }
}
--------------------------------------------------------------------------------


Function 7: delMultiple
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
async function delMultiple(knex, table, chunk, options) {
    let k = knex(table);
    if (options.transacting) {
        k = k.transacting(options.transacting);
    }
    await k.whereIn(options.column ?? 'id', chunk).del();
}
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:46:35.490Z
Question Type: true-false
Function: delMultiple
Function Size: 355 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: delMultiple (JavaScript)\n// Deletes multiple records from the specified table based on the provided chunk of ids.\n\nasync function delMultiple(knex, table, chunk, options) {\n    let k = knex(table);\n    if (options.transacting) {\n        k = k.transacting(options.transacting);\n    }\n    
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:46:39.675Z
Question Type: select-all
Function: insertSingle
Function Size: 292 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: insertSingle (JavaScript)\n// Inserts a single record into the specified table.\n\nasync function insertSingle(knex, table, record, options) {\n    let k = knex(table);\n    if (options.transacting) {\n        k = k.transacting(options.transacting);\n    }\n    await k.insert(record);\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:46:41.618Z
Question Type: order-sequence
Function: delSingle
Function Size: 642 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: delSingle (JavaScript)\n// Deletes a single record from the specified table based on the provided id.\n\nasync function delSingle(knex, table, id, options) {\n    try {\n        let k = knex(table);\n        if (options.transacting) {\n            k = k.transacting(options.transacting);\n      
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:46:43.236Z
Question Type: multiple-choice
Function: insertSingle
Function Size: 292 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: insertSingle (JavaScript)\n// Inserts a single record into the specified table.\n\nasync function insertSingle(knex, table, record, options) {\n    let k = knex(table);\n    if (options.transacting) {\n        k = k.transacting(options.transacting);\n    }\n    await k.insert(record);\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T23:46:44.755Z
Question Type: function-variant
Function: editMultiple
Function Size: 368 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: editMultiple (JavaScript)\n// Edits multiple records in the specified table based on the provided chunk of ids.\n\nasync function editMultiple(knex, table, chunk, options) {\n    let k = knex(table);\n    if (options.transacting) {\n        k = k.transacting(options.transacting);\n    }\n    aw
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760396938441
Repository: Unknown
Total Questions Generated: 7
Total Chunks Processed: 7
Ended: 2025-10-13T23:46:44.904Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-14T00:08:14.892Z
File: => `true` if user roles have been loaded
Functions Extracted: 5


Function 1: addUsersToRoles
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function addUsersToRoles(
    users: string | string[] | Meteor.User | Meteor.User[],
    roles: string | string[],
    options?: string | { scope?: string; ifExists?: boolean }
  ): void {
    // Logic to add users to roles
    // Check if users and roles are valid
    if (!users || !roles) {
      throw new Error('Users and roles must be provided');
    }
    // Process users and roles
    const userArray = Array.isArray(users) ? users : [users];
    const roleArray = Array.isArray(roles) ? roles : [roles];
    // Add roles to each user
    userArray.forEach(user => {
      roleArray.forEach(role => {
        // Add role to user logic here
      });
    });
  }
--------------------------------------------------------------------------------


Function 2: createRole
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function createRole(
    roleName: string,
    options?: { unlessExists: boolean }
  ): string {
    // Logic to create a new role
    if (!roleName) {
      throw new Error('Role name must be provided');
    }
    // Check if role already exists
    const existingRole = // logic to check if role exists;
    if (existingRole && options?.unlessExists) {
      return existingRole._id;
    }
    // Create new role logic here
    const newRole = // logic to create role;
    return newRole._id;
  }
--------------------------------------------------------------------------------


Function 3: deleteRole
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function deleteRole(roleName: string): void {
    // Logic to delete an existing role
    if (!roleName) {
      throw new Error('Role name must be provided');
    }
    // Check if role exists
    const role = // logic to find role;
    if (!role) {
      throw new Error('Role does not exist');
    }
    // Delete role logic here
    // Remove role from users if necessary
  }
--------------------------------------------------------------------------------


Function 4: renameRole
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function renameRole(oldName: string, newName: string): void {
    // Logic to rename an existing role
    if (!oldName || !newName) {
      throw new Error('Both old and new role names must be provided');
    }
    // Check if old role exists
    const role = // logic to find role by oldName;
    if (!role) {
      throw new Error('Old role does not exist');
    }
    // Rename role logic here
  }
--------------------------------------------------------------------------------


Function 5: getRolesForUser
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function getRolesForUser(
    user: string | Meteor.User,
    options?:
      | string
      | {
          scope?: string;
          anyScope?: boolean;
          onlyScoped?: boolean;
          onlyAssigned?: boolean;
          fullObjects?: boolean;
        }
  ): string[] {
    // Logic to retrieve user's roles
    if (!user) {
      throw new Error('User must be provided');
    }
    // Fetch roles logic here
    const roles = // logic to get roles for user;
    return roles;
  }
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:08:22.097Z
Question Type: multiple-choice
Function: getRolesForUser
Function Size: 558 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: getRolesForUser (TypeScript)\n// Retrieves user's roles.\n\nfunction getRolesForUser(\n    user: string | Meteor.User,\n    options?:\n      | string\n      | {\n          scope?: string;\n          anyScope?: boolean;\n          onlyScoped?: boolean;\n          onlyAssigned?: boolean;\n          f
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:08:23.469Z
Question Type: select-all
Function: deleteRole
Function Size: 446 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: deleteRole (TypeScript)\n// Deletes an existing role.\n\nfunction deleteRole(roleName: string): void {\n    // Logic to delete an existing role\n    if (!roleName) {\n      throw new Error('Role name must be provided');\n    }\n    // Check if role exists\n    const role = // logic to find role;
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:08:26.608Z
Question Type: order-sequence
Function: addUsersToRoles
Function Size: 761 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: addUsersToRoles (TypeScript)\n// Adds roles to existing roles for each user.\n\nfunction addUsersToRoles(\n    users: string | string[] | Meteor.User | Meteor.User[],\n    roles: string | string[],\n    options?: string | { scope?: string; ifExists?: boolean }\n  ): void {\n    // Logic to add 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:08:30.863Z
Question Type: order-sequence
Function: deleteRole
Function Size: 446 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: deleteRole (TypeScript)\n// Deletes an existing role.\n\nfunction deleteRole(roleName: string): void {\n    // Logic to delete an existing role\n    if (!roleName) {\n      throw new Error('Role name must be provided');\n    }\n    // Check if role exists\n    const role = // logic to find role;
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:08:31.051Z
Question Type: select-all
Function: getRolesForUser
Function Size: 558 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getRolesForUser (TypeScript)\n// Retrieves user's roles.\n\nfunction getRolesForUser(\n    user: string | Meteor.User,\n    options?:\n      | string\n      | {\n          scope?: string;\n          anyScope?: boolean;\n          onlyScoped?: boolean;\n          onlyAssigned?: boolean;\n          f
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:08:35.877Z
Question Type: true-false
Function: renameRole
Function Size: 467 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: renameRole (TypeScript)\n// Renames an existing role.\n\nfunction renameRole(oldName: string, newName: string): void {\n    // Logic to rename an existing role\n    if (!oldName || !newName) {\n      throw new Error('Both old and new role names must be provided');\n    }\n    // Check if old ro
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:08:36.970Z
Question Type: select-all
Function: renameRole
Function Size: 467 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: renameRole (TypeScript)\n// Renames an existing role.\n\nfunction renameRole(oldName: string, newName: string): void {\n    // Logic to rename an existing role\n    if (!oldName || !newName) {\n      throw new Error('Both old and new role names must be provided');\n    }\n    // Check if old ro
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:08:39.626Z
Question Type: function-variant
Function: renameRole
Function Size: 467 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: renameRole (TypeScript)\n// Renames an existing role.\n\nfunction renameRole(oldName: string, newName: string): void {\n    // Logic to rename an existing role\n    if (!oldName || !newName) {\n      throw new Error('Both old and new role names must be provided');\n    }\n    // Check if old ro
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:08:42.804Z
Question Type: function-variant
Function: deleteRole
Function Size: 446 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: deleteRole (TypeScript)\n// Deletes an existing role.\n\nfunction deleteRole(roleName: string): void {\n    // Logic to delete an existing role\n    if (!roleName) {\n      throw new Error('Role name must be provided');\n    }\n    // Check if role exists\n    const role = // logic to find role;
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760396938441
Repository: Unknown
Total Questions Generated: 10
Total Chunks Processed: 5
Ended: 2025-10-14T00:08:42.883Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-14T00:08:55.461Z
File: meteor-meteor-6f48b86/packages/accounts-base/accounts-base.d.ts
Functions Extracted: 3


Function 1: createUser
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function createUser(
    options: {
      username?: string | undefined;
      email?: string | undefined;
      password?: string | undefined;
      profile?: Meteor.UserProfile | undefined;
    },
    callback?: (error?: Error | Meteor.Error | Meteor.TypedError) => void
  ): Promise<string> {
    // Logic to create a user in the system
    return new Promise((resolve, reject) => {
      // Simulate user creation logic
      if (!options.email || !options.password) {
        const error = new Meteor.Error('invalid-params', 'Email and password are required.');
        if (callback) callback(error);
        return reject(error);
      }
      // Assume user is created successfully
      const userId = 'newUserId'; // Simulated user ID
      if (callback) callback();
      resolve(userId);
    });
  }
--------------------------------------------------------------------------------


Function 2: changePassword
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function changePassword(
    oldPassword: string,
    newPassword: string,
    callback?: (error?: Error | Meteor.Error | Meteor.TypedError) => void
  ): Promise<void> {
    return new Promise((resolve, reject) => {
      // Logic to change the user's password
      if (!oldPassword || !newPassword) {
        const error = new Meteor.Error('invalid-params', 'Old and new passwords are required.');
        if (callback) callback(error);
        return reject(error);
      }
      // Simulate password change logic
      // Assume password is changed successfully
      if (callback) callback();
      resolve();
    });
  }
--------------------------------------------------------------------------------


Function 3: sendEnrollmentEmail
Language: TypeScript
Lines: 20
Full Code:
--------------------------------------------------------------------------------
function sendEnrollmentEmail(
    userId: string,
    email?: string,
    extraTokenData?: Record<string, unknown>,
    extraParams?: Record<string, unknown>
  ): Promise<SendEmailResult> {
    return new Promise((resolve, reject) => {
      // Logic to send an enrollment email
      if (!userId) {
        const error = new Meteor.Error('invalid-user', 'User ID is required.');
        return reject(error);
      }
      // Simulate sending email logic
      const result: SendEmailResult = {
        email: email || 'default@example.com',
        user: { _id: userId } as Meteor.User,
        token: 'simulatedToken',
        url: 'http://example.com/enroll',
        options: {
          from: 'no-reply@example.com',
          to: email || 'default@example.com',
          subject: 'Welcome!',
          text: 'Please enroll your account.',
          html: '<p>Please enroll your account.</p>'
        }
      };
      resolve(result);
    });
  }
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:09:06.228Z
Question Type: select-all
Function: sendEnrollmentEmail
Function Size: 1052 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: sendEnrollmentEmail (TypeScript)\n// Sends an enrollment email to the specified user.\n\nfunction sendEnrollmentEmail(\n    userId: string,\n    email?: string,\n    extraTokenData?: Record<string, unknown>,\n    extraParams?: Record<string, unknown>\n  ): Promise<SendEmailResult> {\n    return 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:09:18.043Z
Question Type: function-variant
Function: changePassword
Function Size: 732 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: changePassword (TypeScript)\n// Changes the user's password from oldPassword to newPassword.\n\nfunction changePassword(\n    oldPassword: string,\n    newPassword: string,\n    callback?: (error?: Error | Meteor.Error | Meteor.TypedError) => void\n  ): Promise<void> {\n    return new Promise((
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:09:18.207Z
Question Type: order-sequence
Function: changePassword
Function Size: 732 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: changePassword (TypeScript)\n// Changes the user's password from oldPassword to newPassword.\n\nfunction changePassword(\n    oldPassword: string,\n    newPassword: string,\n    callback?: (error?: Error | Meteor.Error | Meteor.TypedError) => void\n  ): Promise<void> {\n    return new Promise((
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:09:22.133Z
Question Type: function-variant
Function: createUser
Function Size: 894 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: createUser (TypeScript)\n// Creates a new user with the given options.\n\nfunction createUser(\n    options: {\n      username?: string | undefined;\n      email?: string | undefined;\n      password?: string | undefined;\n      profile?: Meteor.UserProfile | undefined;\n    },\n    callback?: (e
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:09:22.698Z
Question Type: function-variant
Function: createUser
Function Size: 894 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: createUser (TypeScript)\n// Creates a new user with the given options.\n\nfunction createUser(\n    options: {\n      username?: string | undefined;\n      email?: string | undefined;\n      password?: string | undefined;\n      profile?: Meteor.UserProfile | undefined;\n    },\n    callback?: (e
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:09:27.985Z
Question Type: select-all
Function: createUser
Function Size: 894 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: createUser (TypeScript)\n// Creates a new user with the given options.\n\nfunction createUser(\n    options: {\n      username?: string | undefined;\n      email?: string | undefined;\n      password?: string | undefined;\n      profile?: Meteor.UserProfile | undefined;\n    },\n    callback?: (e
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:09:29.233Z
Question Type: select-all
Function: changePassword
Function Size: 732 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: changePassword (TypeScript)\n// Changes the user's password from oldPassword to newPassword.\n\nfunction changePassword(\n    oldPassword: string,\n    newPassword: string,\n    callback?: (error?: Error | Meteor.Error | Meteor.TypedError) => void\n  ): Promise<void> {\n    return new Promise((
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:09:32.481Z
Question Type: true-false
Function: createUser
Function Size: 894 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: createUser (TypeScript)\n// Creates a new user with the given options.\n\nfunction createUser(\n    options: {\n      username?: string | undefined;\n      email?: string | undefined;\n      password?: string | undefined;\n      profile?: Meteor.UserProfile | undefined;\n    },\n    callback?: (e
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760396938441
Repository: Unknown
Total Questions Generated: 8
Total Chunks Processed: 3
Ended: 2025-10-14T00:09:32.539Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-14T00:10:01.583Z
File: [2 files: HTTP methods whose capitalization should be normalized, and should probably keep doing so, but if we mess up, warn and continue.]
Functions Extracted: 8


Function 1: Request
Language: JavaScript
Lines: 22
Full Code:
--------------------------------------------------------------------------------
function Request(input, options) {
    options = options || {}
    var body = options.body
    if (Request.prototype.isPrototypeOf(input)) {
      if (input.bodyUsed) {
        throw new TypeError('Already read')
      }
      this.url = input.url
      this.credentials = input.credentials
      if (!options.headers) {
        this.headers = new Headers(input.headers)
      }
      this.method = input.method
      this.mode = input.mode
      if (!body) {
        body = input._bodyInit
        input.bodyUsed = true
      }
    } else {
      this.url = input
    }

    this.credentials = options.credentials || this.credentials || 'omit'
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers)
    }
    this.method = normalizeMethod(options.method || this.method || 'GET')
    this.mode = options.mode || this.mode || null
    this.referrer = null

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests')
    }
    this._initBody(body)
  }
--------------------------------------------------------------------------------


Function 2: decode
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function decode(body) {
    var form = new FormData()
    body.trim().split('&').forEach(function(bytes) {
      if (bytes) {
        var split = bytes.split('=')
        var name = split.shift().replace(/\+/g, ' ')
        var value = split.join('=').replace(/\+/g, ' ')
        form.append(decodeURIComponent(name), decodeURIComponent(value))
      }
    })
    return form
  }
--------------------------------------------------------------------------------


Function 3: headers
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function headers(xhr) {
    var head = new Headers()
    var pairs = xhr.getAllResponseHeaders().trim().split('\n')
    pairs.forEach(function(header) {
      var split = header.trim().split(':')
      var key = split.shift().trim()
      var value = split.join(':').trim()
      head.append(key, value)
    })
    return head
  }
--------------------------------------------------------------------------------


Function 4: Response
Language: JavaScript
Lines: 14
Full Code:
--------------------------------------------------------------------------------
function Response(bodyInit, options) {
    if (!options) {
      options = {}
    }

    this.type = 'default'
    this.status = options.status
    this.ok = this.status >= 200 && this.status < 300
    this.statusText = options.statusText
    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers)
    this.url = options.url || ''
    this._initBody(bodyInit)
  }
--------------------------------------------------------------------------------


Function 5: Response.redirect
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
Response.redirect = function(url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code')
    }

    return new Response(null, {status: status, headers: {location: url}})
  }
--------------------------------------------------------------------------------


Function 6: report
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function report() {
    if (! Profile.enabled) {
      return;
    }
    running = false;
    print('');
    setupReport();
    reportHierarchy();
    print('');
    reportHotLeaves();
    print('');
    print(`(#${reportNum}) Total: ${formatMs(getTopLevelTotal())}` +
          ` (${runningName})`);
    print('');
  }
--------------------------------------------------------------------------------


Function 7: reportOn
Language: TypeScript
Lines: 20
Full Code:
--------------------------------------------------------------------------------
function reportOn(entry: Entry, isLastLeafStack: boolean[] = []) {
    const stats = entryStats(entry);
    const isParent = hasSignificantChildren(entry);
    const name = entryName(entry);

    print((isParent ? leftRightDots : leftRightAlign)
          (printIndentation(isLastLeafStack) + name, formatMs(stats.time), 70)
          + (stats.isOther ? "" : (" (" + stats.count + ")")));

    if (isParent) {
      const childrenList = children(entry).filter(entry => {
        return entryStats(entry).time > filter;
      });
      childrenList.forEach((child, i) => {
        const isLastLeaf = i === childrenList.length - 1;
        reportOn(child, isLastLeafStack.concat(isLastLeaf));
      });
    }
  }
--------------------------------------------------------------------------------


Function 8: leafTotals
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function leafTotals(leafName: string) {
    let time = 0;
    let count = 0;

    entries.filter(entry => {
      return entryName(entry) === leafName && isLeaf(entry);
    }).forEach(leaf => {
      const stats = entryStats(leaf);
      time += stats.time;
      count += stats.count;
    });

    return { time, count };
  }
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:10:08.803Z
Question Type: multiple-choice
Function: leafTotals
Function Size: 426 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: leafTotals (TypeScript)\n// Calculates total time and count for a specific leaf entry.\n\nfunction leafTotals(leafName: string) {\n    let time = 0;\n    let count = 0;\n\n    entries.filter(entry => {\n      return entryName(entry) === leafName && isLeaf(entry);\n    }).forEach(leaf => {\n      
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:10:13.966Z
Question Type: function-variant
Function: leafTotals
Function Size: 426 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: leafTotals (TypeScript)\n// Calculates total time and count for a specific leaf entry.\n\nfunction leafTotals(leafName: string) {\n    let time = 0;\n    let count = 0;\n\n    entries.filter(entry => {\n      return entryName(entry) === leafName && isLeaf(entry);\n    }).forEach(leaf => {\n      
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:10:16.000Z
Question Type: order-sequence
Function: Response
Function Size: 507 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: Response (JavaScript)\n// Constructs a Response object with status, headers, and body.\n\nfunction Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = options.status\n    this.ok = this.status >= 200 && this.status < 300\n  
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:10:16.571Z
Question Type: function-variant
Function: report
Function Size: 412 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: report (JavaScript)\n// Generates and prints a report of the profiling results.\n\nfunction report() {\n    if (! Profile.enabled) {\n      return;\n    }\n    running = false;\n    print('');\n    setupReport();\n    reportHierarchy();\n    print('');\n    reportHotLeaves();\n    print('');\n    pri
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:10:20.250Z
Question Type: select-all
Function: Response.redirect
Function Size: 345 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: Response.redirect (JavaScript)\n// Creates a redirect Response object with a specified URL and status.\n\nResponse.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {s
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:10:23.914Z
Question Type: order-sequence
Function: Request
Function Size: 1172 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: Request (JavaScript)\n// Constructs a Request object with URL, method, headers, and body.\n\nfunction Request(input, options) {\n    options = options || {}\n    var body = options.body\n    if (Request.prototype.isPrototypeOf(input)) {\n      if (input.bodyUsed) {\n        throw new TypeError(
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:10:27.158Z
Question Type: select-all
Function: Request
Function Size: 1172 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: Request (JavaScript)\n// Constructs a Request object with URL, method, headers, and body.\n\nfunction Request(input, options) {\n    options = options || {}\n    var body = options.body\n    if (Request.prototype.isPrototypeOf(input)) {\n      if (input.bodyUsed) {\n        throw new TypeError(
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:10:28.492Z
Question Type: select-all
Function: reportOn
Function Size: 810 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: reportOn (TypeScript)\n// Recursively reports on the profiling data for a given entry.\n\nfunction reportOn(entry: Entry, isLastLeafStack: boolean[] = []) {\n    const stats = entryStats(entry);\n    const isParent = hasSignificantChildren(entry);\n    const name = entryName(entry);\n\n    prin
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:10:33.899Z
Question Type: function-variant
Function: headers
Function Size: 416 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: headers (JavaScript)\n// Extracts headers from an XMLHttpRequest object.\n\nfunction headers(xhr) {\n    var head = new Headers()\n    var pairs = xhr.getAllResponseHeaders().trim().split('\n')\n    pairs.forEach(function(header) {\n      var split = header.trim().split(':')\n      var key = sp
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:10:35.843Z
Question Type: true-false
Function: reportOn
Function Size: 810 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: reportOn (TypeScript)\n// Recursively reports on the profiling data for a given entry.\n\nfunction reportOn(entry: Entry, isLastLeafStack: boolean[] = []) {\n    const stats = entryStats(entry);\n    const isParent = hasSignificantChildren(entry);\n    const name = entryName(entry);\n\n    prin
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760396938441
Repository: Unknown
Total Questions Generated: 9
Total Chunks Processed: 8
Ended: 2025-10-14T00:10:35.990Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-14T00:43:23.811Z
File: [2 files: arr[i] = this.pv[i] + addedAmp + amp1*perc + amp2*(1-perc);, AnimationManagerWorkerOverride.js]
Functions Extracted: 21


Function 1: lookAt
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function lookAt(elem1, elem2) {
  var fVec = [elem2[0] - elem1[0], elem2[1] - elem1[1], elem2[2] - elem1[2]];
  var pitch = Math.atan2(fVec[0], Math.sqrt(fVec[1] * fVec[1] + fVec[2] * fVec[2])) / degToRads;
  var yaw = -Math.atan2(fVec[1], fVec[2]) / degToRads;
  return [yaw, pitch, 0];
}
--------------------------------------------------------------------------------


Function 2: applyEase
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function applyEase(fn, t, tMin, tMax, val1, val2) {
  if (val1 === undefined) {
    val1 = tMin;
    val2 = tMax;
  } else {
    t = (t - tMin) / (tMax - tMin);
  }
  if (t > 1) {
    t = 1;
  } else if (t < 0) {
    t = 0;
  }
  var mult = fn(t);
  if ($bm_isInstanceOfArray(val1)) {
    var iKey;
    var lenKey = val1.length;
    var arr = createTypedArray('float32', lenKey);
    for (iKey = 0; iKey < lenKey; iKey += 1) {
      arr[iKey] = (val2[iKey] - val1[iKey]) * mult + val1[iKey];
    }
    return arr;
  }
  return (val2 - val1) * mult + val1;
}
--------------------------------------------------------------------------------


Function 3: nearestKey
Language: JavaScript
Lines: 22
Full Code:
--------------------------------------------------------------------------------
function nearestKey(time) {
  var iKey;
  var lenKey = data.k.length;
  var index;
  var keyTime;
  if (!data.k.length || typeof (data.k[0]) === 'number') {
    index = 0;
    keyTime = 0;
  } else {
    index = -1;
    time *= elem.comp.globalData.frameRate;
    if (time < data.k[0].t) {
      index = 1;
      keyTime = data.k[0].t;
    } else {
      for (iKey = 0; iKey < lenKey - 1; iKey += 1) {
        if (time === data.k[iKey].t) {
          index = iKey + 1;
          keyTime = data.k[iKey].t;
          break;
        } else if (time > data.k[iKey].t && time < data.k[iKey + 1].t) {
          if (time - data.k[iKey].t > data.k[iKey + 1].t - time) {
            index = iKey + 2;
            keyTime = data.k[iKey + 1].t;
          } else {
            index = iKey + 1;
            keyTime = data.k[iKey].t;
          }
          break;
        }
      }
      if (index === -1) {
        index = iKey + 1;
        keyTime = data.k[iKey].t;
      }
    }
  }
  var obKey = {};
  obKey.index = index;
  obKey.time = keyTime / elem.comp.globalData.frameRate;
  return obKey;
}
--------------------------------------------------------------------------------


Function 4: key
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function key(ind) {
  var obKey;
  var iKey;
  var lenKey;
  if (!data.k.length || typeof (data.k[0]) === 'number') {
    throw new Error('The property has no keyframe at index ' + ind);
  }
  ind -= 1;
  obKey = {
    time: data.k[ind].t / elem.comp.globalData.frameRate,
    value: [],
  };
  var arr = Object.prototype.hasOwnProperty.call(data.k[ind], 's') ? data.k[ind].s : data.k[ind - 1].e;

  lenKey = arr.length;
  for (iKey = 0; iKey < lenKey; iKey += 1) {
    obKey[iKey] = arr[iKey];
    obKey.value[iKey] = arr[iKey];
  }
  return obKey;
}
--------------------------------------------------------------------------------


Function 5: framesToTime
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function framesToTime(fr, fps) {
  if (!fps) {
    fps = elem.comp.globalData.frameRate;
  }
  return fr / fps;
}
--------------------------------------------------------------------------------


Function 6: timeToFrames
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function timeToFrames(t, fps) {
  if (!t && t !== 0) {
    t = time;
  }
  if (!fps) {
    fps = elem.comp.globalData.frameRate;
  }
  return t * fps;
}
--------------------------------------------------------------------------------


Function 7: posterizeTime
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function posterizeTime(framesPerSecond) {
  time = framesPerSecond === 0 ? 0 : Math.floor(time * framesPerSecond) / framesPerSecond;
  value = valueAtTime(time);
}
--------------------------------------------------------------------------------


Function 8: removeElement
Language: JavaScript
Lines: 13
Full Code:
--------------------------------------------------------------------------------
function removeElement(ev) {
  var i = 0;
  var animItem = ev.target;
  while (i < len) {
    if (registeredAnimations[i].animation === animItem) {
      registeredAnimations.splice(i, 1);
      i -= 1;
      len -= 1;
      if (!animItem.isPaused) {
        subtractPlayingCount();
      }
    }
    i += 1;
  }
}
--------------------------------------------------------------------------------


Function 9: registerAnimation
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function registerAnimation(element, animationData) {
  if (!element) {
    return null;
  }
  var i = 0;
  while (i < len) {
    if (registeredAnimations[i].elem === element && registeredAnimations[i].elem !== null) {
      return registeredAnimations[i].animation;
    }
    i += 1;
  }
  var animItem = new AnimationItem();
  setupAnimation(animItem, element);
  animItem.setData(element, animationData);
  return animItem;
}
--------------------------------------------------------------------------------


Function 10: loadAnimation
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function loadAnimation(params) {
  var animItem = new AnimationItem();
  setupAnimation(animItem, null);
  animItem.setParams(params);
  return animItem;
}
--------------------------------------------------------------------------------


Function 11: setSpeed
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function setSpeed(val, animation) {
  var i;
  for (i = 0; i < len; i += 1) {
    registeredAnimations[i].animation.setSpeed(val, animation);
  }
}
--------------------------------------------------------------------------------


Function 12: setDirection
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function setDirection(val, animation) {
  var i;
  for (i = 0; i < len; i += 1) {
    registeredAnimations[i].animation.setDirection(val, animation);
  }
}
--------------------------------------------------------------------------------


Function 13: play
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function play(animation) {
  var i;
  for (i = 0; i < len; i += 1) {
    registeredAnimations[i].animation.play(animation);
  }
}
--------------------------------------------------------------------------------


Function 14: resume
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function resume(nowTime) {
  var elapsedTime = nowTime - initTime;
  var i;
  for (i = 0; i < len; i += 1) {
    registeredAnimations[i].animation.advanceTime(elapsedTime);
  }
  initTime = nowTime;
  if (playingAnimationsNum && !_isFrozen) {
    requestAnimationFrame(resume);
  } else {
    _stopped = true;
  }
}
--------------------------------------------------------------------------------


Function 15: pause
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function pause(animation) {
  var i;
  for (i = 0; i < len; i += 1) {
    registeredAnimations[i].animation.pause(animation);
  }
}
--------------------------------------------------------------------------------


Function 16: goToAndStop
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function goToAndStop(value, isFrame, animation) {
  var i;
  for (i = 0; i < len; i += 1) {
    registeredAnimations[i].animation.goToAndStop(value, isFrame, animation);
  }
}
--------------------------------------------------------------------------------


Function 17: stop
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function stop(animation) {
  var i;
  for (i = 0; i < len; i += 1) {
    registeredAnimations[i].animation.stop(animation);
  }
}
--------------------------------------------------------------------------------


Function 18: togglePause
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function togglePause(animation) {
  var i;
  for (i = 0; i < len; i += 1) {
    registeredAnimations[i].animation.togglePause(animation);
  }
}
--------------------------------------------------------------------------------


Function 19: destroy
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function destroy(animation) {
  var i;
  for (i = (len - 1); i >= 0; i -= 1) {
    registeredAnimations[i].animation.destroy(animation);
  }
}
--------------------------------------------------------------------------------


Function 20: resize
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function resize() {
  var i;
  for (i = 0; i < len; i += 1) {
    registeredAnimations[i].animation.resize();
  }
}
--------------------------------------------------------------------------------


Function 21: activate
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function activate() {
  if (!_isFrozen && playingAnimationsNum) {
    if (_stopped) {
      requestAnimationFrame(first);
      _stopped = false;
    }
  }
}
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:43:30.406Z
Question Type: select-all
Function: stop
Function Size: 197 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: stop (JavaScript)\n// Stops all registered animations.\n\nfunction stop(animation) {\n  var i;\n  for (i = 0; i < len; i += 1) {\n    registeredAnimations[i].animation.stop(animation);\n  }\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:43:32.147Z
Question Type: function-variant
Function: pause
Function Size: 201 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: pause (JavaScript)\n// Pauses all registered animations.\n\nfunction pause(animation) {\n  var i;\n  for (i = 0; i < len; i += 1) {\n    registeredAnimations[i].animation.pause(animation);\n  }\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:43:38.983Z
Question Type: true-false
Function: lookAt
Function Size: 384 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: lookAt (JavaScript)\n// Calculates the yaw and pitch angles between two elements.\n\nfunction lookAt(elem1, elem2) {\n  var fVec = [elem2[0] - elem1[0], elem2[1] - elem1[1], elem2[2] - elem1[2]];\n  var pitch = Math.atan2(fVec[0], Math.sqrt(fVec[1] * fVec[1] + fVec[2] * fVec[2])) / degToRads
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:43:42.082Z
Question Type: order-sequence
Function: nearestKey
Function Size: 1188 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: nearestKey (JavaScript)\n// Finds the nearest keyframe index and time for a given time.\n\nfunction nearestKey(time) {\n  var iKey;\n  var lenKey = data.k.length;\n  var index;\n  var keyTime;\n  if (!data.k.length || typeof (data.k[0]) === 'number') {\n    index = 0;\n    keyTime = 0;\n  } else {
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:43:42.488Z
Question Type: select-all
Function: resize
Function Size: 187 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: resize (JavaScript)\n// Resizes all registered animations.\n\nfunction resize() {\n  var i;\n  for (i = 0; i < len; i += 1) {\n    registeredAnimations[i].animation.resize();\n  }\n}
================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-14T00:43:46.298Z
File: [8 files: MavenWrapperDownloader.java, serviceWorker.js, 8 are considered localhost for IPv4., ListEmployeeComponent.jsx, SpringbootBackendApplicationTests.java, FooterComponent.jsx, App.js, CreateEmployeeComponent.jsx]
Functions Extracted: 4


Function 1: deleteEmployee
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
deleteEmployee(id){
        EmployeeService.deleteEmployee(id).then( res => {
            this.setState({employees: this.state.employees.filter(employee => employee.id !== id)});
        });
    }
--------------------------------------------------------------------------------


Function 2: componentDidMount
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
componentDidMount(){
        EmployeeService.getEmployees().then((res) => {
            this.setState({ employees: res.data});
        });
    }
--------------------------------------------------------------------------------


Function 3: render
Language: JavaScript
Lines: 30
Full Code:
--------------------------------------------------------------------------------
render() {
        return (
            <div>
                 <h2 className="text-center">Employees List</h2>
                 <div className = "row">
                    <button className="btn btn-primary" onClick={this.addEmployee}> Add Employee</button>
                 </div>
                 <br></br>
                 <div className = "row">
                        <table className = "table table-striped table-bordered">
                            <thead>
                                <tr>
                                    <th> Employee First Name</th>
                                    <th> Employee Last Name</th>
                                    <th> Employee Email Id</th>
                                    <th> Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                {
                                    this.state.employees.map(
                                        employee => 
                                        <tr key = {employee.id}>
                                             <td> { employee.firstName} </td>   
                                             <td> {employee.lastName}</td>
                                             <td> {employee.emailId}</td>
                                             <td>
                                                 <button onClick={ () => this.editEmployee(employee.id)} className="btn btn-info">Update </button>
                                                 <button style={{marginLeft: "10px"}} onClick={ () => this.deleteEmployee(employee.id)} className="btn btn-danger">Delete </button>
                                                 <button style={{marginLeft: "10px"}} onClick={ () => this.viewEmployee(employee.id)} className="btn btn-info">View </button>
                                             </td>
                                        </tr>
                                    )
                                }
                            </tbody>
                        </table>
                 </div>
            </div>
        )
    }
--------------------------------------------------------------------------------


Function 4: App
Language: JavaScript
Lines: 20
Full Code:
--------------------------------------------------------------------------------
function App() {
  return (
    <div>
        <Router>
              <HeaderComponent />
                <div className="container">
                    <Switch> 
                          <Route path = "/" exact component = {ListEmployeeComponent}></Route>
                          <Route path = "/employees" component = {ListEmployeeComponent}></Route>
                          <Route path = "/add-employee/:id" component = {CreateEmployeeComponent}></Route>
                          <Route path = "/view-employee/:id" component = {ViewEmployeeComponent}></Route>
                          {/* <Route path = "/update-employee/:id" component = {UpdateEmployeeComponent}></Route> */}
                    </Switch>
                </div>
              <FooterComponent />
        </Router>
    </div>
  );
}
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:43:46.410Z
Question Type: multiple-choice
Function: setDirection
Function Size: 256 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: setDirection (JavaScript)\n// Sets the playback direction of all registered animations.\n\nfunction setDirection(val, animation) {\n  var i;\n  for (i = 0; i < len; i += 1) {\n    registeredAnimations[i].animation.setDirection(val, animation);\n  }\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:43:52.714Z
Question Type: function-variant
Function: activate
Function Size: 244 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: activate (JavaScript)\n// Activates the animation playback if not frozen.\n\nfunction activate() {\n  if (!_isFrozen && playingAnimationsNum) {\n    if (_stopped) {\n      requestAnimationFrame(first);\n      _stopped = false;\n    }\n  }\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:43:53.605Z
Question Type: multiple-choice
Function: componentDidMount
Function Size: 254 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches employees from the service when the component mounts.\n\ncomponentDidMount(){\n        EmployeeService.getEmployees().then((res) => {\n            this.setState({ employees: res.data});\n        });\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:43:54.207Z
Question Type: function-variant
Function: key
Function Size: 632 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: key (JavaScript)\n// Retrieves the keyframe data for a given index.\n\nfunction key(ind) {\n  var obKey;\n  var iKey;\n  var lenKey;\n  if (!data.k.length || typeof (data.k[0]) === 'number') {\n    throw new Error('The property has no keyframe at index ' + ind);\n  }\n  ind -= 1;\n  obKey = {\n    
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:43:54.286Z
Question Type: select-all
Function: timeToFrames
Function Size: 252 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: timeToFrames (JavaScript)\n// Converts time to frame count based on frames per second.\n\nfunction timeToFrames(t, fps) {\n  if (!t && t !== 0) {\n    t = time;\n  }\n  if (!fps) {\n    fps = elem.comp.globalData.frameRate;\n  }\n  return t * fps;\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:43:54.865Z
Question Type: select-all
Function: deleteEmployee
Function Size: 290 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: deleteEmployee (JavaScript)\n// Deletes an employee by ID and updates the state.\n\ndeleteEmployee(id){\n        EmployeeService.deleteEmployee(id).then( res => {\n            this.setState({employees: this.state.employees.filter(employee => employee.id !== id)});\n        });\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:43:59.265Z
Question Type: function-variant
Function: posterizeTime
Function Size: 274 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: posterizeTime (JavaScript)\n// Sets the time to be a multiple of the specified frames per second.\n\nfunction posterizeTime(framesPerSecond) {\n  time = framesPerSecond === 0 ? 0 : Math.floor(time * framesPerSecond) / framesPerSecond;\n  value = valueAtTime(time);\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:43:59.350Z
Question Type: order-sequence
Function: App
Function Size: 892 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: App (JavaScript)\n// Main application component that sets up routing.\n\nfunction App() {\n  return (\n    <div>\n        <Router>\n              <HeaderComponent />\n                <div className="container">\n                    <Switch> \n                          <Route path = "/" exact comp
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:43:59.881Z
Question Type: select-all
Function: framesToTime
Function Size: 213 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: framesToTime (JavaScript)\n// Converts frame count to time based on frames per second.\n\nfunction framesToTime(fr, fps) {\n  if (!fps) {\n    fps = elem.comp.globalData.frameRate;\n  }\n  return fr / fps;\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:44:02.365Z
Question Type: function-variant
Function: deleteEmployee
Function Size: 290 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: deleteEmployee (JavaScript)\n// Deletes an employee by ID and updates the state.\n\ndeleteEmployee(id){\n        EmployeeService.deleteEmployee(id).then( res => {\n            this.setState({employees: this.state.employees.filter(employee => employee.id !== id)});\n        });\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:44:02.590Z
Question Type: select-all
Function: componentDidMount
Function Size: 254 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches employees from the service when the component mounts.\n\ncomponentDidMount(){\n        EmployeeService.getEmployees().then((res) => {\n            this.setState({ employees: res.data});\n        });\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:44:02.996Z
Question Type: select-all
Function: togglePause
Function Size: 236 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: togglePause (JavaScript)\n// Toggles pause state for all registered animations.\n\nfunction togglePause(animation) {\n  var i;\n  for (i = 0; i < len; i += 1) {\n    registeredAnimations[i].animation.togglePause(animation);\n  }\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:44:04.277Z
Question Type: true-false
Function: deleteEmployee
Function Size: 290 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: deleteEmployee (JavaScript)\n// Deletes an employee by ID and updates the state.\n\ndeleteEmployee(id){\n        EmployeeService.deleteEmployee(id).then( res => {\n            this.setState({employees: this.state.employees.filter(employee => employee.id !== id)});\n        });\n    }
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760396938441
Repository: Unknown
Total Questions Generated: 8
Total Chunks Processed: 4
Ended: 2025-10-14T00:44:04.355Z
================================================================================


--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:44:04.404Z
Question Type: true-false
Function: destroy
Function Size: 216 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: destroy (JavaScript)\n// Destroys all registered animations.\n\nfunction destroy(animation) {\n  var i;\n  for (i = (len - 1); i >= 0; i -= 1) {\n    registeredAnimations[i].animation.destroy(animation);\n  }\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:44:08.749Z
Question Type: order-sequence
Function: registerAnimation
Function Size: 533 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: registerAnimation (JavaScript)\n// Registers a new animation and returns the animation item.\n\nfunction registerAnimation(element, animationData) {\n  if (!element) {\n    return null;\n  }\n  var i = 0;\n  while (i < len) {\n    if (registeredAnimations[i].elem === element && registeredAnimati
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:44:10.053Z
Question Type: true-false
Function: deleteEmployee
Function Size: 290 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: deleteEmployee (JavaScript)\n// Deletes an employee by ID and updates the state.\n\ndeleteEmployee(id){\n        EmployeeService.deleteEmployee(id).then( res => {\n            this.setState({employees: this.state.employees.filter(employee => employee.id !== id)});\n        });\n    }
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760396938441
Repository: Unknown
Total Questions Generated: 15
Total Chunks Processed: 21
Ended: 2025-10-14T00:44:12.231Z
================================================================================


--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:44:12.886Z
Question Type: select-all
Function: deleteEmployee
Function Size: 290 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: deleteEmployee (JavaScript)\n// Deletes an employee by ID and updates the state.\n\ndeleteEmployee(id){\n        EmployeeService.deleteEmployee(id).then( res => {\n            this.setState({employees: this.state.employees.filter(employee => employee.id !== id)});\n        });\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:44:18.094Z
Question Type: function-variant
Function: componentDidMount
Function Size: 254 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches employees from the service when the component mounts.\n\ncomponentDidMount(){\n        EmployeeService.getEmployees().then((res) => {\n            this.setState({ employees: res.data});\n        });\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:44:18.322Z
Question Type: order-sequence
Function: componentDidMount
Function Size: 254 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches employees from the service when the component mounts.\n\ncomponentDidMount(){\n        EmployeeService.getEmployees().then((res) => {\n            this.setState({ employees: res.data});\n        });\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:44:22.906Z
Question Type: select-all
Function: App
Function Size: 892 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: App (JavaScript)\n// Main application component that sets up routing.\n\nfunction App() {\n  return (\n    <div>\n        <Router>\n              <HeaderComponent />\n                <div className="container">\n                    <Switch> \n                          <Route path = "/" exact comp
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:44:29.101Z
Question Type: true-false
Function: App
Function Size: 892 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: App (JavaScript)\n// Main application component that sets up routing.\n\nfunction App() {\n  return (\n    <div>\n        <Router>\n              <HeaderComponent />\n                <div className="container">\n                    <Switch> \n                          <Route path = "/" exact comp
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:44:29.881Z
Question Type: order-sequence
Function: render
Function Size: 2239 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: render (JavaScript)\n// Renders the employee list and action buttons.\n\nrender() {\n        return (\n            <div>\n                 <h2 className="text-center">Employees List</h2>\n                 <div className = "row">\n                    <button className="btn btn-primary" onClick={
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:44:30.888Z
Question Type: function-variant
Function: App
Function Size: 892 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: App (JavaScript)\n// Main application component that sets up routing.\n\nfunction App() {\n  return (\n    <div>\n        <Router>\n              <HeaderComponent />\n                <div className="container">\n                    <Switch> \n                          <Route path = "/" exact comp
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760396938441
Repository: Unknown
Total Questions Generated: 8
Total Chunks Processed: 4
Ended: 2025-10-14T00:44:30.962Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-14T00:44:58.331Z
File: [2 files: ExpressionManager.js, module.js]
Functions Extracted: 7


Function 1: sum
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function sum(a, b) {
    var tOfA = typeof a;
    var tOfB = typeof b;
    if ((isNumerable(tOfA, a) && isNumerable(tOfB, b)) || tOfA === 'string' || tOfB === 'string') {
        return a + b;
    }
    if ($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)) {
        a = a.slice(0);
        a[0] += b;
        return a;
    }
    if (isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)) {
        b = b.slice(0);
        b[0] = a + b[0];
        return b;
    }
    if ($bm_isInstanceOfArray(a) && $bm_isInstanceOfArray(b)) {
        var i = 0;
        var lenA = a.length;
        var lenB = b.length;
        var retArr = [];
        while (i < lenA || i < lenB) {
            if ((typeof a[i] === 'number' || a[i] instanceof Number) && (typeof b[i] === 'number' || b[i] instanceof Number)) {
                retArr[i] = a[i] + b[i];
            } else {
                retArr[i] = b[i] === undefined ? a[i] : a[i] || b[i];
            }
            i += 1;
        }
        return retArr;
    }
    return 0;
}
--------------------------------------------------------------------------------


Function 2: sub
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function sub(a, b) {
    var tOfA = typeof a;
    var tOfB = typeof b;
    if (isNumerable(tOfA, a) && isNumerable(tOfB, b)) {
        if (tOfA === 'string') {
            a = parseInt(a, 10);
        }
        if (tOfB === 'string') {
            b = parseInt(b, 10);
        }
        return a - b;
    }
    if ($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)) {
        a = a.slice(0);
        a[0] -= b;
        return a;
    }
    if (isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)) {
        b = b.slice(0);
        b[0] = a - b[0];
        return b;
    }
    if ($bm_isInstanceOfArray(a) && $bm_isInstanceOfArray(b)) {
        var i = 0;
        var lenA = a.length;
        var lenB = b.length;
        var retArr = [];
        while (i < lenA || i < lenB) {
            if ((typeof a[i] === 'number' || a[i] instanceof Number) && (typeof b[i] === 'number' || b[i] instanceof Number)) {
                retArr[i] = a[i] - b[i];
            } else {
                retArr[i] = b[i] === undefined ? a[i] : a[i] || b[i];
            }
            i += 1;
        }
        return retArr;
    }
    return 0;
}
--------------------------------------------------------------------------------


Function 3: mul
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function mul(a, b) {
    var tOfA = typeof a;
    var tOfB = typeof b;
    var arr;
    if (isNumerable(tOfA, a) && isNumerable(tOfB, b)) {
        return a * b;
    }

    var i;
    var len;
    if ($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)) {
        len = a.length;
        arr = createTypedArray('float32', len);
        for (i = 0; i < len; i += 1) {
            arr[i] = a[i] * b;
        }
        return arr;
    }
    if (isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)) {
        len = b.length;
        arr = createTypedArray('float32', len);
        for (i = 0; i < len; i += 1) {
            arr[i] = a * b[i];
        }
        return arr;
    }
    return 0;
}
--------------------------------------------------------------------------------


Function 4: div
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function div(a, b) {
    var tOfA = typeof a;
    var tOfB = typeof b;
    var arr;
    if (isNumerable(tOfA, a) && isNumerable(tOfB, b)) {
        return a / b;
    }
    var i;
    var len;
    if ($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)) {
        len = a.length;
        arr = createTypedArray('float32', len);
        for (i = 0; i < len; i += 1) {
            arr[i] = a[i] / b;
        }
        return arr;
    }
    if (isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)) {
        len = b.length;
        arr = createTypedArray('float32', len);
        for (i = 0; i < len; i += 1) {
            arr[i] = a / b[i];
        }
        return arr;
    }
    return 0;
}
--------------------------------------------------------------------------------


Function 5: clamp
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function clamp(num, min, max) {
    if (min > max) {
        var mm = max;
        max = min;
        min = mm;
    }
    return Math.min(Math.max(num, min), max);
}
--------------------------------------------------------------------------------


Function 6: length
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function length(arr1, arr2) {
    if (typeof arr1 === 'number' || arr1 instanceof Number) {
        arr2 = arr2 || 0;
        return Math.abs(arr1 - arr2);
    }
    if (!arr2) {
        arr2 = helperLengthArray;
    }
    var i;
    var len = Math.min(arr1.length, arr2.length);
    var addedLength = 0;
    for (i = 0; i < len; i += 1) {
        addedLength += Math.pow(arr2[i] - arr1[i], 2);
    }
    return Math.sqrt(addedLength);
}
--------------------------------------------------------------------------------


Function 7: setQuality
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function setQuality(value) {
    if (typeof value === 'string') {
        switch (value) {
            case 'high':
                setDefaultCurveSegments(200);
                break;
            default:
            case 'medium':
                setDefaultCurveSegments(50);
                break;
            case 'low':
                setDefaultCurveSegments(10);
                break;
        }
    } else if (!isNaN(value) && value > 1) {
        setDefaultCurveSegments(value);
    }
    if (getDefaultCurveSegments() >= 50) {
        roundValues(false);
    } else {
        roundValues(true);
    }
}
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:45:04.853Z
Question Type: select-all
Function: clamp
Function Size: 252 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: clamp (JavaScript)\n// Restricts a number to be within a specified range.\n\nfunction clamp(num, min, max) {\n    if (min > max) {\n        var mm = max;\n        max = min;\n        min = mm;\n    }\n    return Math.min(Math.max(num, min), max);\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:45:07.208Z
Question Type: multiple-choice
Function: length
Function Size: 538 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: length (JavaScript)\n// Calculates the Euclidean distance between two points or arrays.\n\nfunction length(arr1, arr2) {\n    if (typeof arr1 === 'number' || arr1 instanceof Number) {\n        arr2 = arr2 || 0;\n        return Math.abs(arr1 - arr2);\n    }\n    if (!arr2) {\n        arr2 = helpe
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:45:18.714Z
Question Type: select-all
Function: sum
Function Size: 1121 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: sum (JavaScript)\n// Calculates the sum of two values, handling various types including arrays.\n\nfunction sum(a, b) {\n    var tOfA = typeof a;\n    var tOfB = typeof b;\n    if ((isNumerable(tOfA, a) && isNumerable(tOfB, b)) || tOfA === 'string' || tOfB === 'string') {\n        return a + b
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:45:21.769Z
Question Type: select-all
Function: length
Function Size: 538 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: length (JavaScript)\n// Calculates the Euclidean distance between two points or arrays.\n\nfunction length(arr1, arr2) {\n    if (typeof arr1 === 'number' || arr1 instanceof Number) {\n        arr2 = arr2 || 0;\n        return Math.abs(arr1 - arr2);\n    }\n    if (!arr2) {\n        arr2 = helpe
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:45:25.041Z
Question Type: function-variant
Function: length
Function Size: 538 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: length (JavaScript)\n// Calculates the Euclidean distance between two points or arrays.\n\nfunction length(arr1, arr2) {\n    if (typeof arr1 === 'number' || arr1 instanceof Number) {\n        arr2 = arr2 || 0;\n        return Math.abs(arr1 - arr2);\n    }\n    if (!arr2) {\n        arr2 = helpe
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:45:32.971Z
Question Type: function-variant
Function: div
Function Size: 773 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: div (JavaScript)\n// Divides two values, supporting both numbers and arrays.\n\nfunction div(a, b) {\n    var tOfA = typeof a;\n    var tOfB = typeof b;\n    var arr;\n    if (isNumerable(tOfA, a) && isNumerable(tOfB, b)) {\n        return a / b;\n    }\n    var i;\n    var len;\n    if ($bm_isInst
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:45:39.787Z
Question Type: order-sequence
Function: clamp
Function Size: 252 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: clamp (JavaScript)\n// Restricts a number to be within a specified range.\n\nfunction clamp(num, min, max) {\n    if (min > max) {\n        var mm = max;\n        max = min;\n        min = mm;\n    }\n    return Math.min(Math.max(num, min), max);\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T00:45:48.656Z
Question Type: true-false
Function: sub
Function Size: 1243 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: sub (JavaScript)\n// Calculates the difference between two values, supporting various types including arrays.\n\nfunction sub(a, b) {\n    var tOfA = typeof a;\n    var tOfB = typeof b;\n    if (isNumerable(tOfA, a) && isNumerable(tOfB, b)) {\n        if (tOfA === 'string') {\n            a = p
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760396938441
Repository: Unknown
Total Questions Generated: 10
Total Chunks Processed: 7
Ended: 2025-10-14T00:45:48.966Z
================================================================================

