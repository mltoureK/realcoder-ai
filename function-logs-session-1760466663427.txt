=== FUNCTION EXTRACTION & QUESTION GENERATION LOG ===
Session ID: session-1760466663427
Started: 2025-10-14T18:31:03.427Z


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-14T18:31:03.428Z
File: [8 files: SpringbootBackendApplicationTests.java, get employee by id rest api, Ignore ..., SpringbootBackendApplication.java, EmployeeRepository.java, Employee.java, If the maven-wrapper.properties exists, read it and check if it contains a custom, create employee rest api]
Functions Extracted: 2


Function 1: getEmployeeById
Language: Java
Lines: 6
Full Code:
--------------------------------------------------------------------------------
@GetMapping("/employees/{id}")
	public ResponseEntity<Employee> getEmployeeById(@PathVariable Long id) {
		Employee employee = employeeRepository.findById(id)
			.orElseThrow(() -> new ResourceNotFoundException("Employee not exist with id :" + id));
		return ResponseEntity.ok(employee);
	}
--------------------------------------------------------------------------------


Function 2: downloadFileFromURL
Language: Java
Lines: 17
Full Code:
--------------------------------------------------------------------------------
private static void downloadFileFromURL(String urlString, File destination) throws Exception {
	if (System.getenv("MVNW_USERNAME") != null && System.getenv("MVNW_PASSWORD") != null) {
		String username = System.getenv("MVNW_USERNAME");
		char[] password = System.getenv("MVNW_PASSWORD").toCharArray();
		Authenticator.setDefault(new Authenticator() {
			@Override
			protected PasswordAuthentication getPasswordAuthentication() {
				return new PasswordAuthentication(username, password);
			}
		});
	}
	URL website = new URL(urlString);
	ReadableByteChannel rbc;
	rbc = Channels.newChannel(website.openStream());
	FileOutputStream fos = new FileOutputStream(destination);
	fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
	fos.close();
	rbc.close();
}
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T18:31:12.117Z
Question Type: multiple-choice
Function: getEmployeeById
Function Size: 365 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: getEmployeeById (Java)\n// Retrieves an employee by their ID.\n\n@GetMapping("/employees/{id}")\n	public ResponseEntity<Employee> getEmployeeById(@PathVariable Long id) {\n		Employee employee = employeeRepository.findById(id)\n			.orElseThrow(() -> new ResourceNotFoundException("Employee not 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T18:31:13.003Z
Question Type: select-all
Function: getEmployeeById
Function Size: 365 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getEmployeeById (Java)\n// Retrieves an employee by their ID.\n\n@GetMapping("/employees/{id}")\n	public ResponseEntity<Employee> getEmployeeById(@PathVariable Long id) {\n		Employee employee = employeeRepository.findById(id)\n			.orElseThrow(() -> new ResourceNotFoundException("Employee not 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T18:31:18.339Z
Question Type: order-sequence
Function: downloadFileFromURL
Function Size: 858 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: downloadFileFromURL (Java)\n// Downloads a file from a specified URL to a destination.\n\nprivate static void downloadFileFromURL(String urlString, File destination) throws Exception {\n	if (System.getenv("MVNW_USERNAME") != null && System.getenv("MVNW_PASSWORD") != null) {\n		String usernam
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T18:31:24.441Z
Question Type: true-false
Function: getEmployeeById
Function Size: 365 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: getEmployeeById (Java)\n// Retrieves an employee by their ID.\n\n@GetMapping("/employees/{id}")\n	public ResponseEntity<Employee> getEmployeeById(@PathVariable Long id) {\n		Employee employee = employeeRepository.findById(id)\n			.orElseThrow(() -> new ResourceNotFoundException("Employee not 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T18:31:27.587Z
Question Type: select-all
Function: getEmployeeById
Function Size: 365 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getEmployeeById (Java)\n// Retrieves an employee by their ID.\n\n@GetMapping("/employees/{id}")\n	public ResponseEntity<Employee> getEmployeeById(@PathVariable Long id) {\n		Employee employee = employeeRepository.findById(id)\n			.orElseThrow(() -> new ResourceNotFoundException("Employee not 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T18:31:28.899Z
Question Type: function-variant
Function: downloadFileFromURL
Function Size: 858 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: downloadFileFromURL (Java)\n// Downloads a file from a specified URL to a destination.\n\nprivate static void downloadFileFromURL(String urlString, File destination) throws Exception {\n	if (System.getenv("MVNW_USERNAME") != null && System.getenv("MVNW_PASSWORD") != null) {\n		String usernam
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T18:31:29.320Z
Question Type: order-sequence
Function: getEmployeeById
Function Size: 365 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getEmployeeById (Java)\n// Retrieves an employee by their ID.\n\n@GetMapping("/employees/{id}")\n	public ResponseEntity<Employee> getEmployeeById(@PathVariable Long id) {\n		Employee employee = employeeRepository.findById(id)\n			.orElseThrow(() -> new ResourceNotFoundException("Employee not 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T18:31:35.542Z
Question Type: select-all
Function: downloadFileFromURL
Function Size: 858 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: downloadFileFromURL (Java)\n// Downloads a file from a specified URL to a destination.\n\nprivate static void downloadFileFromURL(String urlString, File destination) throws Exception {\n	if (System.getenv("MVNW_USERNAME") != null && System.getenv("MVNW_PASSWORD") != null) {\n		String usernam
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T18:31:38.678Z
Question Type: select-all
Function: getEmployeeById
Function Size: 365 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getEmployeeById (Java)\n// Retrieves an employee by their ID.\n\n@GetMapping("/employees/{id}")\n	public ResponseEntity<Employee> getEmployeeById(@PathVariable Long id) {\n		Employee employee = employeeRepository.findById(id)\n			.orElseThrow(() -> new ResourceNotFoundException("Employee not 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T18:31:44.267Z
Question Type: function-variant
Function: getEmployeeById
Function Size: 365 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getEmployeeById (Java)\n// Retrieves an employee by their ID.\n\n@GetMapping("/employees/{id}")\n	public ResponseEntity<Employee> getEmployeeById(@PathVariable Long id) {\n		Employee employee = employeeRepository.findById(id)\n			.orElseThrow(() -> new ResourceNotFoundException("Employee not 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T18:31:53.234Z
Question Type: function-variant
Function: getEmployeeById
Function Size: 365 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: getEmployeeById (Java)\n// Retrieves an employee by their ID.\n\n@GetMapping("/employees/{id}")\n	public ResponseEntity<Employee> getEmployeeById(@PathVariable Long id) {\n		Employee employee = employeeRepository.findById(id)\n			.orElseThrow(() -> new ResourceNotFoundException("Employee not 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T18:31:56.258Z
Question Type: select-all
Function: downloadFileFromURL
Function Size: 858 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: downloadFileFromURL (Java)\n// Downloads a file from a specified URL to a destination.\n\nprivate static void downloadFileFromURL(String urlString, File destination) throws Exception {\n	if (System.getenv("MVNW_USERNAME") != null && System.getenv("MVNW_PASSWORD") != null) {\n		String usernam
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T18:31:57.609Z
Question Type: function-variant
Function: downloadFileFromURL
Function Size: 858 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: downloadFileFromURL (Java)\n// Downloads a file from a specified URL to a destination.\n\nprivate static void downloadFileFromURL(String urlString, File destination) throws Exception {\n	if (System.getenv("MVNW_USERNAME") != null && System.getenv("MVNW_PASSWORD") != null) {\n		String usernam
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T18:32:02.693Z
Question Type: true-false
Function: downloadFileFromURL
Function Size: 858 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: downloadFileFromURL (Java)\n// Downloads a file from a specified URL to a destination.\n\nprivate static void downloadFileFromURL(String urlString, File destination) throws Exception {\n	if (System.getenv("MVNW_USERNAME") != null && System.getenv("MVNW_PASSWORD") != null) {\n		String usernam
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760466663427
Repository: Unknown
Total Questions Generated: 10
Total Chunks Processed: 2
Ended: 2025-10-14T18:32:05.566Z
================================================================================


--- QUESTION GENERATION ---
Timestamp: 2025-10-14T18:32:12.433Z
Question Type: true-false
Function: getEmployeeById
Function Size: 365 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: getEmployeeById (Java)\n// Retrieves an employee by their ID.\n\n@GetMapping("/employees/{id}")\n	public ResponseEntity<Employee> getEmployeeById(@PathVariable Long id) {\n		Employee employee = employeeRepository.findById(id)\n			.orElseThrow(() -> new ResourceNotFoundException("Employee not 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T18:32:16.527Z
Question Type: select-all
Function: downloadFileFromURL
Function Size: 858 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: downloadFileFromURL (Java)\n// Downloads a file from a specified URL to a destination.\n\nprivate static void downloadFileFromURL(String urlString, File destination) throws Exception {\n	if (System.getenv("MVNW_USERNAME") != null && System.getenv("MVNW_PASSWORD") != null) {\n		String usernam
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T18:32:24.210Z
Question Type: function-variant
Function: getEmployeeById
Function Size: 365 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getEmployeeById (Java)\n// Retrieves an employee by their ID.\n\n@GetMapping("/employees/{id}")\n	public ResponseEntity<Employee> getEmployeeById(@PathVariable Long id) {\n		Employee employee = employeeRepository.findById(id)\n			.orElseThrow(() -> new ResourceNotFoundException("Employee not 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T18:32:24.307Z
Question Type: true-false
Function: downloadFileFromURL
Function Size: 858 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: downloadFileFromURL (Java)\n// Downloads a file from a specified URL to a destination.\n\nprivate static void downloadFileFromURL(String urlString, File destination) throws Exception {\n	if (System.getenv("MVNW_USERNAME") != null && System.getenv("MVNW_PASSWORD") != null) {\n		String usernam
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T18:32:31.286Z
Question Type: function-variant
Function: downloadFileFromURL
Function Size: 858 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: downloadFileFromURL (Java)\n// Downloads a file from a specified URL to a destination.\n\nprivate static void downloadFileFromURL(String urlString, File destination) throws Exception {\n	if (System.getenv("MVNW_USERNAME") != null && System.getenv("MVNW_PASSWORD") != null) {\n		String usernam
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T18:32:31.790Z
Question Type: function-variant
Function: getEmployeeById
Function Size: 365 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getEmployeeById (Java)\n// Retrieves an employee by their ID.\n\n@GetMapping("/employees/{id}")\n	public ResponseEntity<Employee> getEmployeeById(@PathVariable Long id) {\n		Employee employee = employeeRepository.findById(id)\n			.orElseThrow(() -> new ResourceNotFoundException("Employee not 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T18:32:38.339Z
Question Type: order-sequence
Function: downloadFileFromURL
Function Size: 858 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: downloadFileFromURL (Java)\n// Downloads a file from a specified URL to a destination.\n\nprivate static void downloadFileFromURL(String urlString, File destination) throws Exception {\n	if (System.getenv("MVNW_USERNAME") != null && System.getenv("MVNW_PASSWORD") != null) {\n		String usernam
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T18:32:42.395Z
Question Type: order-sequence
Function: getEmployeeById
Function Size: 365 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getEmployeeById (Java)\n// Retrieves an employee by their ID.\n\n@GetMapping("/employees/{id}")\n	public ResponseEntity<Employee> getEmployeeById(@PathVariable Long id) {\n		Employee employee = employeeRepository.findById(id)\n			.orElseThrow(() -> new ResourceNotFoundException("Employee not 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T18:32:44.286Z
Question Type: select-all
Function: downloadFileFromURL
Function Size: 858 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: downloadFileFromURL (Java)\n// Downloads a file from a specified URL to a destination.\n\nprivate static void downloadFileFromURL(String urlString, File destination) throws Exception {\n	if (System.getenv("MVNW_USERNAME") != null && System.getenv("MVNW_PASSWORD") != null) {\n		String usernam
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760466663427
Repository: Unknown
Total Questions Generated: 7
Total Chunks Processed: 2
Ended: 2025-10-14T18:32:44.323Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-14T20:08:09.931Z
File: [3 files: Passed an ad unit, DEPS, json2.js]
Functions Extracted: 1


Function 1: aggregate
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
aggregate: function() {
		var points = $();
		$.each(contexts, function(i, c) {
			$.each(c.waypoints, function(i, e) {
				points = points.add(e.element);
			});
		});
		return points;
	}
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:08:16.525Z
Question Type: true-false
Function: aggregate
Function Size: 302 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: aggregate (JavaScript)\n// Aggregates waypoints from different contexts into a single jQuery object.\n\naggregate: function() {\n		var points = $();\n		$.each(contexts, function(i, c) {\n			$.each(c.waypoints, function(i, e) {\n				points = points.add(e.element);\n			});\n		});\n		return points;\n
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:08:25.592Z
Question Type: function-variant
Function: aggregate
Function Size: 302 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: aggregate (JavaScript)\n// Aggregates waypoints from different contexts into a single jQuery object.\n\naggregate: function() {\n		var points = $();\n		$.each(contexts, function(i, c) {\n			$.each(c.waypoints, function(i, e) {\n				points = points.add(e.element);\n			});\n		});\n		return points;\n
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760466663427
Repository: Unknown
Total Questions Generated: 2
Total Chunks Processed: 1
Ended: 2025-10-14T20:08:25.639Z
================================================================================


--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:08:34.860Z
Question Type: select-all
Function: aggregate
Function Size: 302 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: aggregate (JavaScript)\n// Aggregates waypoints from different contexts into a single jQuery object.\n\naggregate: function() {\n		var points = $();\n		$.each(contexts, function(i, c) {\n			$.each(c.waypoints, function(i, e) {\n				points = points.add(e.element);\n			});\n		});\n		return points;\n
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:08:39.707Z
Question Type: function-variant
Function: aggregate
Function Size: 302 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: aggregate (JavaScript)\n// Aggregates waypoints from different contexts into a single jQuery object.\n\naggregate: function() {\n		var points = $();\n		$.each(contexts, function(i, c) {\n			$.each(c.waypoints, function(i, e) {\n				points = points.add(e.element);\n			});\n		});\n		return points;\n
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:08:40.950Z
Question Type: function-variant
Function: aggregate
Function Size: 302 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: aggregate (JavaScript)\n// Aggregates waypoints from different contexts into a single jQuery object.\n\naggregate: function() {\n		var points = $();\n		$.each(contexts, function(i, c) {\n			$.each(c.waypoints, function(i, e) {\n				points = points.add(e.element);\n			});\n		});\n		return points;\n
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:08:42.182Z
Question Type: function-variant
Function: aggregate
Function Size: 302 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: aggregate (JavaScript)\n// Aggregates waypoints from different contexts into a single jQuery object.\n\naggregate: function() {\n		var points = $();\n		$.each(contexts, function(i, c) {\n			$.each(c.waypoints, function(i, e) {\n				points = points.add(e.element);\n			});\n		});\n		return points;\n
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:08:44.796Z
Question Type: order-sequence
Function: aggregate
Function Size: 302 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: aggregate (JavaScript)\n// Aggregates waypoints from different contexts into a single jQuery object.\n\naggregate: function() {\n		var points = $();\n		$.each(contexts, function(i, c) {\n			$.each(c.waypoints, function(i, e) {\n				points = points.add(e.element);\n			});\n		});\n		return points;\n
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:08:51.396Z
Question Type: order-sequence
Function: aggregate
Function Size: 302 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: aggregate (JavaScript)\n// Aggregates waypoints from different contexts into a single jQuery object.\n\naggregate: function() {\n		var points = $();\n		$.each(contexts, function(i, c) {\n			$.each(c.waypoints, function(i, e) {\n				points = points.add(e.element);\n			});\n		});\n		return points;\n
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:08:54.086Z
Question Type: select-all
Function: aggregate
Function Size: 302 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: aggregate (JavaScript)\n// Aggregates waypoints from different contexts into a single jQuery object.\n\naggregate: function() {\n		var points = $();\n		$.each(contexts, function(i, c) {\n			$.each(c.waypoints, function(i, e) {\n				points = points.add(e.element);\n			});\n		});\n		return points;\n
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:08:54.697Z
Question Type: select-all
Function: aggregate
Function Size: 302 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: aggregate (JavaScript)\n// Aggregates waypoints from different contexts into a single jQuery object.\n\naggregate: function() {\n		var points = $();\n		$.each(contexts, function(i, c) {\n			$.each(c.waypoints, function(i, e) {\n				points = points.add(e.element);\n			});\n		});\n		return points;\n
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:08:56.852Z
Question Type: true-false
Function: aggregate
Function Size: 302 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: aggregate (JavaScript)\n// Aggregates waypoints from different contexts into a single jQuery object.\n\naggregate: function() {\n		var points = $();\n		$.each(contexts, function(i, c) {\n			$.each(c.waypoints, function(i, e) {\n				points = points.add(e.element);\n			});\n		});\n		return points;\n
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:09:01.908Z
Question Type: function-variant
Function: aggregate
Function Size: 302 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: aggregate (JavaScript)\n// Aggregates waypoints from different contexts into a single jQuery object.\n\naggregate: function() {\n		var points = $();\n		$.each(contexts, function(i, c) {\n			$.each(c.waypoints, function(i, e) {\n				points = points.add(e.element);\n			});\n		});\n		return points;\n
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:09:02.483Z
Question Type: true-false
Function: aggregate
Function Size: 302 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: aggregate (JavaScript)\n// Aggregates waypoints from different contexts into a single jQuery object.\n\naggregate: function() {\n		var points = $();\n		$.each(contexts, function(i, c) {\n			$.each(c.waypoints, function(i, e) {\n				points = points.add(e.element);\n			});\n		});\n		return points;\n
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:09:04.636Z
Question Type: select-all
Function: aggregate
Function Size: 302 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: aggregate (JavaScript)\n// Aggregates waypoints from different contexts into a single jQuery object.\n\naggregate: function() {\n		var points = $();\n		$.each(contexts, function(i, c) {\n			$.each(c.waypoints, function(i, e) {\n				points = points.add(e.element);\n			});\n		});\n		return points;\n
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:09:05.131Z
Question Type: multiple-choice
Function: aggregate
Function Size: 302 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: aggregate (JavaScript)\n// Aggregates waypoints from different contexts into a single jQuery object.\n\naggregate: function() {\n		var points = $();\n		$.each(contexts, function(i, c) {\n			$.each(c.waypoints, function(i, e) {\n				points = points.add(e.element);\n			});\n		});\n		return points;\n
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:09:12.021Z
Question Type: select-all
Function: aggregate
Function Size: 302 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: aggregate (JavaScript)\n// Aggregates waypoints from different contexts into a single jQuery object.\n\naggregate: function() {\n		var points = $();\n		$.each(contexts, function(i, c) {\n			$.each(c.waypoints, function(i, e) {\n				points = points.add(e.element);\n			});\n		});\n		return points;\n
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760466663427
Repository: Unknown
Total Questions Generated: 14
Total Chunks Processed: 1
Ended: 2025-10-14T20:09:15.048Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-14T20:20:44.107Z
File: [3 files: tracker.d.ts, logging.d.ts, WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.]
Functions Extracted: 7


Function 1: Headers
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function Headers(headers) {
    this.map = {}

    if (headers instanceof Headers) {
        headers.forEach(function(value, name) {
            this.append(name, value)
        }, this)

    } else if (headers) {
        Object.getOwnPropertyNames(headers).forEach(function(name) {
            this.append(name, headers[name])
        }, this)
    }
}
--------------------------------------------------------------------------------


Function 2: append
Language: JavaScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
Headers.prototype.append = function(name, value) {
    name = normalizeName(name)
    value = normalizeValue(value)
    var list = this.map[name]
    if (!list) {
        list = []
        this.map[name] = list
    }
    list.push(value)
}
--------------------------------------------------------------------------------


Function 3: forEach
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
Headers.prototype.forEach = function(callback, thisArg) {
    Object.getOwnPropertyNames(this.map).forEach(function(name) {
        this.map[name].forEach(function(value) {
            callback.call(thisArg, value, name, this)
        }, this)
    }, this)
}
--------------------------------------------------------------------------------


Function 4: fileReaderReady
Language: JavaScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
function fileReaderReady(reader) {
    return new Promise(function(resolve, reject) {
        reader.onload = function() {
            resolve(reader.result)
        }
        reader.onerror = function() {
            reject(reader.error)
        }
    })
}
--------------------------------------------------------------------------------


Function 5: readBlobAsArrayBuffer
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader()
    reader.readAsArrayBuffer(blob)
    return fileReaderReady(reader)
}
--------------------------------------------------------------------------------


Function 6: readBlobAsText
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function readBlobAsText(blob) {
    var reader = new FileReader()
    reader.readAsText(blob)
    return fileReaderReady(reader)
}
--------------------------------------------------------------------------------


Function 7: Body
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function Body() {
    this.bodyUsed = false

    this._initBody = function(body) {
        this._bodyInit = body
        if (typeof body === 'string') {
            this._bodyText = body
        } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
            this._bodyBlob = body
        } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
            this._bodyFormData = body
        } else if (!body) {
            this._bodyText = ''
        }
    }
}
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:20:50.299Z
Question Type: true-false
Function: append
Function Size: 343 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: append (JavaScript)\n// Appends a new value to an existing header or creates a new header.\n\nHeaders.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var list = this.map[name]\n    if (!list) {\n        list = []\n        this.ma
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:20:56.469Z
Question Type: multiple-choice
Function: forEach
Function Size: 356 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: forEach (JavaScript)\n// Iterates over all headers and executes a callback for each.\n\nHeaders.prototype.forEach = function(callback, thisArg) {\n    Object.getOwnPropertyNames(this.map).forEach(function(name) {\n        this.map[name].forEach(function(value) {\n            callback.call(thi
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:20:58.623Z
Question Type: order-sequence
Function: fileReaderReady
Function Size: 387 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: fileReaderReady (JavaScript)\n// Returns a promise that resolves when the FileReader has successfully read the data.\n\nfunction fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n        reader.onload = function() {\n            resolve(reader.result)\n        }\n  
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:20:59.995Z
Question Type: function-variant
Function: Headers
Function Size: 460 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: Headers (JavaScript)\n// Constructor for creating a Headers object that manages header fields.\n\nfunction Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n        headers.forEach(function(value, name) {\n            this.append(name, value)\n        }, this)\n\n    
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:21:04.231Z
Question Type: select-all
Function: readBlobAsText
Function Size: 219 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: readBlobAsText (JavaScript)\n// Reads a Blob as text and returns a promise.\n\nfunction readBlobAsText(blob) {\n    var reader = new FileReader()\n    reader.readAsText(blob)\n    return fileReaderReady(reader)\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:21:04.884Z
Question Type: true-false
Function: readBlobAsArrayBuffer
Function Size: 250 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: readBlobAsArrayBuffer (JavaScript)\n// Reads a Blob as an ArrayBuffer and returns a promise.\n\nfunction readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    reader.readAsArrayBuffer(blob)\n    return fileReaderReady(reader)\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:21:07.525Z
Question Type: function-variant
Function: append
Function Size: 343 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: append (JavaScript)\n// Appends a new value to an existing header or creates a new header.\n\nHeaders.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var list = this.map[name]\n    if (!list) {\n        list = []\n        this.ma
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:21:10.155Z
Question Type: order-sequence
Function: readBlobAsText
Function Size: 219 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: readBlobAsText (JavaScript)\n// Reads a Blob as text and returns a promise.\n\nfunction readBlobAsText(blob) {\n    var reader = new FileReader()\n    reader.readAsText(blob)\n    return fileReaderReady(reader)\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:21:12.986Z
Question Type: select-all
Function: forEach
Function Size: 356 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: forEach (JavaScript)\n// Iterates over all headers and executes a callback for each.\n\nHeaders.prototype.forEach = function(callback, thisArg) {\n    Object.getOwnPropertyNames(this.map).forEach(function(name) {\n        this.map[name].forEach(function(value) {\n            callback.call(thi
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:21:13.951Z
Question Type: select-all
Function: fileReaderReady
Function Size: 387 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: fileReaderReady (JavaScript)\n// Returns a promise that resolves when the FileReader has successfully read the data.\n\nfunction fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n        reader.onload = function() {\n            resolve(reader.result)\n        }\n  
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:21:19.130Z
Question Type: function-variant
Function: readBlobAsArrayBuffer
Function Size: 250 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: readBlobAsArrayBuffer (JavaScript)\n// Reads a Blob as an ArrayBuffer and returns a promise.\n\nfunction readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    reader.readAsArrayBuffer(blob)\n    return fileReaderReady(reader)\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:21:22.478Z
Question Type: select-all
Function: Headers
Function Size: 460 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: Headers (JavaScript)\n// Constructor for creating a Headers object that manages header fields.\n\nfunction Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n        headers.forEach(function(value, name) {\n            this.append(name, value)\n        }, this)\n\n    
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:21:24.884Z
Question Type: select-all
Function: Body
Function Size: 605 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: Body (JavaScript)\n// Constructor for Body that initializes the body content based on the input type.\n\nfunction Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n        this._bodyInit = body\n        if (typeof body === 'string') {\n            this._bodyText = bod
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760466663427
Repository: Unknown
Total Questions Generated: 14
Total Chunks Processed: 7
Ended: 2025-10-14T20:21:33.807Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-14T20:22:00.875Z
File: => `true` if user roles have been loaded
Functions Extracted: 11


Function 1: addUsersToRoles
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function addUsersToRoles(
    users: string | string[] | Meteor.User | Meteor.User[],
    roles: string | string[],
    options?: string | { scope?: string; ifExists?: boolean }
  ): void {
    // Logic to add users to roles goes here
}
--------------------------------------------------------------------------------


Function 2: createRole
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function createRole(
    roleName: string,
    options?: { unlessExists: boolean }
  ): string {
    // Logic to create a new role goes here
}
--------------------------------------------------------------------------------


Function 3: addRolesToParent
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function addRolesToParent(
    rolesNames: string | string[],
    parentName: string
  ): void {
    // Logic to add role parent to roles goes here
}
--------------------------------------------------------------------------------


Function 4: removeRolesFromParent
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function removeRolesFromParent(
    rolesNames: string | string[],
    parentName: string
  ): void {
    // Logic to remove role parent from roles goes here
}
--------------------------------------------------------------------------------


Function 5: getGroupsForUser
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function getGroupsForUser(
    user: string | Meteor.User,
    role?: string
  ): string[] {
    // Logic to retrieve users groups goes here
}
--------------------------------------------------------------------------------


Function 6: getScopesForUser
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function getScopesForUser(
    user: string | Meteor.User,
    roles?: string | string[]
  ): string[] {
    // Logic to retrieve users scopes goes here
}
--------------------------------------------------------------------------------


Function 7: getRolesForUser
Language: TypeScript
Lines: 9
Full Code:
--------------------------------------------------------------------------------
function getRolesForUser(
    user: string | Meteor.User,
    options?: string | {
        scope?: string;
        anyScope?: boolean;
        onlyScoped?: boolean;
        onlyAssigned?: boolean;
        fullObjects?: boolean;
      }
  ): string[] {
    // Logic to retrieve user's roles goes here
}
--------------------------------------------------------------------------------


Function 8: getUserAssignmentsForRole
Language: TypeScript
Lines: 9
Full Code:
--------------------------------------------------------------------------------
function getUserAssignmentsForRole(
    roles: string | string[],
    options?: string | {
        scope?: string;
        anyScope?: boolean;
        queryOptions?: QueryOptions;
      }
  ): Mongo.Cursor<RoleAssignment> {
    // Logic to retrieve all assignments of a user for the target role goes here
}
--------------------------------------------------------------------------------


Function 9: getUsersInRole
Language: TypeScript
Lines: 9
Full Code:
--------------------------------------------------------------------------------
function getUsersInRole(
    roles: string | string[],
    options?: string | {
        scope?: string;
        anyScope?: boolean;
        onlyScoped?: boolean;
        queryOptions?: QueryOptions;
      },
    queryOptions?: QueryOptions
  ): Mongo.Cursor<Meteor.User> {
    // Logic to retrieve all users who are in target role goes here
}
--------------------------------------------------------------------------------


Function 10: removeUsersFromRoles
Language: TypeScript
Lines: 9
Full Code:
--------------------------------------------------------------------------------
function removeUsersFromRoles(
    users: string | string[] | Meteor.User | Meteor.User[],
    roles?: string | string[],
    options?: string | { scope?: string; anyScope?: boolean }
  ): void {
    // Logic to remove users from assigned roles goes here
}
--------------------------------------------------------------------------------


Function 11: setUserRoles
Language: TypeScript
Lines: 9
Full Code:
--------------------------------------------------------------------------------
function setUserRoles(
    users: string | string[] | Meteor.User | Meteor.User[],
    roles: string | string[],
    options?: string | { scope?: string; anyScope?: boolean; ifExists?: boolean }
  ): void {
    // Logic to set users' roles goes here
}
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:22:10.516Z
Question Type: select-all
Function: getScopesForUser
Function Size: 225 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getScopesForUser (TypeScript)\n// Retrieves users scopes.\n\nfunction getScopesForUser(\n    user: string | Meteor.User,\n    roles?: string | string[]\n  ): string[] {\n    // Logic to retrieve users scopes goes here\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:22:12.391Z
Question Type: select-all
Function: addRolesToParent
Function Size: 223 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: addRolesToParent (TypeScript)\n// Adds role parent to roles.\n\nfunction addRolesToParent(\n    rolesNames: string | string[],\n    parentName: string\n  ): void {\n    // Logic to add role parent to roles goes here\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:22:14.837Z
Question Type: true-false
Function: addRolesToParent
Function Size: 223 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: addRolesToParent (TypeScript)\n// Adds role parent to roles.\n\nfunction addRolesToParent(\n    rolesNames: string | string[],\n    parentName: string\n  ): void {\n    // Logic to add role parent to roles goes here\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:22:15.189Z
Question Type: order-sequence
Function: getScopesForUser
Function Size: 225 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getScopesForUser (TypeScript)\n// Retrieves users scopes.\n\nfunction getScopesForUser(\n    user: string | Meteor.User,\n    roles?: string | string[]\n  ): string[] {\n    // Logic to retrieve users scopes goes here\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:22:21.343Z
Question Type: true-false
Function: setUserRoles
Function Size: 313 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: setUserRoles (TypeScript)\n// Sets users' roles.\n\nfunction setUserRoles(\n    users: string | string[] | Meteor.User | Meteor.User[],\n    roles: string | string[],\n    options?: string | { scope?: string; anyScope?: boolean; ifExists?: boolean }\n  ): void {\n    // Logic to set users' role
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:22:21.747Z
Question Type: function-variant
Function: getUsersInRole
Function Size: 431 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getUsersInRole (TypeScript)\n// Retrieves all users who are in target role.\n\nfunction getUsersInRole(\n    roles: string | string[],\n    options?: string | {\n        scope?: string;\n        anyScope?: boolean;\n        onlyScoped?: boolean;\n        queryOptions?: QueryOptions;\n      },\n   
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760466663427
Repository: Unknown
Total Questions Generated: 6
Total Chunks Processed: 11
Ended: 2025-10-14T20:22:21.779Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-14T20:32:00.657Z
File: [2 files: Items per page in timeline., email.tsx]
Functions Extracted: 5


Function 1: viewProject
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function viewProject(completedChallenge: CompletedChallenge): void {
    setCompletedChallenge(completedChallenge);
    setProjectTitle(
      idToNameMap.get(completedChallenge.id)?.challengeTitle ?? ''
    );
    openModal('projectPreview');
}
--------------------------------------------------------------------------------


Function 2: viewExamResults
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function viewExamResults(completedChallenge: CompletedChallenge): void {
    setCompletedChallenge(completedChallenge);
    setProjectTitle(
      idToNameMap.get(completedChallenge.id)?.challengeTitle ?? ''
    );
    openModal('examResults');
}
--------------------------------------------------------------------------------


Function 3: createHandleEmailFormChange
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function createHandleEmailFormChange(
    key: 'newEmail' | 'confirmNewEmail'
  ): (e: React.ChangeEvent<HTMLInputElement>) => void {
    return e => {
      e.preventDefault();
      const userInput = e.target.value.slice();
      setEmailForm(prev => ({
        ...prev,
        [key]: userInput,
        isPristine: userInput === prev.currentEmail
      }));
    };
  }
--------------------------------------------------------------------------------


Function 4: getValidationForNewEmail
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function getValidationForNewEmail(): EmailValidation {
    const { newEmail, currentEmail } = emailForm;
    if (!maybeEmailRE.test(newEmail)) {
      return {
        state: null,
        message: ''
      };
    }
    if (newEmail === currentEmail) {
      return {
        state: 'error',
        message: t('validation.same-email')
      };
    }
    if (isEmail(newEmail)) {
      return { state: 'success', message: '' };
    } else {
      return {
        state: 'error',
        message: t('validation.invalid-email')
      };
    }
  }
--------------------------------------------------------------------------------


Function 5: getValidationForConfirmEmail
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function getValidationForConfirmEmail(): EmailValidation {
    const { confirmNewEmail, newEmail } = emailForm;
    if (!maybeEmailRE.test(newEmail)) {
      return {
        state: null,
        message: ''
      };
    }
    const isMatch = newEmail === confirmNewEmail;
    if (maybeEmailRE.test(confirmNewEmail)) {
      return {
        state: isMatch ? 'success' : 'error',
        message: isMatch ? '' : t('validation.email-mismatch')
      };
    } else {
      return {
        state: null,
        message: ''
      };
    }
  }
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:32:11.396Z
Question Type: select-all
Function: viewProject
Function Size: 353 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: viewProject (TypeScript)\n// Sets the completed challenge and opens the project preview modal.\n\nfunction viewProject(completedChallenge: CompletedChallenge): void {\n    setCompletedChallenge(completedChallenge);\n    setProjectTitle(\n      idToNameMap.get(completedChallenge.id)?.challenge
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:32:12.005Z
Question Type: order-sequence
Function: getValidationForNewEmail
Function Size: 631 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getValidationForNewEmail (TypeScript)\n// Validates the new email input.\n\nfunction getValidationForNewEmail(): EmailValidation {\n    const { newEmail, currentEmail } = emailForm;\n    if (!maybeEmailRE.test(newEmail)) {\n      return {\n        state: null,\n        message: ''\n      };\n    
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:32:15.698Z
Question Type: function-variant
Function: viewExamResults
Function Size: 355 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: viewExamResults (TypeScript)\n// Sets the completed challenge and opens the exam results modal.\n\nfunction viewExamResults(completedChallenge: CompletedChallenge): void {\n    setCompletedChallenge(completedChallenge);\n    setProjectTitle(\n      idToNameMap.get(completedChallenge.id)?.chal
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:32:24.686Z
Question Type: function-variant
Function: createHandleEmailFormChange
Function Size: 482 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: createHandleEmailFormChange (TypeScript)\n// Creates a change handler for the email form inputs.\n\nfunction createHandleEmailFormChange(\n    key: 'newEmail' | 'confirmNewEmail'\n  ): (e: React.ChangeEvent<HTMLInputElement>) => void {\n    return e => {\n      e.preventDefault();\n      const 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:32:27.840Z
Question Type: select-all
Function: getValidationForNewEmail
Function Size: 631 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getValidationForNewEmail (TypeScript)\n// Validates the new email input.\n\nfunction getValidationForNewEmail(): EmailValidation {\n    const { newEmail, currentEmail } = emailForm;\n    if (!maybeEmailRE.test(newEmail)) {\n      return {\n        state: null,\n        message: ''\n      };\n    
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:32:30.684Z
Question Type: function-variant
Function: getValidationForNewEmail
Function Size: 631 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: getValidationForNewEmail (TypeScript)\n// Validates the new email input.\n\nfunction getValidationForNewEmail(): EmailValidation {\n    const { newEmail, currentEmail } = emailForm;\n    if (!maybeEmailRE.test(newEmail)) {\n      return {\n        state: null,\n        message: ''\n      };\n    
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:32:34.948Z
Question Type: select-all
Function: createHandleEmailFormChange
Function Size: 482 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: createHandleEmailFormChange (TypeScript)\n// Creates a change handler for the email form inputs.\n\nfunction createHandleEmailFormChange(\n    key: 'newEmail' | 'confirmNewEmail'\n  ): (e: React.ChangeEvent<HTMLInputElement>) => void {\n    return e => {\n      e.preventDefault();\n      const 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:32:35.089Z
Question Type: true-false
Function: getValidationForConfirmEmail
Function Size: 638 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getValidationForConfirmEmail (TypeScript)\n// Validates the confirmation email input.\n\nfunction getValidationForConfirmEmail(): EmailValidation {\n    const { confirmNewEmail, newEmail } = emailForm;\n    if (!maybeEmailRE.test(newEmail)) {\n      return {\n        state: null,\n        messa
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:32:39.134Z
Question Type: select-all
Function: viewExamResults
Function Size: 355 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: viewExamResults (TypeScript)\n// Sets the completed challenge and opens the exam results modal.\n\nfunction viewExamResults(completedChallenge: CompletedChallenge): void {\n    setCompletedChallenge(completedChallenge);\n    setProjectTitle(\n      idToNameMap.get(completedChallenge.id)?.chal
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:32:39.678Z
Question Type: multiple-choice
Function: createHandleEmailFormChange
Function Size: 482 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: createHandleEmailFormChange (TypeScript)\n// Creates a change handler for the email form inputs.\n\nfunction createHandleEmailFormChange(\n    key: 'newEmail' | 'confirmNewEmail'\n  ): (e: React.ChangeEvent<HTMLInputElement>) => void {\n    return e => {\n      e.preventDefault();\n      const 
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760466663427
Repository: Unknown
Total Questions Generated: 10
Total Chunks Processed: 5
Ended: 2025-10-14T20:32:39.706Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-14T20:32:53.617Z
File: [2 files: social-icons.tsx, to make use of the Response object (message, status, etc)]
Functions Extracted: 4


Function 1: get
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
async function get<T>(
  path: string,
  signal?: AbortSignal
): Promise<ResponseWithData<T>> {
  const response = await fetch(`${base}${path}`, {
    ...defaultOptions,
    headers: { 'CSRF-Token': getCSRFToken() },
    signal
  });

  return combineDataWithResponse(response);
}
--------------------------------------------------------------------------------


Function 2: combineDataWithResponse
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
async function combineDataWithResponse<T>(response: Response) {
  const data = (await response.json()) as T;
  return { response, data };
}
--------------------------------------------------------------------------------


Function 3: request
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
async function request<T>(
  method: 'POST' | 'PUT' | 'DELETE',
  path: string,
  body: unknown
): Promise<ResponseWithData<T>> {
  const options: RequestInit = {
    ...defaultOptions,
    method,
    headers: {
      'CSRF-Token': getCSRFToken(),
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(body)
  };

  const response = await fetch(`${base}${path}`, options);
  return combineDataWithResponse(response);
}
--------------------------------------------------------------------------------


Function 4: parseApiResponseToClientUser
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function parseApiResponseToClientUser(data: ApiUserResponse): User | null {
  const userData = data.user?.[data?.result ?? ''];
  let completedChallenges: CompletedChallenge[] = [];
  let savedChallenges: SavedChallenge[] = [];
  if (userData) {
    completedChallenges = mapFilesToChallengeFiles(
      userData.completedChallenges
    );
    savedChallenges = mapFilesToChallengeFiles(userData.savedChallenges);
  }
  return data.result
    ? { ...userData, completedChallenges, savedChallenges }
    : null;
}
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:33:00.911Z
Question Type: true-false
Function: combineDataWithResponse
Function Size: 249 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: combineDataWithResponse (TypeScript)\n// Combines the response object with the parsed JSON data.\n\nasync function combineDataWithResponse<T>(response: Response) {\n  const data = (await response.json()) as T;\n  return { response, data };\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:33:02.851Z
Question Type: select-all
Function: combineDataWithResponse
Function Size: 249 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: combineDataWithResponse (TypeScript)\n// Combines the response object with the parsed JSON data.\n\nasync function combineDataWithResponse<T>(response: Response) {\n  const data = (await response.json()) as T;\n  return { response, data };\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:33:05.965Z
Question Type: select-all
Function: get
Function Size: 388 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: get (TypeScript)\n// Fetches data from a given path and returns a response with combined data.\n\nasync function get<T>(\n  path: string,\n  signal?: AbortSignal\n): Promise<ResponseWithData<T>> {\n  const response = await fetch(`${base}${path}`, {\n    ...defaultOptions,\n    headers: { 'CSRF-T
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:33:06.869Z
Question Type: function-variant
Function: combineDataWithResponse
Function Size: 249 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: combineDataWithResponse (TypeScript)\n// Combines the response object with the parsed JSON data.\n\nasync function combineDataWithResponse<T>(response: Response) {\n  const data = (await response.json()) as T;\n  return { response, data };\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:33:09.741Z
Question Type: true-false
Function: parseApiResponseToClientUser
Function Size: 658 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: parseApiResponseToClientUser (TypeScript)\n// Parses the API response to extract user data and their completed and saved challenges.\n\nfunction parseApiResponseToClientUser(data: ApiUserResponse): User | null {\n  const userData = data.user?.[data?.result ?? ''];\n  let completedChallenges:
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:33:12.200Z
Question Type: select-all
Function: request
Function Size: 571 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: request (TypeScript)\n// Makes a network request with the specified method and returns the response with combined data.\n\nasync function request<T>(\n  method: 'POST' | 'PUT' | 'DELETE',\n  path: string,\n  body: unknown\n): Promise<ResponseWithData<T>> {\n  const options: RequestInit = {\n    
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:33:15.207Z
Question Type: multiple-choice
Function: request
Function Size: 571 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: request (TypeScript)\n// Makes a network request with the specified method and returns the response with combined data.\n\nasync function request<T>(\n  method: 'POST' | 'PUT' | 'DELETE',\n  path: string,\n  body: unknown\n): Promise<ResponseWithData<T>> {\n  const options: RequestInit = {\n    
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760466663427
Repository: Unknown
Total Questions Generated: 7
Total Chunks Processed: 4
Ended: 2025-10-14T20:33:15.231Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-14T20:33:33.505Z
File: [2 files: block.tsx, completion-epic.js]
Functions Extracted: 4


Function 1: postChallenge
Language: JavaScript
Lines: 31
Full Code:
--------------------------------------------------------------------------------
function postChallenge(update) {
  const {
    payload: { challengeType }
  } = update;
  const saveChallenge = postUpdate$(update).pipe(
    retry(3),
    switchMap(({ data }) => {
      const {
        type,
        completedDailyCodingChallenges,
        savedChallenges,
        message,
        examResults
      } = data;
      const payloadWithClientProperties = {
        ...omit(update.payload, ['files'])
      };
      if (update.payload.files) {
        payloadWithClientProperties.challengeFiles = update.payload.files.map(
          ({ key, ...rest }) => ({
            ...rest,
            fileKey: key
          })
        );
      }

      let actions = [
        submitComplete({
          submittedChallenge: payloadWithClientProperties,
          completedDailyCodingChallenges,
          savedChallenges: mapFilesToChallengeFiles(savedChallenges),
          examResults
        }),
        updateComplete(),
        submitChallengeComplete()
      ];

      if (
        type === 'error' ||
        (message && challengeType === challengeTypes.msTrophy)
      ) {
        actions = [];
        if (message) {
          actions.push(createFlashMessage(data));
        }
        actions.push(submitChallengeError());
      } else if (challengeType === challengeTypes.msTrophy) {
        actions.push(createFlashMessage(msTrophyVerified));
      }

      return of(...actions);
    }),
    catchError(() => of(updateFailed(update), submitChallengeError()))
  );
  return saveChallenge;
}
--------------------------------------------------------------------------------


Function 2: submitModern
Language: JavaScript
Lines: 34
Full Code:
--------------------------------------------------------------------------------
function submitModern(type, state) {
  const tests = challengeTestsSelector(state);
  if (tests.length === 0 || tests.every(test => test.pass && !test.err)) {
    if (type === actionTypes.checkChallenge) {
      return of({ type: 'this was a check challenge' });
    }

    if (type === actionTypes.submitChallenge) {
      const { id, block, challengeType } = challengeMetaSelector(state);

      let update;

      if (getIsDailyCodingChallenge(challengeType)) {
        const language = getDailyCodingChallengeLanguage(challengeType);

        const body = {
          id,
          challengeType,
          language
        };

        update = {
          endpoint: '/daily-coding-challenge-completed',
          payload: body
        };
      } else {
        const challengeFiles = challengeFilesSelector(state);

        let body;
        if (
          block === 'javascript-algorithms-and-data-structures-projects' ||
          canSaveToDB(challengeType)
        ) {
          body = standardizeRequestBody({ id, challengeType, challengeFiles });
        } else {
          body = {
            id,
            challengeType
          };
        }

        update = {
          endpoint: '/encoded/modern-challenge-completed',
          payload: body
        };
      }
      return postChallenge(update);
    }
  }
  return empty();
}
--------------------------------------------------------------------------------


Function 3: submitProject
Language: JavaScript
Lines: 29
Full Code:
--------------------------------------------------------------------------------
function submitProject(type, state) {
  if (type === actionTypes.checkChallenge) {
    return empty();
  }

  const { solution, githubLink } = projectFormValuesSelector(state);
  const { id, challengeType } = challengeMetaSelector(state);
  const { username } = userSelector(state);
  const challengeInfo = { id, challengeType, solution };
  if (challengeType === challengeTypes.backEndProject) {
    challengeInfo.githubLink = githubLink;
  }

  const update = {
    endpoint: '/project-completed',
    payload: challengeInfo
  };
  return postChallenge(update, username).pipe(
    concat(of(updateSolutionFormValues({})))
  );
}
--------------------------------------------------------------------------------


Function 4: submitBackendChallenge
Language: JavaScript
Lines: 27
Full Code:
--------------------------------------------------------------------------------
function submitBackendChallenge(type, state) {
  const tests = challengeTestsSelector(state);
  if (tests.length > 0 && tests.every(test => test.pass && !test.err)) {
    if (type === actionTypes.submitChallenge) {
      const { id } = challengeMetaSelector(state);
      const {
        solution: { value: solution }
      } = projectFormValuesSelector(state);
      const challengeInfo = { id, solution };

      const update = {
        endpoint: '/backend-challenge-completed',
        payload: challengeInfo
      };
      return postChallenge(update);
    }
  }
  return empty();
}
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:33:43.639Z
Question Type: multiple-choice
Function: submitModern
Function Size: 1453 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: submitModern (JavaScript)\n// Submits a modern challenge based on the type and state provided.\n\nfunction submitModern(type, state) {\n  const tests = challengeTestsSelector(state);\n  if (tests.length === 0 || tests.every(test => test.pass && !test.err)) {\n    if (type === actionTypes.chec
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:33:45.403Z
Question Type: select-all
Function: submitBackendChallenge
Function Size: 687 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: submitBackendChallenge (JavaScript)\n// Submits a backend challenge if all tests pass.\n\nfunction submitBackendChallenge(type, state) {\n  const tests = challengeTestsSelector(state);\n  if (tests.length > 0 && tests.every(test => test.pass && !test.err)) {\n    if (type === actionTypes.subm
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:33:49.078Z
Question Type: select-all
Function: submitModern
Function Size: 1453 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: submitModern (JavaScript)\n// Submits a modern challenge based on the type and state provided.\n\nfunction submitModern(type, state) {\n  const tests = challengeTestsSelector(state);\n  if (tests.length === 0 || tests.every(test => test.pass && !test.err)) {\n    if (type === actionTypes.chec
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:33:53.022Z
Question Type: true-false
Function: submitProject
Function Size: 758 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: submitProject (JavaScript)\n// Handles the submission of a project challenge and updates the solution form values.\n\nfunction submitProject(type, state) {\n  if (type === actionTypes.checkChallenge) {\n    return empty();\n  }\n\n  const { solution, githubLink } = projectFormValuesSelector(sta
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:33:57.456Z
Question Type: select-all
Function: submitProject
Function Size: 758 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: submitProject (JavaScript)\n// Handles the submission of a project challenge and updates the solution form values.\n\nfunction submitProject(type, state) {\n  if (type === actionTypes.checkChallenge) {\n    return empty();\n  }\n\n  const { solution, githubLink } = projectFormValuesSelector(sta
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:34:00.769Z
Question Type: order-sequence
Function: submitBackendChallenge
Function Size: 687 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: submitBackendChallenge (JavaScript)\n// Submits a backend challenge if all tests pass.\n\nfunction submitBackendChallenge(type, state) {\n  const tests = challengeTestsSelector(state);\n  if (tests.length > 0 && tests.every(test => test.pass && !test.err)) {\n    if (type === actionTypes.subm
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:34:03.524Z
Question Type: function-variant
Function: postChallenge
Function Size: 1620 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: postChallenge (JavaScript)\n// Handles posting a challenge update and managing the resulting actions.\n\nfunction postChallenge(update) {\n  const {\n    payload: { challengeType }\n  } = update;\n  const saveChallenge = postUpdate$(update).pipe(\n    retry(3),\n    switchMap(({ data }) => {\n   
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:34:19.836Z
Question Type: true-false
Function: postChallenge
Function Size: 1620 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: postChallenge (JavaScript)\n// Handles posting a challenge update and managing the resulting actions.\n\nfunction postChallenge(update) {\n  const {\n    payload: { challengeType }\n  } = update;\n  const saveChallenge = postUpdate$(update).pipe(\n    retry(3),\n    switchMap(({ data }) => {\n   
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:34:20.408Z
Question Type: select-all
Function: postChallenge
Function Size: 1620 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: postChallenge (JavaScript)\n// Handles posting a challenge update and managing the resulting actions.\n\nfunction postChallenge(update) {\n  const {\n    payload: { challengeType }\n  } = update;\n  const saveChallenge = postUpdate$(update).pipe(\n    retry(3),\n    switchMap(({ data }) => {\n   
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-14T20:34:20.714Z
Question Type: function-variant
Function: submitProject
Function Size: 758 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: submitProject (JavaScript)\n// Handles the submission of a project challenge and updates the solution form values.\n\nfunction submitProject(type, state) {\n  if (type === actionTypes.checkChallenge) {\n    return empty();\n  }\n\n  const { solution, githubLink } = projectFormValuesSelector(sta
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760466663427
Repository: Unknown
Total Questions Generated: 8
Total Chunks Processed: 4
Ended: 2025-10-14T20:34:20.738Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-15T00:56:15.689Z
File: microsoft-playwright-6e775c7/packages/playwright-core/src/server/recorder/chat.ts
Functions Extracted: 5


Function 1: post
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
async post<T>(prompt: string): Promise<T | null> {
    await this._append('user', prompt);
    let text = await asString(await this._post());
    if (text.startsWith('```json') && text.endsWith('```'))
        text = text.substring('```json'.length, text.length - '```'.length);
    for (let i = 0; i < 3; ++i) {
        try {
            return JSON.parse(text);
        } catch (e) {
            await this._append('user', String(e));
        }
    }
    throw new Error('Failed to parse response: ' + text);
}
--------------------------------------------------------------------------------


Function 2: asString
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
export async function asString(stream: AsyncIterable<string>): Promise<string> {
    let result = '';
    for await (const chunk of stream)
        result += chunk;
    return result;
}
--------------------------------------------------------------------------------


Function 3: _post
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
private async _post(): Promise<AsyncIterable<string>> {
    const connection = await this._connection();
    const result = await connection.send('chat', { history: this._history });
    const { chatId } = result;
    const { iterable, addChunk } = iterablePump();
    this._chatSinks.set(chatId, addChunk);
    return iterable;
}
--------------------------------------------------------------------------------


Function 4: send
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
send(method: string, params: any): Promise<any> {
    const id = this._lastId++;
    const message = { id, method, params };
    this._transport.send(message);
    return new Promise((resolve, reject) => {
        this._pending.set(id, { resolve, reject });
    });
}
--------------------------------------------------------------------------------


Function 5: _dispatchMessage
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
private _dispatchMessage(message: ProtocolResponse) {
    if (message.id === undefined) {
        this._onEvent(message.method!, message.params);
        return;
    }

    const callback = this._pending.get(message.id);
    this._pending.delete(message.id);
    if (!callback)
        return;

    if (message.error) {
        callback.reject(new Error(message.error.message));
        return;
    }
    callback.resolve(message.result);
}
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-15T00:56:21.471Z
Question Type: true-false
Function: _post
Function Size: 453 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: _post (TypeScript)\n// Sends the chat history to the connection and returns an AsyncIterable of the response.\n\nprivate async _post(): Promise<AsyncIterable<string>> {\n    const connection = await this._connection();\n    const result = await connection.send('chat', { history: this._histor
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-15T00:56:24.624Z
Question Type: select-all
Function: asString
Function Size: 288 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: asString (TypeScript)\n// Concatenates chunks from an AsyncIterable into a single string.\n\nexport async function asString(stream: AsyncIterable<string>): Promise<string> {\n    let result = '';\n    for await (const chunk of stream)\n        result += chunk;\n    return result;\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-15T00:56:27.145Z
Question Type: select-all
Function: post
Function Size: 607 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: post (TypeScript)\n// Sends a prompt to the chat and returns the parsed response.\n\nasync post<T>(prompt: string): Promise<T | null> {\n    await this._append('user', prompt);\n    let text = await asString(await this._post());\n    if (text.startsWith('```json') && text.endsWith('```'))\n   
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-15T00:56:29.372Z
Question Type: select-all
Function: _post
Function Size: 453 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: _post (TypeScript)\n// Sends the chat history to the connection and returns an AsyncIterable of the response.\n\nprivate async _post(): Promise<AsyncIterable<string>> {\n    const connection = await this._connection();\n    const result = await connection.send('chat', { history: this._histor
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-15T00:56:30.026Z
Question Type: true-false
Function: post
Function Size: 607 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: post (TypeScript)\n// Sends a prompt to the chat and returns the parsed response.\n\nasync post<T>(prompt: string): Promise<T | null> {\n    await this._append('user', prompt);\n    let text = await asString(await this._post());\n    if (text.startsWith('```json') && text.endsWith('```'))\n   
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-15T00:56:38.454Z
Question Type: order-sequence
Function: send
Function Size: 380 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: send (TypeScript)\n// Sends a message through the transport and returns a promise for the response.\n\nsend(method: string, params: any): Promise<any> {\n    const id = this._lastId++;\n    const message = { id, method, params };\n    this._transport.send(message);\n    return new Promise((res
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-15T00:56:44.627Z
Question Type: multiple-choice
Function: asString
Function Size: 288 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: asString (TypeScript)\n// Concatenates chunks from an AsyncIterable into a single string.\n\nexport async function asString(stream: AsyncIterable<string>): Promise<string> {\n    let result = '';\n    for await (const chunk of stream)\n        result += chunk;\n    return result;\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-15T00:56:44.693Z
Question Type: function-variant
Function: send
Function Size: 380 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: send (TypeScript)\n// Sends a message through the transport and returns a promise for the response.\n\nsend(method: string, params: any): Promise<any> {\n    const id = this._lastId++;\n    const message = { id, method, params };\n    this._transport.send(message);\n    return new Promise((res
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760466663427
Repository: Unknown
Total Questions Generated: 10
Total Chunks Processed: 5
Ended: 2025-10-15T00:56:44.738Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-15T00:57:13.623Z
File: microsoft-playwright-6e775c7/packages/playwright-core/src/cli/program.ts
Functions Extracted: 4


Function 1: defaultBrowsersToInstall
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function defaultBrowsersToInstall(options: { noShell?: boolean, onlyShell?: boolean }): Executable[] {
  let executables = registry.defaultExecutables();
  if (options.noShell)
    executables = executables.filter(e => e.name !== 'chromium-headless-shell');
  if (options.onlyShell)
    executables = executables.filter(e => e.name !== 'chromium');
  return executables;
}
--------------------------------------------------------------------------------


Function 2: checkBrowsersToInstall
Language: TypeScript
Lines: 26
Full Code:
--------------------------------------------------------------------------------
function checkBrowsersToInstall(args: string[], options: { noShell?: boolean, onlyShell?: boolean }): Executable[] {
  if (options.noShell && options.onlyShell)
    throw new Error(`Only one of --no-shell and --only-shell can be specified`);

  const faultyArguments: string[] = [];
  const executables: Executable[] = [];
  const handleArgument = (arg: string) => {
    const executable = registry.findExecutable(arg);
    if (!executable || executable.installType === 'none')
      faultyArguments.push(arg);
    else
      executables.push(executable);
    if (executable?.browserName === 'chromium')
      executables.push(registry.findExecutable('ffmpeg')!);
  };

  for (const arg of args) {
    if (arg === 'chromium') {
      if (!options.onlyShell)
        handleArgument('chromium');
      if (!options.noShell)
        handleArgument('chromium-headless-shell');
    } else {
      handleArgument(arg);
    }
  }

  if (process.platform === 'win32')
    executables.push(registry.findExecutable('winldd')!);

  if (faultyArguments.length)
    throw new Error(`Invalid installation targets: ${faultyArguments.map(name => `'${name}'`).join(', ')}. Expecting one of: ${suggestedBrowsersToInstall()}`);
  return executables;
}
--------------------------------------------------------------------------------


Function 3: printInstalledBrowsers
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function printInstalledBrowsers(browsers: BrowserInfo[]) {
  const browserPaths = new Set<string>();
  for (const browser of browsers)
    browserPaths.add(browser.browserPath);
  console.log(`  Browsers:`);
  for (const browserPath of [...browserPaths].sort())
    console.log(`    ${browserPath}`);
  console.log(`  References:`);

  const references = new Set<string>();
  for (const browser of browsers)
    references.add(browser.referenceDir);
  for (const reference of [...references].sort())
    console.log(`    ${reference}`);
}
--------------------------------------------------------------------------------


Function 4: printGroupedByPlaywrightVersion
Language: TypeScript
Lines: 34
Full Code:
--------------------------------------------------------------------------------
function printGroupedByPlaywrightVersion(browsers: BrowserInfo[]) {
  const dirToVersion = new Map<string, string>();
  for (const browser of browsers) {
    if (dirToVersion.has(browser.referenceDir))
      continue;
    const packageJSON = require(path.join(browser.referenceDir, 'package.json'));
    const version = packageJSON.version;
    dirToVersion.set(browser.referenceDir, version);
  }

  const groupedByPlaywrightMinorVersion = new Map<string, BrowserInfo[]>();
  for (const browser of browsers) {
    const version = dirToVersion.get(browser.referenceDir)!;
    let entries = groupedByPlaywrightMinorVersion.get(version);
    if (!entries) {
      entries = [];
      groupedByPlaywrightMinorVersion.set(version, entries);
    }
    entries.push(browser);
  }

  const sortedVersions = [...groupedByPlaywrightMinorVersion.keys()].sort((a, b) => {
    const aComponents = a.split('.');
    const bComponents = b.split('.');
    const aMajor = parseInt(aComponents[0], 10);
    const bMajor = parseInt(bComponents[0], 10);
    if (aMajor !== bMajor)
      return aMajor - bMajor;
    const aMinor = parseInt(aComponents[1], 10);
    const bMinor = parseInt(bComponents[1], 10);
    if (aMinor !== bMinor)
      return aMinor - bMinor;
    return aComponents.slice(2).join('.').localeCompare(bComponents.slice(2).join('.'));
  });

  for (const version of sortedVersions) {
    console.log(`\nPlaywright version: ${version}`);
    printInstalledBrowsers(groupedByPlaywrightMinorVersion.get(version)!);
  }
}
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-15T00:57:24.779Z
Question Type: true-false
Function: checkBrowsersToInstall
Function Size: 1376 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: checkBrowsersToInstall (TypeScript)\n// Checks and returns the executables to install based on the provided arguments and options.\n\nfunction checkBrowsersToInstall(args: string[], options: { noShell?: boolean, onlyShell?: boolean }): Executable[] {\n  if (options.noShell && options.onlySh
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-15T00:57:27.506Z
Question Type: select-all
Function: checkBrowsersToInstall
Function Size: 1376 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: checkBrowsersToInstall (TypeScript)\n// Checks and returns the executables to install based on the provided arguments and options.\n\nfunction checkBrowsersToInstall(args: string[], options: { noShell?: boolean, onlyShell?: boolean }): Executable[] {\n  if (options.noShell && options.onlySh
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-15T00:57:31.460Z
Question Type: multiple-choice
Function: defaultBrowsersToInstall
Function Size: 502 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: defaultBrowsersToInstall (TypeScript)\n// Filters and returns the default executables based on the provided options.\n\nfunction defaultBrowsersToInstall(options: { noShell?: boolean, onlyShell?: boolean }): Executable[] {\n  let executables = registry.defaultExecutables();\n  if (options.no
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-15T00:57:37.845Z
Question Type: select-all
Function: defaultBrowsersToInstall
Function Size: 502 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: defaultBrowsersToInstall (TypeScript)\n// Filters and returns the default executables based on the provided options.\n\nfunction defaultBrowsersToInstall(options: { noShell?: boolean, onlyShell?: boolean }): Executable[] {\n  let executables = registry.defaultExecutables();\n  if (options.no
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-15T00:57:41.266Z
Question Type: function-variant
Function: defaultBrowsersToInstall
Function Size: 502 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: defaultBrowsersToInstall (TypeScript)\n// Filters and returns the default executables based on the provided options.\n\nfunction defaultBrowsersToInstall(options: { noShell?: boolean, onlyShell?: boolean }): Executable[] {\n  let executables = registry.defaultExecutables();\n  if (options.no
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760466663427
Repository: Unknown
Total Questions Generated: 7
Total Chunks Processed: 4
Ended: 2025-10-15T00:57:41.315Z
================================================================================

