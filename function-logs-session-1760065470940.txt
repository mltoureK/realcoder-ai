=== FUNCTION EXTRACTION & QUESTION GENERATION LOG ===
Session ID: session-1760065470940
Started: 2025-10-10T03:04:30.940Z


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T03:04:30.942Z
File: RameshMF-ReactJS-Spring-Boot-CRUD-Full-Stack-App-394c537/react-frontend/src/components/ListEmployeeComponent.jsx
Functions Extracted: 2


Function 1: deleteEmployee
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
deleteEmployee(id){
        EmployeeService.deleteEmployee(id).then( res => {
            this.setState({employees: this.state.employees.filter(employee => employee.id !== id)});
        });
    }
--------------------------------------------------------------------------------


Function 2: componentDidMount
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
componentDidMount(){
        EmployeeService.getEmployees().then((res) => {
            this.setState({ employees: res.data});
        });
    }
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T03:04:40.053Z
Question Type: select-all
Function: deleteEmployee
Function Size: 290 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: deleteEmployee (JavaScript)\n// Deletes an employee by ID and updates the state.\n\ndeleteEmployee(id){\n        EmployeeService.deleteEmployee(id).then( res => {\n            this.setState({employees: this.state.employees.filter(employee => employee.id !== id)});\n        });\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T03:04:43.033Z
Question Type: function-variant
Function: componentDidMount
Function Size: 269 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches employees from the service and updates the state on component mount.\n\ncomponentDidMount(){\n        EmployeeService.getEmployees().then((res) => {\n            this.setState({ employees: res.data});\n        });\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T03:04:44.238Z
Question Type: multiple-choice
Function: deleteEmployee
Function Size: 290 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: deleteEmployee (JavaScript)\n// Deletes an employee by ID and updates the state.\n\ndeleteEmployee(id){\n        EmployeeService.deleteEmployee(id).then( res => {\n            this.setState({employees: this.state.employees.filter(employee => employee.id !== id)});\n        });\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T03:04:45.990Z
Question Type: function-variant
Function: deleteEmployee
Function Size: 290 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: deleteEmployee (JavaScript)\n// Deletes an employee by ID and updates the state.\n\ndeleteEmployee(id){\n        EmployeeService.deleteEmployee(id).then( res => {\n            this.setState({employees: this.state.employees.filter(employee => employee.id !== id)});\n        });\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T03:04:51.449Z
Question Type: true-false
Function: componentDidMount
Function Size: 269 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches employees from the service and updates the state on component mount.\n\ncomponentDidMount(){\n        EmployeeService.getEmployees().then((res) => {\n            this.setState({ employees: res.data});\n        });\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T03:04:51.497Z
Question Type: select-all
Function: deleteEmployee
Function Size: 290 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: deleteEmployee (JavaScript)\n// Deletes an employee by ID and updates the state.\n\ndeleteEmployee(id){\n        EmployeeService.deleteEmployee(id).then( res => {\n            this.setState({employees: this.state.employees.filter(employee => employee.id !== id)});\n        });\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T03:04:51.879Z
Question Type: multiple-choice
Function: componentDidMount
Function Size: 269 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches employees from the service and updates the state on component mount.\n\ncomponentDidMount(){\n        EmployeeService.getEmployees().then((res) => {\n            this.setState({ employees: res.data});\n        });\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T03:05:01.490Z
Question Type: order-sequence
Function: deleteEmployee
Function Size: 290 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: deleteEmployee (JavaScript)\n// Deletes an employee by ID and updates the state.\n\ndeleteEmployee(id){\n        EmployeeService.deleteEmployee(id).then( res => {\n            this.setState({employees: this.state.employees.filter(employee => employee.id !== id)});\n        });\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T03:05:02.310Z
Question Type: select-all
Function: componentDidMount
Function Size: 269 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches employees from the service and updates the state on component mount.\n\ncomponentDidMount(){\n        EmployeeService.getEmployees().then((res) => {\n            this.setState({ employees: res.data});\n        });\n    }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T03:05:06.265Z
Question Type: function-variant
Function: componentDidMount
Function Size: 269 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: componentDidMount (JavaScript)\n// Fetches employees from the service and updates the state on component mount.\n\ncomponentDidMount(){\n        EmployeeService.getEmployees().then((res) => {\n            this.setState({ employees: res.data});\n        });\n    }
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760065470940
Repository: Unknown
Total Questions Generated: 10
Total Chunks Processed: 2
Ended: 2025-10-10T03:05:08.989Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T03:08:52.468Z
File: gothinkster-realworld-32a16a6/apps/api/server/auth-event-handler.ts
Functions Extracted: 1


Function 1: definePrivateEventHandler
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export function definePrivateEventHandler<T>(
    handler: (event: H3Event, cxt: PrivateContext) => T,
    options: { requireAuth: boolean } = {requireAuth: true}
) {
    return defineEventHandler(async (event) => {
        const token = event.node.req.headers['authorization']?.split(' ')[1];
        if (options.requireAuth && !token) {
            throw createError({ statusCode: 401, statusMessage: 'Unauthorized' });
        }
        const decoded = jwt.verify(token, 'your-secret-key');
        const context: PrivateContext = { auth: { id: (decoded as any).id } };
        return await handler(event, context);
    });
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T03:09:01.369Z
File: gothinkster-realworld-32a16a6/apps/api/server/routes/api/articles/index.get.ts
Functions Extracted: 1


Function 1: buildFindAllQuery
Language: TypeScript
Lines: 22
Full Code:
--------------------------------------------------------------------------------
const buildFindAllQuery = (query: any, auth: {id: number} | undefined) => {
    const queries: any = [];
    const orAuthorQuery = [];
    const andAuthorQuery = [];

    orAuthorQuery.push({
        demo: {
            equals: true,
        },
    });

    if (auth?.id) {
        orAuthorQuery.push({
            id: {
                equals: auth?.id,
            },
        });
    }

    if ('author' in query) {
        andAuthorQuery.push({
            username: {
                equals: query.author,
            },
        });
    }

    const authorQuery = {
        author: {
            OR: orAuthorQuery,
            AND: andAuthorQuery,
        },
    };

    queries.push(authorQuery);

    if ('tag' in query) {
        queries.push({
            tagList: {
                some: {
                    name: query.tag,
                },
            },
        });
    }

    if ('favorited' in query) {
        queries.push({
            favoritedBy: {
                some: {
                    username: {
                        equals: query.favorited,
                    },
                },
            },
        });
    }

    return queries;
};
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T03:09:05.383Z
File: gothinkster-realworld-32a16a6/apps/api/server/routes/api/user/index.get.ts
Functions Extracted: 1


Function 1: default
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export default definePrivateEventHandler(async (event, {auth}) => {
    const user = (await usePrisma().user.findUnique({
        where: {
            id: auth.id,
        },
        select: {
            id: true,
            email: true,
            username: true,
            bio: true,
            image: true,
        },
    })) as User;

    return {
        user: {
            ...user,
            token: useGenerateToken(user.id),
        }
    };
});
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T03:09:16.923Z
Question Type: select-all
Function: default
Function Size: 573 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: default (TypeScript)\n// Handles user authentication and retrieves user details from the database.\n\nexport default definePrivateEventHandler(async (event, {auth}) => {\n    const user = (await usePrisma().user.findUnique({\n        where: {\n            id: auth.id,\n        },\n        selec
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T03:09:18.971Z
Question Type: select-all
Function: definePrivateEventHandler
Function Size: 770 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: definePrivateEventHandler (TypeScript)\n// Defines an event handler that requires authentication and provides a private context.\n\nexport function definePrivateEventHandler<T>(\n    handler: (event: H3Event, cxt: PrivateContext) => T,\n    options: { requireAuth: boolean } = {requireAuth: t
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T03:09:31.376Z
Question Type: function-variant
Function: default
Function Size: 573 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: default (TypeScript)\n// Handles user authentication and retrieves user details from the database.\n\nexport default definePrivateEventHandler(async (event, {auth}) => {\n    const user = (await usePrisma().user.findUnique({\n        where: {\n            id: auth.id,\n        },\n        selec
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T03:09:34.999Z
Question Type: select-all
Function: buildFindAllQuery
Function Size: 1293 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: buildFindAllQuery (TypeScript)\n// Builds a query object for fetching articles based on provided filters.\n\nconst buildFindAllQuery = (query: any, auth: {id: number} | undefined) => {\n    const queries: any = [];\n    const orAuthorQuery = [];\n    const andAuthorQuery = [];\n\n    orAuthorQu
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T03:09:35.962Z
Question Type: function-variant
Function: buildFindAllQuery
Function Size: 1293 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: buildFindAllQuery (TypeScript)\n// Builds a query object for fetching articles based on provided filters.\n\nconst buildFindAllQuery = (query: any, auth: {id: number} | undefined) => {\n    const queries: any = [];\n    const orAuthorQuery = [];\n    const andAuthorQuery = [];\n\n    orAuthorQu
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T03:09:38.654Z
Question Type: order-sequence
Function: definePrivateEventHandler
Function Size: 770 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: definePrivateEventHandler (TypeScript)\n// Defines an event handler that requires authentication and provides a private context.\n\nexport function definePrivateEventHandler<T>(\n    handler: (event: H3Event, cxt: PrivateContext) => T,\n    options: { requireAuth: boolean } = {requireAuth: t
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T03:09:42.525Z
Question Type: true-false
Function: default
Function Size: 573 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: default (TypeScript)\n// Handles user authentication and retrieves user details from the database.\n\nexport default definePrivateEventHandler(async (event, {auth}) => {\n    const user = (await usePrisma().user.findUnique({\n        where: {\n            id: auth.id,\n        },\n        selec
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T03:09:52.745Z
Question Type: function-variant
Function: definePrivateEventHandler
Function Size: 770 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: definePrivateEventHandler (TypeScript)\n// Defines an event handler that requires authentication and provides a private context.\n\nexport function definePrivateEventHandler<T>(\n    handler: (event: H3Event, cxt: PrivateContext) => T,\n    options: { requireAuth: boolean } = {requireAuth: t
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T03:09:53.055Z
Question Type: multiple-choice
Function: buildFindAllQuery
Function Size: 1293 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: buildFindAllQuery (TypeScript)\n// Builds a query object for fetching articles based on provided filters.\n\nconst buildFindAllQuery = (query: any, auth: {id: number} | undefined) => {\n    const queries: any = [];\n    const orAuthorQuery = [];\n    const andAuthorQuery = [];\n\n    orAuthorQu
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T03:09:54.098Z
Question Type: multiple-choice
Function: definePrivateEventHandler
Function Size: 770 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: definePrivateEventHandler (TypeScript)\n// Defines an event handler that requires authentication and provides a private context.\n\nexport function definePrivateEventHandler<T>(\n    handler: (event: H3Event, cxt: PrivateContext) => T,\n    options: { requireAuth: boolean } = {requireAuth: t
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760065470940
Repository: Unknown
Total Questions Generated: 9
Total Chunks Processed: 3
Ended: 2025-10-10T03:09:56.560Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T03:10:29.529Z
File: gothinkster-realworld-32a16a6/apps/api/server/auth-event-handler.ts
Functions Extracted: 1


Function 1: definePrivateEventHandler
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export function definePrivateEventHandler<T>(
    handler: (event: H3Event, cxt: PrivateContext) => T,
    options: { requireAuth: boolean } = {requireAuth: true}
) {
    return defineEventHandler(async (event) => {
        const token = event.node.req.headers['authorization']?.split(' ')[1];
        if (options.requireAuth && !token) {
            throw createError({ statusCode: 401, statusMessage: 'Unauthorized' });
        }
        const decoded = jwt.verify(token, 'your-secret-key');
        const context: PrivateContext = { auth: { id: (decoded as any).id } };
        return handler(event, context);
    });
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T03:10:38.136Z
File: gothinkster-realworld-32a16a6/apps/api/server/routes/api/articles/index.get.ts
Functions Extracted: 1


Function 1: buildFindAllQuery
Language: TypeScript
Lines: 25
Full Code:
--------------------------------------------------------------------------------
const buildFindAllQuery = (query: any, auth: {id: number} | undefined) => {
    const queries: any = [];
    const orAuthorQuery = [];
    const andAuthorQuery = [];

    orAuthorQuery.push({
        demo: {
            equals: true,
        },
    });

    if (auth?.id) {
        orAuthorQuery.push({
            id: {
                equals: auth?.id,
            },
        });
    }

    if ('author' in query) {
        andAuthorQuery.push({
            username: {
                equals: query.author,
            },
        });
    }

    const authorQuery = {
        author: {
            OR: orAuthorQuery,
            AND: andAuthorQuery,
        },
    };

    queries.push(authorQuery);

    if ('tag' in query) {
        queries.push({
            tagList: {
                some: {
                    name: query.tag,
                },
            },
        });
    }

    if ('favorited' in query) {
        queries.push({
            favoritedBy: {
                some: {
                    username: {
                        equals: query.favorited,
                    },
                },
            },
        });
    }

    return queries;
};
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T03:10:43.123Z
File: gothinkster-realworld-32a16a6/apps/api/server/routes/api/user/index.get.ts
Functions Extracted: 1


Function 1: default
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export default definePrivateEventHandler(async (event, {auth}) => {
    const user = (await usePrisma().user.findUnique({
        where: {
            id: auth.id,
        },
        select: {
            id: true,
            email: true,
            username: true,
            bio: true,
            image: true,
        },
    })) as User;

    return {
        user: {
            ...user,
            token: useGenerateToken(user.id),
        }
    };
});
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T03:10:53.204Z
Question Type: multiple-choice
Function: default
Function Size: 573 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: default (TypeScript)\n// Handles user authentication and retrieves user details from the database.\n\nexport default definePrivateEventHandler(async (event, {auth}) => {\n    const user = (await usePrisma().user.findUnique({\n        where: {\n            id: auth.id,\n        },\n        selec
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T03:10:54.820Z
Question Type: select-all
Function: definePrivateEventHandler
Function Size: 740 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: definePrivateEventHandler (TypeScript)\n// Defines a private event handler that requires authentication.\n\nexport function definePrivateEventHandler<T>(\n    handler: (event: H3Event, cxt: PrivateContext) => T,\n    options: { requireAuth: boolean } = {requireAuth: true}\n) {\n    return defi
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T03:11:06.238Z
Question Type: function-variant
Function: buildFindAllQuery
Function Size: 1285 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: buildFindAllQuery (TypeScript)\n// Builds a query for fetching articles based on various filters.\n\nconst buildFindAllQuery = (query: any, auth: {id: number} | undefined) => {\n    const queries: any = [];\n    const orAuthorQuery = [];\n    const andAuthorQuery = [];\n\n    orAuthorQuery.push
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T03:11:06.612Z
Question Type: function-variant
Function: default
Function Size: 573 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: default (TypeScript)\n// Handles user authentication and retrieves user details from the database.\n\nexport default definePrivateEventHandler(async (event, {auth}) => {\n    const user = (await usePrisma().user.findUnique({\n        where: {\n            id: auth.id,\n        },\n        selec
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T03:11:11.122Z
Question Type: select-all
Function: buildFindAllQuery
Function Size: 1285 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: buildFindAllQuery (TypeScript)\n// Builds a query for fetching articles based on various filters.\n\nconst buildFindAllQuery = (query: any, auth: {id: number} | undefined) => {\n    const queries: any = [];\n    const orAuthorQuery = [];\n    const andAuthorQuery = [];\n\n    orAuthorQuery.push
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T03:11:17.861Z
Question Type: true-false
Function: buildFindAllQuery
Function Size: 1285 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: buildFindAllQuery (TypeScript)\n// Builds a query for fetching articles based on various filters.\n\nconst buildFindAllQuery = (query: any, auth: {id: number} | undefined) => {\n    const queries: any = [];\n    const orAuthorQuery = [];\n    const andAuthorQuery = [];\n\n    orAuthorQuery.push
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T03:11:19.099Z
Question Type: function-variant
Function: definePrivateEventHandler
Function Size: 740 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: definePrivateEventHandler (TypeScript)\n// Defines a private event handler that requires authentication.\n\nexport function definePrivateEventHandler<T>(\n    handler: (event: H3Event, cxt: PrivateContext) => T,\n    options: { requireAuth: boolean } = {requireAuth: true}\n) {\n    return defi
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T03:11:19.893Z
Question Type: multiple-choice
Function: definePrivateEventHandler
Function Size: 740 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: definePrivateEventHandler (TypeScript)\n// Defines a private event handler that requires authentication.\n\nexport function definePrivateEventHandler<T>(\n    handler: (event: H3Event, cxt: PrivateContext) => T,\n    options: { requireAuth: boolean } = {requireAuth: true}\n) {\n    return defi
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T03:11:28.711Z
Question Type: select-all
Function: default
Function Size: 573 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: default (TypeScript)\n// Handles user authentication and retrieves user details from the database.\n\nexport default definePrivateEventHandler(async (event, {auth}) => {\n    const user = (await usePrisma().user.findUnique({\n        where: {\n            id: auth.id,\n        },\n        selec
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T03:11:32.763Z
Question Type: order-sequence
Function: definePrivateEventHandler
Function Size: 740 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: definePrivateEventHandler (TypeScript)\n// Defines a private event handler that requires authentication.\n\nexport function definePrivateEventHandler<T>(\n    handler: (event: H3Event, cxt: PrivateContext) => T,\n    options: { requireAuth: boolean } = {requireAuth: true}\n) {\n    return defi
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760065470940
Repository: Unknown
Total Questions Generated: 10
Total Chunks Processed: 3
Ended: 2025-10-10T03:11:35.414Z
================================================================================

