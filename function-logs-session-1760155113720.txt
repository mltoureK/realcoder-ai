=== FUNCTION EXTRACTION & QUESTION GENERATION LOG ===
Session ID: session-1760155113720
Started: 2025-10-11T03:58:33.721Z


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T03:58:33.730Z
File: the API is ~stable, so this should be fine
Functions Extracted: 2


Function 1: closeSpanWithError
Language: TypeScript
Lines: 9
Full Code:
--------------------------------------------------------------------------------
const closeSpanWithError = (span: Span, error?: Error) => {
  if (isBubbledError(error) && error.bubble) {
    span.setAttribute('next.bubble', true)
  } else {
    if (error) {
      span.recordException(error)
      span.setAttribute('error.type', error.name)
    }
    span.setStatus({ code: SpanStatusCode.ERROR, message: error?.message })
  }
  span.end()
}
--------------------------------------------------------------------------------


Function 2: getTracePropagationData
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
public getTracePropagationData(): ClientTraceDataEntry[] {
    const activeContext = context.active()
    const entries: ClientTraceDataEntry[] = []
    propagation.inject(activeContext, entries, clientTraceDataSetter)
    return entries
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T03:58:47.700Z
File: vercel-next.js-02172b3/packages/next/src/compiled/@edge-runtime/cookies/index.d.ts
Functions Extracted: 3


Function 1: stringifyCookie
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function stringifyCookie(c: ResponseCookie | RequestCookie): string {
    const cookieParts: string[] = [];
    cookieParts.push(`${c.name}=${c.value}`);
    if (c.domain) cookieParts.push(`Domain=${c.domain}`);
    if (c.path) cookieParts.push(`Path=${c.path}`);
    if (c.expires) cookieParts.push(`Expires=${new Date(c.expires).toUTCString()}`);
    if (c.httpOnly) cookieParts.push(`HttpOnly`);
    if (c.secure) cookieParts.push(`Secure`);
    if (c.sameSite) cookieParts.push(`SameSite=${c.sameSite}`);
    return cookieParts.join('; ');
}
--------------------------------------------------------------------------------


Function 2: parseCookie
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
function parseCookie(cookie: string): Map<string, string> {
    const cookieMap = new Map<string, string>();
    const cookiePairs = cookie.split('; ');
    for (const pair of cookiePairs) {
        const [name, value] = pair.split('=');
        cookieMap.set(decodeURIComponent(name), decodeURIComponent(value));
    }
    return cookieMap;
}
--------------------------------------------------------------------------------


Function 3: parseSetCookie
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function parseSetCookie(setCookie: string): undefined | ResponseCookie {
    const cookieParts = setCookie.split('; ');
    const [nameValue, ...attributes] = cookieParts;
    const [name, value] = nameValue.split('=');
    const cookie: ResponseCookie = { name: decodeURIComponent(name), value: decodeURIComponent(value) };
    for (const attr of attributes) {
        const [key, val] = attr.split('=');
        if (key.toLowerCase() === 'expires') {
            cookie.expires = new Date(val);
        } else if (key.toLowerCase() === 'max-age') {
            cookie.maxAge = parseInt(val, 10);
        } else if (key.toLowerCase() === 'httponly') {
            cookie.httpOnly = true;
        } else if (key.toLowerCase() === 'secure') {
            cookie.secure = true;
        } else if (key.toLowerCase() === 'samesite') {
            cookie.sameSite = val;
        }
    }
    return cookie;
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T03:59:10.403Z
File: @ts-expect-error - Argument of type 'Buffer<ArrayBufferLike>' is not assignable to parameter of type 'BufferSource'.
Functions Extracted: 4


Function 1: buildEnvironmentVariablesFrom
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
function buildEnvironmentVariablesFrom(
  injectedEnvironments: Record<string, string>
): Record<string, string | undefined> {
  const pairs = Object.keys(process.env).map((key) => [key, process.env[key]])
  const env = Object.fromEntries(pairs)
  for (const key of Object.keys(injectedEnvironments)) {
    env[key] = injectedEnvironments[key]
  }
  env.NEXT_RUNTIME = 'edge'
  return env
}
--------------------------------------------------------------------------------


Function 2: throwUnsupportedAPIError
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function throwUnsupportedAPIError(name: string) {
  const error =
    new Error(`A Node.js API is used (${name}) which is not supported in the Edge Runtime.
Learn more: https://nextjs.org/docs/api-reference/edge-runtime`)
  decorateServerError(error, COMPILER_NAMES.edgeServer)
  throw error
}
--------------------------------------------------------------------------------


Function 3: createProcessPolyfill
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function createProcessPolyfill(env: Record<string, string>) {
  const processPolyfill = { env: buildEnvironmentVariablesFrom(env) }
  const overriddenValue: Record<string, any> = {}

  for (const key of Object.keys(process)) {
    if (key === 'env') continue
    Object.defineProperty(processPolyfill, key, {
      get() {
        if (overriddenValue[key] !== undefined) {
          return overriddenValue[key]
        }
        if (typeof (process as any)[key] === 'function') {
          return () => throwUnsupportedAPIError(`process.${key}`)
        }
        return undefined
      },
      set(value) {
        overriddenValue[key] = value
      },
      enumerable: false,
    })
  }
  return processPolyfill
}
--------------------------------------------------------------------------------


Function 4: createModuleContext
Language: TypeScript
Lines: 40
Full Code:
--------------------------------------------------------------------------------
async function createModuleContext(options: ModuleContextOptions) {
  const warnedEvals = new Set<string>()
  const warnedWasmCodegens = new Set<string>()
  const { edgeFunctionEntry } = options
  const wasm = await loadWasm(edgeFunctionEntry.wasm ?? [])
  const runtime = new EdgeRuntime({
    codeGeneration:
      process.env.NODE_ENV !== 'production'
        ? { strings: true, wasm: true }
        : undefined,
    extend: (context) => {
      context.process = createProcessPolyfill(edgeFunctionEntry.env)

      Object.defineProperty(context, 'require', {
        enumerable: false,
        value: (id: string) => {
          const value = NativeModuleMap.get(id)
          if (!value) {
            throw TypeError('Native module not found: ' + id)
          }
          return value
        },
      })

      if (process.env.NODE_ENV !== 'production') {
        context.__next_log_error__ = function (err: unknown) {
          options.onError(err)
        }
      }

      context.__next_eval__ = function __next_eval__(fn: Function) {
        const key = fn.toString()
        if (!warnedEvals.has(key)) {
          const warning = getServerError(
            new Error(
              `Dynamic Code Evaluation (e. g. 'eval', 'new Function') not allowed in Edge Runtime
Learn More: https://nextjs.org/docs/messages/edge-dynamic-code-evaluation`
            ),
            COMPILER_NAMES.edgeServer
          )
          warning.name = 'DynamicCodeEvaluationWarning'
          Error.captureStackTrace(warning, __next_eval__)
          warnedEvals.add(key)
          options.onWarning(warning)
        }
        return fn()
      }

      context.__next_webassembly_compile__ =
        function __next_webassembly_compile__(fn: Function) {
          const key = fn.toString()
          if (!warnedWasmCodegens.has(key)) {
            const warning = getServerError(
              new Error(`Dynamic WASM code generation (e. g. 'WebAssembly.compile') not allowed in Edge Runtime.
Learn More: https://nextjs.org/docs/messages/edge-dynamic-code-evaluation`),
              COMPILER_NAMES.edgeServer
            )
            warning.name = 'DynamicWasmCodeGenerationWarning'
            Error.captureStackTrace(warning, __next_webassembly_compile__)
            warnedWasmCodegens.add(key)
            options.onWarning(warning)
          }
          return fn()
        }

      context.__next_webassembly_instantiate__ =
        async function __next_webassembly_instantiate__(fn: Function) {
          const result = await fn()
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T03:59:17.978Z
File: This keeps autocompletion working for static routes.
Functions Extracted: 1


Function 1: generateValidatorFile
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export function generateValidatorFile(
  routesManifest: RouteTypesManifest
): string {
  const generateValidations = (
    paths: string[],
    type:
      | 'AppPageConfig'
      | 'PagesPageConfig'
      | 'LayoutConfig'
      | 'RouteHandlerConfig'
      | 'ApiRouteConfig',
    pathToRouteMap?: Map<string, string>
  ) =>
    paths
      .sort()
      .map((path) => {
        const route = pathToRouteMap ? pathToRouteMap.get(path) : undefined;
        return `Validation for ${path} of type ${type} with route ${route}`;
      });

  return 'Validator file generated';
}
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:59:47.617Z
Question Type: select-all
Function: getTracePropagationData
Function Size: 360 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getTracePropagationData (TypeScript)\n// Retrieves trace propagation data for the currently active context.\n\npublic getTracePropagationData(): ClientTraceDataEntry[] {\n    const activeContext = context.active()\n    const entries: ClientTraceDataEntry[] = []\n    propagation.inject(activeC
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:59:48.962Z
Question Type: multiple-choice
Function: buildEnvironmentVariablesFrom
Function Size: 522 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: buildEnvironmentVariablesFrom (TypeScript)\n// Builds environment variables from injected environments and process.env\n\nfunction buildEnvironmentVariablesFrom(\n  injectedEnvironments: Record<string, string>\n): Record<string, string | undefined> {\n  const pairs = Object.keys(process.env).
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:59:58.274Z
Question Type: multiple-choice
Function: parseSetCookie
Function Size: 1010 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: parseSetCookie (TypeScript)\n// Parses a Set-Cookie header value into a ResponseCookie object.\n\nfunction parseSetCookie(setCookie: string): undefined | ResponseCookie {\n    const cookieParts = setCookie.split('; ');\n    const [nameValue, ...attributes] = cookieParts;\n    const [name, val
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T03:59:59.421Z
Question Type: order-sequence
Function: closeSpanWithError
Function Size: 490 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: closeSpanWithError (TypeScript)\n// Closes a span and records an error if present, setting appropriate attributes.\n\nconst closeSpanWithError = (span: Span, error?: Error) => {\n  if (isBubbledError(error) && error.bubble) {\n    span.setAttribute('next.bubble', true)\n  } else {\n    if (err
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T04:00:10.713Z
Question Type: function-variant
Function: createModuleContext
Function Size: 2642 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: createModuleContext (TypeScript)\n// Creates a module context with runtime and error handling\n\nasync function createModuleContext(options: ModuleContextOptions) {\n  const warnedEvals = new Set<string>()\n  const warnedWasmCodegens = new Set<string>()\n  const { edgeFunctionEntry } = option
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T04:00:12.514Z
Question Type: select-all
Function: throwUnsupportedAPIError
Function Size: 409 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: throwUnsupportedAPIError (TypeScript)\n// Throws an error for unsupported Node.js APIs in Edge Runtime\n\nfunction throwUnsupportedAPIError(name: string) {\n  const error =\n    new Error(`A Node.js API is used (${name}) which is not supported in the Edge Runtime.\nLearn more: https://nextjs.
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T04:00:15.590Z
Question Type: true-false
Function: stringifyCookie
Function Size: 666 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: stringifyCookie (TypeScript)\n// Converts a cookie object into a string suitable for the Set-Cookie header.\n\nfunction stringifyCookie(c: ResponseCookie | RequestCookie): string {\n    const cookieParts: string[] = [];\n    cookieParts.push(`${c.name}=${c.value}`);\n    if (c.domain) cookieP
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T04:00:26.863Z
Question Type: function-variant
Function: createProcessPolyfill
Function Size: 838 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: createProcessPolyfill (TypeScript)\n// Creates a polyfill for the process object with overridden properties\n\nfunction createProcessPolyfill(env: Record<string, string>) {\n  const processPolyfill = { env: buildEnvironmentVariablesFrom(env) }\n  const overriddenValue: Record<string, any> = 
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760155113720
Repository: Unknown
Total Questions Generated: 11
Total Chunks Processed: 10
Ended: 2025-10-11T04:00:31.297Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T04:46:28.938Z
File: RidwaanT-motorfest-platform-29a1fe8b3979f3ddc51015b2617b71423ab3bb4c/src/features/raceTimes/components/raceTypeLabels.ts
Functions Extracted: 5


Function 1: splitRaceType
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
const splitRaceType = (raceType: string): { base: string; modifier?: string } => {
  const [basePart, modifierPart] = raceType.split(' (');
  if (!modifierPart) {
    return { base: basePart };
  }

  const sanitizedModifier = modifierPart.endsWith(')')
    ? modifierPart.slice(0, -1)
    : modifierPart;

  return {
    base: basePart,
    modifier: sanitizedModifier,
  };
};
--------------------------------------------------------------------------------


Function 2: collectSegments
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
const collectSegments = (raceType: string): string[] => {
  const { base } = splitRaceType(raceType);
  return base
    .split('>')
    .map((segment) => segment.trim())
    .filter(Boolean);
};
--------------------------------------------------------------------------------


Function 3: abbreviateRaceSegment
Language: TypeScript
Lines: 23
Full Code:
--------------------------------------------------------------------------------
export const abbreviateRaceSegment = (segment: string): string => {
  const normalized = segment.trim().toLowerCase();
  const mapped = RACE_TYPE_ABBREVIATIONS[normalized];
  if (mapped) {
    return mapped;
  }

  const tokens = segment
    .trim()
    .split(/[^A-Za-z0-9]+/)
    .filter(Boolean);

  if (tokens.length === 0) {
    return segment.trim();
  }

  const fallback = tokens
    .map((token) => {
      if (/^\d+$/.test(token)) {
        return token;
      }
      const cleaned = token.replace(/[^A-Za-z0-9]/g, '');
      if (!cleaned) {
        return '';
      }
      if (/^\d+$/.test(cleaned)) {
        return cleaned;
      }
      return cleaned.charAt(0).toUpperCase();
    })
    .join('');

  return fallback || segment.trim();
};
--------------------------------------------------------------------------------


Function 4: formatRaceTypeForMobile
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export const formatRaceTypeForMobile = (raceType: string): string => {
  if (!raceType) {
    return '';
  }

  const { base, modifier } = splitRaceType(raceType);
  const segments = base
    .split('>')
    .map((part) => part.trim())
    .filter(Boolean);
  const abbreviated = segments.map(abbreviateRaceSegment).join(' \u203a ');

  if (modifier) {
    return `${abbreviated} (${modifier})`;
  }

  return abbreviated;
};
--------------------------------------------------------------------------------


Function 5: getRaceTypeSearchTokens
Language: TypeScript
Lines: 22
Full Code:
--------------------------------------------------------------------------------
export const getRaceTypeSearchTokens = (raceType: string): string[] => {
  const normalized = raceType.trim();
  if (!normalized) {
    return [];
  }

  const lower = normalized.toLowerCase();
  const segments = collectSegments(normalized);
  const abbreviations = segments.map(abbreviateRaceSegment);
  const abbreviatedChain = abbreviations.join(' \u203a ');

  const tokens = new Set<string>();
  tokens.add(lower);
  segments.forEach((segment) => tokens.add(segment.toLowerCase()));
  abbreviations.forEach((abbr) => tokens.add(abbr.toLowerCase()));
  if (abbreviatedChain) {
    tokens.add(abbreviatedChain.toLowerCase());
  }

  return Array.from(tokens);
};
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T04:46:57.454Z
File: For displaying the list of race times in a table
Functions Extracted: 5


Function 1: filteredTimes
Language: TypeScript
Lines: 20
Full Code:
--------------------------------------------------------------------------------
const filteredTimes = React.useMemo(() => {
    const normalizedSearch = searchQuery.trim().toLowerCase();

    const matchesSearch = (entry: RaceTimeEntry) => {
        if (!normalizedSearch) {
            return true;
        }

        const raceTypeTokens = getRaceTypeSearchTokens(entry.raceType);
        const searchableParts = [
            entry.raceType,
            formatRaceTypeForMobile(entry.raceType),
            ...raceTypeTokens,
            entry.location,
            entry.time,
            entry.source,
            entry.position !== undefined ? String(entry.position) : '',
            ...entry.vehicles,
            ...entry.vehicleClasses,
        ].filter((value) => value && value.trim().length > 0);

        const searchableText = searchableParts.join(' ').toLowerCase();

        return searchableText.includes(normalizedSearch);
    };

    return raceTimes.filter(
        (rt) =>
            (filterRaceType ? rt.raceType === filterRaceType : true) &&
            (filterLocation ? rt.location === filterLocation : true) &&
            matchesSearch(rt)
    );
}, [raceTimes, filterRaceType, filterLocation, searchQuery]);
--------------------------------------------------------------------------------


Function 2: sortedTimes
Language: TypeScript
Lines: 20
Full Code:
--------------------------------------------------------------------------------
const sortedTimes = React.useMemo(() => {
    const sorted = [...filteredTimes];
    if (!sortConfig.key) {
        return sorted;
    }

    const compare = (a: RaceTimeEntry, b: RaceTimeEntry) => {
        switch (sortConfig.key) {
            case 'time':
                return raceTimeToMilliseconds(a.time) - raceTimeToMilliseconds(b.time);
            case 'position':
                return (a.position ?? Number.MAX_SAFE_INTEGER) - (b.position ?? Number.MAX_SAFE_INTEGER);
            case 'location':
                return a.location.localeCompare(b.location);
            case 'raceType':
                return a.raceType.localeCompare(b.raceType);
            default:
                return 0;
        }
    };

    sorted.sort((a, b) => {
        const result = compare(a, b);
        return sortConfig.direction === 'asc' ? result : -result;
    });

    return sorted;
}, [filteredTimes, sortConfig]);
--------------------------------------------------------------------------------


Function 3: requestSort
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
const requestSort = (key: SortableColumn) => {
    setSortConfig((prev) => {
        const direction = prev.key === key && prev.direction === 'asc' ? 'desc' : 'asc';
        return { key, direction };
    });
};
--------------------------------------------------------------------------------


Function 4: getAriaSort
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
const getAriaSort = (column: SortableColumn): 'none' | 'ascending' | 'descending' => {
    if (sortConfig.key !== column) {
        return 'none';
    }
    return sortConfig.direction === 'asc' ? 'ascending' : 'descending';
};
--------------------------------------------------------------------------------


Function 5: renderSortIcon
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
const renderSortIcon = (column: SortableColumn) => {
    if (sortConfig.key !== column) {
        return <ChevronsUpDown className="h-3 w-3 opacity-60" aria-hidden="true" />;
    }

    return sortConfig.direction === 'asc' ? (
        <ChevronUp className="h-3 w-3" aria-hidden="true" />
    ) : (
        <ChevronDown className="h-3 w-3" aria-hidden="true" />
    );
};
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T04:47:07.423Z
File: RidwaanT-motorfest-platform-29a1fe8b3979f3ddc51015b2617b71423ab3bb4c/src/utils/time.ts
Functions Extracted: 1


Function 1: formatRaceTimeInput
Language: TypeScript
Lines: 24
Full Code:
--------------------------------------------------------------------------------
export function formatRaceTimeInput(input: string, previousValue = ''): string {
  const digits = input.replace(/\D/g, '').slice(0, 7);
  const previousDigits = previousValue.replace(/\D/g, '');
  const isDeleting =
    digits.length < previousDigits.length || input.length < previousValue.length;
  const isAddingDigit = digits.length > previousDigits.length;

  if (digits.length === 0) {
    return '';
  }

  if (digits.length <= 2) {

    if (digits.length === 2 && !isDeleting) {
      return `${digits}:`;
    }
    return digits;
  }

  const minutes = digits.slice(0, 2);
  const seconds = digits.slice(2, 4);
  const milliseconds = digits.slice(4, 7);

  if (digits.length === 3) {
    return `${minutes}:${seconds}`;
  }

  if (digits.length === 4) {
    const base = `${minutes}:${seconds}`;
    if (!isDeleting && (isAddingDigit || previousValue.includes('.'))) {
      return `${base}.`;
    }

    return base;
  }
  return `${minutes}:${seconds}.${milliseconds}`;
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T04:47:17.529Z
File: RidwaanT-motorfest-platform-29a1fe8b3979f3ddc51015b2617b71423ab3bb4c/src/features/raceTimes/api/raceTimes.ts
Functions Extracted: 2


Function 1: addRaceTime
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export async function addRaceTime(
  entry: Omit<RaceTimeEntry, 'id' | 'timestamp'>
): Promise<void> {
  const user = auth.currentUser;
  if (!user) throw new Error('Authentication required to add a race time.');

  try {
    const raceTimesCollection = collection(db, 'users', user.uid, 'raceTimes');
    await addDoc(raceTimesCollection, {
      ...entry,
      timestamp: serverTimestamp(),
    });
  } catch (err) {
    const message =
      err instanceof Error ? err.message : 'Unable to save race time';
    console.error('Error adding document: ', message);
    throw new Error(message);
  }
}
--------------------------------------------------------------------------------


Function 2: updateRaceTime
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export async function updateRaceTime(id: string, time: string): Promise<void> {
  const user = auth.currentUser;
  if (!user) throw new Error('Authentication required to update a race time.');

  try {
    const raceTimeDoc = doc(db, 'users', user.uid, 'raceTimes', id);
    await updateDoc(raceTimeDoc, {
      time,
      source: 'manual',
    });
  } catch (err) {
    const message =
      err instanceof Error ? err.message : 'Unable to update race time';
    console.error('Error updating document: ', message);
    throw new Error(message);
  }
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T04:47:34.988Z
File: RidwaanT-motorfest-platform-29a1fe8b3979f3ddc51015b2617b71423ab3bb4c/src/features/auth/components/AuthModal.tsx
Functions Extracted: 2


Function 1: handleEmailAuth
Language: TypeScript
Lines: 27
Full Code:
--------------------------------------------------------------------------------
const handleEmailAuth = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setLoading(true);
    try {
      const currentUser = authInstance.currentUser;

      if (isRegister) {
        try {
          if (currentUser?.isAnonymous) {
            const credential = EmailAuthProvider.credential(email, password);
            await linkWithCredential(currentUser, credential);
            if (auth.currentUser) {
              await sendEmailVerification(auth.currentUser);
              showMessage('Verification email sent! Please check your inbox (and spam folder).');
            }
          } else {
            const userCredential = await createUserWithEmailAndPassword(
              authInstance,
              email,
              password
            );
            await sendEmailVerification(userCredential.user);
            showMessage('Verification email sent! Please check your inbox (and spam folder).');
          }
        } catch (err) {
          const code = hasAuthCode(err) ? err.code : null;
          if (code === 'auth/email-already-in-use' || code === 'auth/credential-already-in-use') {
            setError('This email is already in use. Please sign in or use a different email.');
          } else {
            setError(getErrorMessage(err, 'Registration failed.'));
          }
          return;
        }
      } else {
        await signInWithEmailAndPassword(authInstance, email, password);
      }
      onClose();
    } catch (err: unknown) {
      setError(getErrorMessage(err, 'Authentication failed'));
    } finally {
      setLoading(false);
    }
  };
--------------------------------------------------------------------------------


Function 2: handleGoogle
Language: TypeScript
Lines: 27
Full Code:
--------------------------------------------------------------------------------
const handleGoogle = async () => {
    setError(null);
    setLoading(true);
    try {
      const currentUser = authInstance.currentUser;

      if (currentUser?.isAnonymous) {
        await linkWithPopup(currentUser, providerInstance);
        showMessage('Account linked successfully!');
      } else {
        const result = await signInWithPopup(authInstance, providerInstance);
        if (getAdditionalUserInfo(result)?.isNewUser) {
          showMessage('Account created successfully!');
        }
      }
      onClose();
    } catch (err: unknown) {
      const code = hasAuthCode(err) ? err.code : null;
      if (code === 'auth/credential-already-in-use') {
        if (err instanceof FirebaseError) {
          const credential = GoogleAuthProvider.credentialFromError(err);
          if (credential) {
            try {
              await signInWithCredential(authInstance, credential);
              onClose();
              return;
            } catch (signInError: unknown) {
              setError(getErrorMessage(signInError, 'Sign-in failed after credential conflict'));
              return;
            }
          }
        }
        setError('This Google account is already linked to another user. Please sign in with that account instead.');
      } else {
        setError(getErrorMessage(err, 'Google sign-in failed'));
      }
    } finally {
      setLoading(false);
    }
  };
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T04:47:42.000Z
Question Type: multiple-choice
Function: getAriaSort
Function Size: 357 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: getAriaSort (TypeScript)\n// Returns the ARIA sort state for a given column based on the current sort configuration.\n\nconst getAriaSort = (column: SortableColumn): 'none' | 'ascending' | 'descending' => {\n    if (sortConfig.key !== column) {\n        return 'none';\n    }\n    return sortCo
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T04:47:44.530Z
Question Type: true-false
Function: handleGoogle
Function Size: 1513 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: handleGoogle (TypeScript)\n// Handles Google authentication for sign in and linking accounts\n\nconst handleGoogle = async () => {\n    setError(null);\n    setLoading(true);\n    try {\n      const currentUser = authInstance.currentUser;\n\n      if (currentUser?.isAnonymous) {\n        await li
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T04:47:48.186Z
Question Type: order-sequence
Function: requestSort
Function Size: 325 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: requestSort (TypeScript)\n// Requests a sort on the specified column and toggles the sort direction.\n\nconst requestSort = (key: SortableColumn) => {\n    setSortConfig((prev) => {\n        const direction = prev.key === key && prev.direction === 'asc' ? 'desc' : 'asc';\n        return { key
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T04:47:55.189Z
Question Type: select-all
Function: handleEmailAuth
Function Size: 1729 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: handleEmailAuth (TypeScript)\n// Handles email authentication for sign in and registration\n\nconst handleEmailAuth = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(null);\n    setLoading(true);\n    try {\n      const currentUser = authInstance.currentUser;\n\n      if (i
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T04:47:55.429Z
Question Type: select-all
Function: collectSegments
Function Size: 303 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: collectSegments (TypeScript)\n// Collects and trims segments from the base part of a race type.\n\nconst collectSegments = (raceType: string): string[] => {\n  const { base } = splitRaceType(raceType);\n  return base\n    .split('>')\n    .map((segment) => segment.trim())\n    .filter(Boolean);
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T04:47:55.555Z
Question Type: function-variant
Function: splitRaceType
Function Size: 478 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: splitRaceType (TypeScript)\n// Splits a race type string into base and modifier parts.\n\nconst splitRaceType = (raceType: string): { base: string; modifier?: string } => {\n  const [basePart, modifierPart] = raceType.split(' (');\n  if (!modifierPart) {\n    return { base: basePart };\n  }\n\n 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T04:48:05.311Z
Question Type: multiple-choice
Function: sortedTimes
Function Size: 1032 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: sortedTimes (TypeScript)\n// Sorts the filtered race times based on the current sort configuration.\n\nconst sortedTimes = React.useMemo(() => {\n    const sorted = [...filteredTimes];\n    if (!sortConfig.key) {\n        return sorted;\n    }\n\n    const compare = (a: RaceTimeEntry, b: RaceTim
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T04:48:12.867Z
Question Type: function-variant
Function: updateRaceTime
Function Size: 655 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: updateRaceTime (TypeScript)\n// Updates the time for a specific race entry in Firestore.\n\nexport async function updateRaceTime(id: string, time: string): Promise<void> {\n  const user = auth.currentUser;\n  if (!user) throw new Error('Authentication required to update a race time.');\n\n  tr
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760155113720
Repository: Unknown
Total Questions Generated: 9
Total Chunks Processed: 15
Ended: 2025-10-11T04:48:14.996Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T05:13:50.315Z
File: TODO: Convert to DELETE
Functions Extracted: 10


Function 1: putUpdateMyAbout
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
export function putUpdateMyAbout(
  values: MyAbout
): Promise<ResponseWithData<void>> {
  return put('/update-my-about', { ...values });
}
--------------------------------------------------------------------------------


Function 2: putUpdateMyUsername
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
export function putUpdateMyUsername(
  username: string
): Promise<ResponseWithData<void>> {
  return put('/update-my-username', { username });
}
--------------------------------------------------------------------------------


Function 3: putUpdateMyProfileUI
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
export function putUpdateMyProfileUI(
  profileUI: User['profileUI']
): Promise<ResponseWithData<void>> {
  return put('/update-my-profileui', { profileUI });
}
--------------------------------------------------------------------------------


Function 4: putUpdateMySocials
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
export function putUpdateMySocials(
  update: Record<string, string>
): Promise<ResponseWithData<void>> {
  return put('/update-my-socials', update);
}
--------------------------------------------------------------------------------


Function 5: putUpdateMyKeyboardShortcuts
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
export function putUpdateMyKeyboardShortcuts(
  update: Record<string, string>
): Promise<ResponseWithData<void>> {
  return put('/update-my-keyboard-shortcuts', update);
}
--------------------------------------------------------------------------------


Function 6: putUpdateMyHonesty
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
export function putUpdateMyHonesty(
  update: Record<string, string>
): Promise<ResponseWithData<void>> {
  return put('/update-my-honesty', update);
}
--------------------------------------------------------------------------------


Function 7: putUpdateMyQuincyEmail
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
export function putUpdateMyQuincyEmail(update: {
  sendQuincyEmail: boolean;
}): Promise<ResponseWithData<void>> {
  return put('/update-my-quincy-email', update);
}
--------------------------------------------------------------------------------


Function 8: putUpdateMyPortfolio
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
export function putUpdateMyPortfolio(
  update: Record<string, string>
): Promise<ResponseWithData<void>> {
  return put('/update-my-portfolio', update);
}
--------------------------------------------------------------------------------


Function 9: putUserUpdateEmail
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
export function putUserUpdateEmail(
  email: string
): Promise<ResponseWithData<void>> {
  return put('/update-my-email', { email });
}
--------------------------------------------------------------------------------


Function 10: putVerifyCert
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
export function putVerifyCert(
  certSlug: string
): Promise<ResponseWithData<void>> {
  return put('/certificate/verify', { certSlug });
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T05:14:47.961Z
File: freeCodeCamp-freeCodeCamp-9932f6e/client/src/components/Donation/donation-modal-body.tsx
Functions Extracted: 3


Function 1: DonationModalBody
Language: TypeScript
Lines: 37
Full Code:
--------------------------------------------------------------------------------
function DonationModalBody({ closeDonationModal, donatableSectionRecentlyCompleted, setCanClose }: DonationModalBodyProps): JSX.Element {
  const [donationAttempted, setDonationAttempted] = useState(false);
  const [showHeaderAndFooter, setShowHeaderAndFooter] = useState(true);
  const [isAnimationVisible, setIsAnimationVisible] = useState(true);
  const [showForm, setShowForm] = useState(false);
  const [secondsRemaining, setSecondsRemaining] = useState(20);
  const useShortDonationBlocks = useFeature('short-donation-blocks').on;

  const handleProcessing = () => {
    setDonationAttempted(true);
  };

  useEffect(() => {
    let intervalId: NodeJS.Timeout;
    if (useShortDonationBlocks && donatableSectionRecentlyCompleted) {
      setIsAnimationVisible(false);
      setCanClose(true);
    } else {
      intervalId = setInterval(() => {
        setSecondsRemaining(prevSeconds => prevSeconds - 1);
      }, 1000);
      if (secondsRemaining <= 0) {
        setIsAnimationVisible(false);
        setCanClose(true);
        clearInterval(intervalId);
      }
    }
    return () => clearInterval(intervalId);
  }, [
    secondsRemaining,
    setCanClose,
    donatableSectionRecentlyCompleted,
    useShortDonationBlocks
  ]);

  return (
    <Modal.Body borderless alignment='start'>
      <div aria-live='polite' className='donation-modal'>
        {isAnimationVisible ? (
          <AnimationContainer secondsRemaining={secondsRemaining} />
        ) : (
          <BecomeASupporterConfirmation
            donatableSectionRecentlyCompleted={donatableSectionRecentlyCompleted}
            showHeaderAndFooter={showHeaderAndFooter}
            closeDonationModal={closeDonationModal}
            donationAttempted={donationAttempted}
            showForm={showForm}
            setShowHeaderAndFooter={setShowHeaderAndFooter}
            handleProcessing={handleProcessing}
            setShowForm={setShowForm}
            useShortDonationBlocks={useShortDonationBlocks}
          />
        )}
      </div>
    </Modal.Body>
  );
}
--------------------------------------------------------------------------------


Function 2: handleBecomeSupporterClick
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
const handleBecomeSupporterClick = () => {
    callGA({
      event: 'donation_related',
      action: `Modal Become Supporter Click`
    });
    setShowForm(true);
  };
--------------------------------------------------------------------------------


Function 3: useEffect
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
useEffect(() => {
    let intervalId: NodeJS.Timeout;
    if (useShortDonationBlocks && donatableSectionRecentlyCompleted) {
      setIsAnimationVisible(false);
      setCanClose(true);
    } else {
      intervalId = setInterval(() => {
        setSecondsRemaining(prevSeconds => prevSeconds - 1);
      }, 1000);
      if (secondsRemaining <= 0) {
        setIsAnimationVisible(false);
        setCanClose(true);
        clearInterval(intervalId);
      }
    }
    return () => clearInterval(intervalId);
  }, [
    secondsRemaining,
    setCanClose,
    donatableSectionRecentlyCompleted,
    useShortDonationBlocks
  ]);
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T05:15:12.540Z
File: Items per page in timeline.
Functions Extracted: 4


Function 1: viewProject
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function viewProject(completedChallenge: CompletedChallenge): void {
    setCompletedChallenge(completedChallenge);
    setProjectTitle(
      idToNameMap.get(completedChallenge.id)?.challengeTitle ?? ''
    );
    openModal('projectPreview');
}
--------------------------------------------------------------------------------


Function 2: viewExamResults
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function viewExamResults(completedChallenge: CompletedChallenge): void {
    setCompletedChallenge(completedChallenge);
    setProjectTitle(
      idToNameMap.get(completedChallenge.id)?.challengeTitle ?? ''
    );
    openModal('examResults');
}
--------------------------------------------------------------------------------


Function 3: renderViewButton
Language: TypeScript
Lines: 11
Full Code:
--------------------------------------------------------------------------------
function renderViewButton(
    completedChallenge: CompletedChallenge
  ): React.ReactNode {
    const { id } = completedChallenge;
    const projectTitle = idToNameMap.get(id)?.challengeTitle || '';
    return (
      <SolutionDisplayWidget
        completedChallenge={completedChallenge}
        projectTitle={projectTitle}
        showUserCode={() => viewSolution(completedChallenge)}
        showProjectPreview={() => viewProject(completedChallenge)}
        showExamResults={() => viewExamResults(completedChallenge)}
        displayContext='timeline'
      ></SolutionDisplayWidget>
    );
  }
--------------------------------------------------------------------------------


Function 4: renderCompletion
Language: TypeScript
Lines: 21
Full Code:
--------------------------------------------------------------------------------
function renderCompletion(completed: CompletedChallenge) {
    const { id } = completed;
    const challenge = idToNameMap.get(id);
    if (!challenge) return;
    const { challengeTitle, challengePath, certPath } = challenge;
    const completedDate = new Date(completed.completedDate);
    return (
      <tr className='timeline-row' key={id}>
        <td>
          {certPath ? (
            <Link
              className='timeline-cert-link'
              to={`/certification/${username}/${certPath}`}
            >
              {challengeTitle}
              <CertificationIcon />
            </Link>
          ) : (
            <Link to={challengePath}>{challengeTitle}</Link>
          )}
        </td>
        <td>{renderViewButton(completed)}</td>
        <td className='text-center'>
          <time dateTime={completedDate.toISOString()}>
            {completedDate.toLocaleString([localeCode, 'en-US'], {
              year: 'numeric',
              month: 'short',
              day: 'numeric'
            })}
          </time>
        </td>
      </tr>
    );
  }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-11T05:15:35.489Z
File: freeCodeCamp-freeCodeCamp-9932f6e/client/src/components/settings/email.tsx
Functions Extracted: 1


Function 1: EmailSettings
Language: TypeScript
Lines: 82
Full Code:
--------------------------------------------------------------------------------
function EmailSettings({
  email,
  isEmailVerified,
  sendQuincyEmail,
  t,
  updateMyEmail,
  updateQuincyEmail
}: EmailProps): JSX.Element {
  const [emailForm, setEmailForm] = useState<EmailForm>({
    currentEmail: email,
    newEmail: '',
    confirmNewEmail: '',
    isPristine: true
  });

  function handleSubmit(e: React.FormEvent): void {
    e.preventDefault();
    updateMyEmail(emailForm.newEmail);
  }

  function createHandleEmailFormChange(
    key: 'newEmail' | 'confirmNewEmail'
  ): (e: React.ChangeEvent<HTMLInputElement>) => void {
    return e => {
      e.preventDefault();
      const userInput = e.target.value.slice();
      setEmailForm(prev => ({
        ...prev,
        [key]: userInput,
        isPristine: userInput === prev.currentEmail
      }));
    };
  }

  function getValidationForNewEmail(): EmailValidation {
    const { newEmail, currentEmail } = emailForm;
    if (!maybeEmailRE.test(newEmail)) {
      return {
        state: null,
        message: ''
      };
    }
    if (newEmail === currentEmail) {
      return {
        state: 'error',
        message: t('validation.same-email')
      };
    }
    if (isEmail(newEmail)) {
      return { state: 'success', message: '' };
    } else {
      return {
        state: 'error',
        message: t('validation.invalid-email')
      };
    }
  }

  function getValidationForConfirmEmail(): EmailValidation {
    const { confirmNewEmail, newEmail } = emailForm;
    if (!maybeEmailRE.test(newEmail)) {
      return {
        state: null,
        message: ''
      };
    }
    const isMatch = newEmail === confirmNewEmail;
    if (maybeEmailRE.test(confirmNewEmail)) {
      return {
        state: isMatch ? 'success' : 'error',
        message: isMatch ? '' : t('validation.email-mismatch')
      };
    } else {
      return {
        state: null,
        message: ''
      };
    }
  }

  const { newEmail, confirmNewEmail, currentEmail, isPristine } = emailForm;

  const { state: newEmailValidation, message: newEmailValidationMessage } =
    getValidationForNewEmail();

  const {
    state: confirmEmailValidation,
    message: confirmEmailValidationMessage
  } = getValidationForConfirmEmail();
  const isDisabled =
    newEmailValidation !== 'success' ||
    confirmEmailValidation !== 'success' ||
    isPristine;
  if (!currentEmail) {
    return (
      <div>
        <FullWidthRow>
          <p className='large-p text-center'>{t('settings.email.missing')}</p>
        </FullWidthRow>
        <FullWidthRow>
          <Button
            block={true}
            size='large'
            variant='primary'
            href='/update-email'
          >
            {t('buttons.edit')}
          </Button>
        </FullWidthRow>
      </div>
    );
  }
  return (
    <div className='email-settings'>
      <SectionHeader>{t('settings.email.heading')}</SectionHeader>
      {isEmailVerified ? null : (
        <FullWidthRow>
          <HelpBlock>
            <Callout
              variant='info'
              className='text-center'
              data-playwright-test-label='email-verification-alert'
            >
              {t('settings.email.not-verified')}
              <br />
              <Trans i18nKey='settings.email.check'>
                <Link
                  data-playwright-test-label='email-verification-link'
                  to='/update-email'
                />
              </Trans>
            </Callout>
          </HelpBlock>
        </FullWidthRow>
      )}
      <FullWidthRow>
        <form
          id='form-update-email'
          {...(!isDisabled
            ? { onSubmit: handleSubmit }
            : { onSubmit: e => e.preventDefault() })}
        >
          <FormGroup controlId='current-email'>
            <ControlLabel>{t('settings.email.current')}</ControlLabel>
            <FormControl.Static>{currentEmail}</FormControl.Static>
          </FormGroup>
          <div role='group' aria-label={t('settings.email.heading')}>
            <FormGroup
              controlId='new-email'
              validationState={newEmailValidation}
            >
              <ControlLabel htmlFor='new-email-input'>
                {t('settings.email.new')}
              </ControlLabel>
              <FormControl
                onChange={createHandleEmailFormChange('newEmail')}
                type='email'
                value={newEmail}
                id='new-email-input'
              />
              {newEmailValidationMessage ? (
                <HelpBlock data-playwright-test-label='new-email-validation'>
                  {newEmailValidationMessage}
                </HelpBlock>
              ) : null}
            </FormGroup>
            <FormGroup
              controlId='confirm-email'
              validationState={confirmEmailValidation}
            >
              <ControlLabel htmlFor='confirm-email-input'>
                {t('settings.email.confirm')}
              </ControlLabel>
              <FormControl
                onChange={createHandleEmailFormChange('confirmNewEmail')}
                type='email'
                value={confirmNewEmail}
                id='confirm-email-input'
              />
              {confirmEmailValidationMessage ? (
                <HelpBlock data-playwright-test-label='confirm-email-validation'>
                  {confirmEmailValidationMessage}
                </HelpBlock>
              ) : null}
            </FormGroup>
          </div>
          <BlockSaveButton
            disabled={isDisabled}
            bgSize='large'
            {...(isDisabled && { tabIndex: -1 })}
          >
            {t('buttons.save')}{' '}
            <span className='sr-only'>{t('settings.email.heading')}</span>
          </BlockSaveButton>
        </form>
      </FullWidthRow>
      <Spacer size='m' />
      <FullWidthRow>
        <ToggleButtonSetting
          action={t('settings.email.weekly')}
          flag={!!sendQuincyEmail}
          flagName='sendQuincyEmail'
          offLabel={t('buttons.no-thanks')}
          onLabel={t('buttons.yes-please')}
          toggleFlag={() => updateQuincyEmail(!sendQuincyEmail)}
        />
      </FullWidthRow>
    </div>
  );
}
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T05:15:39.482Z
Question Type: true-false
Function: putUpdateMyPortfolio
Function Size: 248 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: putUpdateMyPortfolio (TypeScript)\n// Updates the user's portfolio information.\n\nexport function putUpdateMyPortfolio(\n  update: Record<string, string>\n): Promise<ResponseWithData<void>> {\n  return put('/update-my-portfolio', update);\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T05:15:42.841Z
Question Type: select-all
Function: putUpdateMyQuincyEmail
Function Size: 263 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: putUpdateMyQuincyEmail (TypeScript)\n// Updates the user's Quincy email preferences.\n\nexport function putUpdateMyQuincyEmail(update: {\n  sendQuincyEmail: boolean;\n}): Promise<ResponseWithData<void>> {\n  return put('/update-my-quincy-email', update);\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T05:15:42.894Z
Question Type: multiple-choice
Function: handleBecomeSupporterClick
Function Size: 276 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: handleBecomeSupporterClick (TypeScript)\n// Handles the click event for becoming a supporter.\n\nconst handleBecomeSupporterClick = () => {\n    callGA({\n      event: 'donation_related',\n      action: `Modal Become Supporter Click`\n    });\n    setShowForm(true);\n  };
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T05:15:48.247Z
Question Type: select-all
Function: putUpdateMyHonesty
Function Size: 237 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: putUpdateMyHonesty (TypeScript)\n// Updates the user's honesty settings.\n\nexport function putUpdateMyHonesty(\n  update: Record<string, string>\n): Promise<ResponseWithData<void>> {\n  return put('/update-my-honesty', update);\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T05:15:53.192Z
Question Type: function-variant
Function: putUpdateMyKeyboardShortcuts
Function Size: 270 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: putUpdateMyKeyboardShortcuts (TypeScript)\n// Updates the user's keyboard shortcuts.\n\nexport function putUpdateMyKeyboardShortcuts(\n  update: Record<string, string>\n): Promise<ResponseWithData<void>> {\n  return put('/update-my-keyboard-shortcuts', update);\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T05:15:54.387Z
Question Type: function-variant
Function: putVerifyCert
Function Size: 222 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: putVerifyCert (TypeScript)\n// Verifies a certificate using its slug.\n\nexport function putVerifyCert(\n  certSlug: string\n): Promise<ResponseWithData<void>> {\n  return put('/certificate/verify', { certSlug });\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T05:16:01.146Z
Question Type: order-sequence
Function: viewProject
Function Size: 353 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: viewProject (TypeScript)\n// Sets the completed challenge and opens the project preview modal.\n\nfunction viewProject(completedChallenge: CompletedChallenge): void {\n    setCompletedChallenge(completedChallenge);\n    setProjectTitle(\n      idToNameMap.get(completedChallenge.id)?.challenge
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-11T05:16:01.276Z
Question Type: multiple-choice
Function: useEffect
Function Size: 740 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: useEffect (TypeScript)\n// Sets up an interval to manage countdown for donation animation visibility.\n\nuseEffect(() => {\n    let intervalId: NodeJS.Timeout;\n    if (useShortDonationBlocks && donatableSectionRecentlyCompleted) {\n      setIsAnimationVisible(false);\n      setCanClose(true);
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760155113720
Repository: Unknown
Total Questions Generated: 12
Total Chunks Processed: 18
Ended: 2025-10-11T05:16:09.337Z
================================================================================

