=== FUNCTION EXTRACTION & QUESTION GENERATION LOG ===
Session ID: session-1760070101142
Started: 2025-10-10T04:21:41.143Z


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T04:21:41.144Z
File: TanStack-query-f4a0cd5/packages/query-devtools/src/icons/index.tsx
Functions Extracted: 1


Function 1: TanstackLogo
Language: TypeScript
Lines: 119
Full Code:
--------------------------------------------------------------------------------
export function TanstackLogo() {
  const id = createUniqueId();
  return (
    <svg version="1.0" viewBox="0 0 633 633">
      <linearGradient
        id={`a-${id}`}
        x1="-666.45"
        x2="-666.45"
        y1="163.28"
        y2="163.99"
        gradientTransform="matrix(633 0 0 633 422177 -103358)"
        gradientUnits="userSpaceOnUse"
      >
        <stop stop-color="#6BDAFF" offset="0" />
        <stop stop-color="#F9FFB5" offset=".32" />
        <stop stop-color="#FFA770" offset=".71" />
        <stop stop-color="#FF7373" offset="1" />
      </linearGradient>
      <circle cx="316.5" cy="316.5" r="316.5" fill={`url(#a-${id})`} />

      <defs>
        <filter
          id={`am-${id}`}
          x="-137.5"
          y="412"
          width="454"
          height="396.9"
          filterUnits="userSpaceOnUse"
        >
          <feColorMatrix values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 1 0" />
        </filter>
      </defs>

      <mask
        id={`b-${id}`}
        x="-137.5"
        y="412"
        width="454"
        height="396.9"
        maskUnits="userSpaceOnUse"
      >
        <g filter={`url(#am-${id})`}>  
          <circle cx="316.5" cy="316.5" r="316.5" fill="#fff" />
        </g>
      </mask>
      <g mask={`url(#b-${id})`}>  
        <ellipse
          cx="89.5"
          cy="610.5"
          rx="214.5"
          ry="186"
          fill="#015064"
          stroke="#00CFE2"
          stroke-width="25"
        />
      </g>
      <defs>
        <filter
          id={`ah-${id}`}
          x="316.5"
          y="412"
          width="454"
          height="396.9"
          filterUnits="userSpaceOnUse"
        >
          <feColorMatrix values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 1 0" />
        </filter>
      </defs>

      <mask
        id={`k-${id}`}
        x="316.5"
        y="412"
        width="454"
        height="396.9"
        maskUnits="userSpaceOnUse"
      >
        <g filter={`url(#ah-${id})`}>  
          <circle cx="316.5" cy="316.5" r="316.5" fill="#fff" />
        </g>
      </mask>
      <g mask={`url(#k-${id})`}>  
        <ellipse
          cx="543.5"
          cy="610.5"
          rx="214.5"
          ry="186"
          fill="#015064"
          stroke="#00CFE2"
          stroke-width="25"
        />
      </g>
      <defs>
        <filter
          id={`ae-${id}`}
          x="-137.5"
          y="450"
          width="454"
          height="396.9"
          filterUnits="userSpaceOnUse"
        >
          <feColorMatrix values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 1 0" />
        </filter>
      </defs>

      <mask
        id={`j-${id}`}
        x="-137.5"
        y="450"
        width="454"
        height="396.9"
        maskUnits="userSpaceOnUse"
      >
        <g filter={`url(#ae-${id})`}>  
          <circle cx="316.5" cy="316.5" r="316.5" fill="#fff" />
        </g>
      </mask>
      <g mask={`url(#j-${id})`}>  
        <ellipse
          cx="89.5"
          cy="648.5"
          rx="214.5"
          ry="186"
          fill="#015064"
          stroke="#00A8B8"
          stroke-width="25"
        />
      </g>
      <defs>
        <filter
          id={`ai-${id}`}
          x="316.5"
          y="450"
          width="454"
          height="396.9"
          filterUnits="userSpaceOnUse"
        >
          <feColorMatrix values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 1 0" />
        </filter>
      </defs>

      <mask
        id={`i-${id}`}
        x="316.5"
        y="450"
        width="454"
        height="396.9"
        maskUnits="userSpaceOnUse"
      >
        <g filter={`url(#ai-${id})`}>  
          <circle cx="316.5" cy="316.5" r="316.5" fill="#fff" />
        </g>
      </mask>
      <g mask={`url(#i-${id})`}>  
        <ellipse
          cx="543.5"
          cy="648.5"
          rx="214.5"
          ry="186"
          fill="#015064"
          stroke="#00A8B8"
          stroke-width="25"
        />
      </g>
      <defs>
        <filter
          id={`aj-${id}`}
          x="-137.5"
          y="486"
          width="454"
          height="396.9"
          filterUnits="userSpaceOnUse"
        >
          <feColorMatrix values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 1 0" />
        </filter>
      </defs>

      <mask
        id={`h-${id}`}
        x="-137.5"
        y="486"
        width="454"
        height="396.9"
        maskUnits="userSpaceOnUse"
      >
        <g filter={`url(#aj-${id})`}>  
          <circle cx="316.5" cy="316.5" r="316.5" fill="#fff" />
        </g>
      </mask>
      <g mask={`url(#h-${id})`}>  
        <ellipse
          cx="89.5"
          cy="684.5"
          rx="214.5"
          ry="186"
          fill="#015064"
          stroke="#007782"
          stroke-width="25"
        />
      </g>
      <defs>
        <filter
          id={`ag-${id}`}
          x="316.5"
          y="486"
          width="454"
          height="396.9"
          filterUnits="userSpaceOnUse"
        >
          <feColorMatrix values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 1 0" />
        </filter>
      </defs>

      <mask
        id={`g-${id}`}
        x="316.5"
        y="486"
        width="454"
        height="396.9"
        maskUnits="userSpaceOnUse"
      >
        <g filter={`url(#ag-${id})`}>  
          <circle cx="316.5" cy="316.5" r="316.5" fill="#fff" />
        </g>
      </mask>
      <g mask={`url(#g-${id})`}>  
        <ellipse
          cx="543.5"
          cy="684.5"
          rx="214.5"
          ry="186"
          fill="#015064"
          stroke="#007782"
          stroke-width="25"
        />
      </g>
      <defs>
        <filter
          id={`af-${id}`}
          x="272.2"
          y="308"
          width="176.9"
          height="129.3"
          filterUnits="userSpaceOnUse"
        >
          <feColorMatrix values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 1 0" />
        </filter>
      </defs>

      <mask
        id={`f-${id}`}
        x="272.2"
        y="308"
        width="176.9"
        height="129.3"
        maskUnits="userSpaceOnUse"
      >
        <g filter={`url(#af-${id})`}>  
          <circle cx="316.5" cy="316.5" r="316.5" fill="#fff" />
        </g>
      </mask>
      <g mask={`url(#f-${id})`}>  
        <line
          x1="436"
          x2="431"
          y1="403.2"
          y2="431.8"
          fill="none"
          stroke="#000"
          stroke-linecap="round"
          stroke-linejoin="bevel"
          stroke-width="11"
        />

        <line
          x1="291"
          x2="280"
          y1="341.5"
          y2="403.5"
          fill="none"
          stroke="#000"
          stroke-linecap="round"
          stroke-linejoin="bevel"
          stroke-width="11"
        />

        <line
          x1="332.9"
          x2="328.6"
          y1="384.1"
          y2="411.2"
          fill="none"
          stroke="#000"
          stroke-linecap="round"
          stroke-linejoin="bevel"
          stroke-width="11"
        />

        <linearGradient
          id={`m-${id}`}
          x1="-670.75"
          x2="-671.59"
          y1="164.4"
          y2="164.49"
          gradientTransform="matrix(-184.16 -32.472 -11.461 64.997 -121359 -32126)"
          gradientUnits="userSpaceOnUse"
        >
          <stop stop-color="#EE2700" offset="0" />
          <stop stop-color="#FF008E" offset="1" />
        </linearGradient>

        <path
          d="m344.1 363 97.7 17.2c5.8 2.1 8.2 6.1 7.1 12.1s-4.7 9.2-11 9.9l-106-18.7-57.5-59.2c-3.2-4.8-2.9-9.1 0.8-12.8s8.3-4.4 13.7-2.1l55.2 53.6z"
          clip-rule="evenodd"
          fill={`url(#m-${id})`}
          fill-rule="evenodd"
        />

        <line
          x1="428.2"
          x2="429.1"
          y1="384.5"
          y2="378"
          fill="none"
          stroke="#fff"
          stroke-linecap="round"
          stroke-linejoin="bevel"
          stroke-width="7"
        />

        <line
          x1="395.2"
          x2="396.1"
          y1="379.5"
          y2="373"
          fill="none"
          stroke="#fff"
          stroke-linecap="round"
          stroke-linejoin="bevel"
          stroke-width="7"
        />

        <line
          x1="362.2"
          x2="363.1"
          y1="373.5"
          y2="367.4"
          fill="none"
          stroke="#fff"
          stroke-linecap="round"
          stroke-linejoin="bevel"
          stroke-width="7"
        />

        <line
          x1="324.2"
          x2="328.4"
          y1="351.3"
          y2="347.4"
          fill="none"
          stroke="#fff"
          stroke-linecap="round"
          stroke-linejoin="bevel"
          stroke-width="7"
        />

        <line
          x1="303.2"
          x2="307.4"
          y1="331.3"
          y2="327.4"
          fill="none"
          stroke="#fff"
          stroke-linecap="round"
          stroke-linejoin="bevel"
          stroke-width="7"
        />
      </g>
    </svg>
  );
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T04:21:50.071Z
File: TanStack-query-f4a0cd5/packages/eslint-plugin-query/src/__tests__/stable-query-client.test.ts
Functions Extracted: 1


Function 1: Component
Language: TypeScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function Component() {
  const queryClient = new QueryClient({ defaultOptions: { /* */ } });
  return;
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T04:22:24.985Z
File: UTILS
Functions Extracted: 7


Function 1: functionalUpdate
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
export function functionalUpdate<TInput, TOutput>(
  updater: Updater<TInput, TOutput>,
  input: TInput,
): TOutput {
  return typeof updater === 'function'
    ? (updater as (_: TInput) => TOutput)(input)
    : updater
}
--------------------------------------------------------------------------------


Function 2: matchQuery
Language: TypeScript
Lines: 22
Full Code:
--------------------------------------------------------------------------------
export function matchQuery(
  filters: QueryFilters,
  query: Query<any, any, any, any>,
): boolean {
  const {
    type = 'all',
    exact,
    fetchStatus,
    predicate,
    queryKey,
    stale,
  } = filters;

  if (queryKey) {
    if (exact) {
      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {
        return false;
      }
    } else if (!partialMatchKey(query.queryKey, queryKey)) {
      return false;
    }
  }

  if (type !== 'all') {
    const isActive = query.isActive();
    if (type === 'active' && !isActive) {
      return false;
    }
    if (type === 'inactive' && isActive) {
      return false;
    }
  }

  if (typeof stale === 'boolean' && query.isStale() !== stale) {
    return false;
  }

  if (fetchStatus && fetchStatus !== query.state.fetchStatus) {
    return false;
  }

  if (predicate && !predicate(query)) {
    return false;
  }

  return true;
}
--------------------------------------------------------------------------------


Function 3: matchMutation
Language: TypeScript
Lines: 17
Full Code:
--------------------------------------------------------------------------------
export function matchMutation(
  filters: MutationFilters,
  mutation: Mutation<any, any>,
): boolean {
  const { exact, status, predicate, mutationKey } = filters;
  if (mutationKey) {
    if (!mutation.options.mutationKey) {
      return false;
    }
    if (exact) {
      if (hashKey(mutation.options.mutationKey) !== hashKey(mutationKey)) {
        return false;
      }
    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {
      return false;
    }
  }

  if (status && mutation.state.status !== status) {
    return false;
  }

  if (predicate && !predicate(mutation)) {
    return false;
  }

  return true;
}
--------------------------------------------------------------------------------


Function 4: hashKey
Language: TypeScript
Lines: 11
Full Code:
--------------------------------------------------------------------------------
export function hashKey(queryKey: QueryKey | MutationKey): string {
  return JSON.stringify(queryKey, (_, val) =>
    isPlainObject(val)
      ? Object.keys(val)
          .sort()
          .reduce((result, key) => {
            result[key] = val[key];
            return result;
          }, {} as any)
      : val,
  );
}
--------------------------------------------------------------------------------


Function 5: partialMatchKey
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export function partialMatchKey(a: QueryKey, b: QueryKey): boolean
export function partialMatchKey(a: any, b: any): boolean {
  if (a === b) {
    return true;
  }

  if (typeof a !== typeof b) {
    return false;
  }

  if (a && b && typeof a === 'object' && typeof b === 'object') {
    return Object.keys(b).every((key) => partialMatchKey(a[key], b[key]));
  }

  return false;
}
--------------------------------------------------------------------------------


Function 6: replaceEqualDeep
Language: TypeScript
Lines: 36
Full Code:
--------------------------------------------------------------------------------
export function replaceEqualDeep<T>(a: unknown, b: T): T
export function replaceEqualDeep(a: any, b: any): any {
  if (a === b) {
    return a;
  }

  const array = isPlainArray(a) && isPlainArray(b);

  if (!array && !(isPlainObject(a) && isPlainObject(b))) return b;

  const aItems = array ? a : Object.keys(a);
  const aSize = aItems.length;
  const bItems = array ? b : Object.keys(b);
  const bSize = bItems.length;
  const copy: any = array ? new Array(bSize) : {};

  let equalItems = 0;

  for (let i = 0; i < bSize; i++) {
    const key: any = array ? i : bItems[i];
    const aItem = a[key];
    const bItem = b[key];

    if (aItem === bItem) {
      copy[key] = aItem;
      if (array ? i < aSize : hasOwn.call(a, key)) equalItems++;
      continue;
    }

    if (
      aItem === null ||
      bItem === null ||
      typeof aItem !== 'object' ||
      typeof bItem !== 'object'
    ) {
      copy[key] = bItem;
      continue;
    }

    const v = replaceEqualDeep(aItem, bItem);
    copy[key] = v;
    if (v === aItem) equalItems++;
  }

  return aSize === bSize && equalItems === aSize ? a : copy;
}
--------------------------------------------------------------------------------


Function 7: shallowEqualObjects
Language: TypeScript
Lines: 11
Full Code:
--------------------------------------------------------------------------------
export function shallowEqualObjects<T extends Record<string, any>>(
  a: T,
  b: T | undefined,
): boolean {
  if (!b || Object.keys(a).length !== Object.keys(b).length) {
    return false;
  }

  for (const key in a) {
    if (a[key] !== b[key]) {
      return false;
    }
  }

  return true;
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T04:22:44.646Z
File: TanStack-query-f4a0cd5/packages/query-persist-client-core/src/persist.ts
Functions Extracted: 4


Function 1: persistQueryClientRestore
Language: TypeScript
Lines: 23
Full Code:
--------------------------------------------------------------------------------
export async function persistQueryClientRestore({
  queryClient,
  persister,
  maxAge = 1000 * 60 * 60 * 24,
  buster = '',
  hydrateOptions,
}: PersistedQueryClientRestoreOptions) {
  try {
    const persistedClient = await persister.restoreClient();

    if (persistedClient) {
      if (persistedClient.timestamp) {
        const expired = Date.now() - persistedClient.timestamp > maxAge;
        const busted = persistedClient.buster !== buster;
        if (expired || busted) {
          return persister.removeClient();
        } else {
          hydrate(queryClient, persistedClient.clientState, hydrateOptions);
        }
      } else {
        return persister.removeClient();
      }
    }
  } catch (err) {
    if (process.env.NODE_ENV !== 'production') {
      console.error(err);
      console.warn(
        'Encountered an error attempting to restore client cache from persisted location. As a precaution, the persisted cache will be discarded.',
      );
    }

    await persister.removeClient();

    throw err;
  }
}
--------------------------------------------------------------------------------


Function 2: persistQueryClientSave
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
export async function persistQueryClientSave({
  queryClient,
  persister,
  buster = '',
  dehydrateOptions,
}: PersistedQueryClientSaveOptions) {
  const persistClient: PersistedClient = {
    buster,
    timestamp: Date.now(),
    clientState: dehydrate(queryClient, dehydrateOptions),
  };

  await persister.persistClient(persistClient);
}
--------------------------------------------------------------------------------


Function 3: persistQueryClientSubscribe
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export function persistQueryClientSubscribe(
  props: PersistedQueryClientSaveOptions,
) {
  const unsubscribeQueryCache = props.queryClient
    .getQueryCache()
    .subscribe((event) => {
      if (isCacheEventType(event.type)) {
        persistQueryClientSave(props);
      }
    });

  const unsubscribeMutationCache = props.queryClient
    .getMutationCache()
    .subscribe((event) => {
      if (isCacheEventType(event.type)) {
        persistQueryClientSave(props);
      }
    });

  return () => {
    unsubscribeQueryCache();
    unsubscribeMutationCache();
  };
}
--------------------------------------------------------------------------------


Function 4: persistQueryClient
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
export function persistQueryClient(
  props: PersistQueryClientOptions,
): [() => void, Promise<void>] {
  let hasUnsubscribed = false;
  let persistQueryClientUnsubscribe: (() => void) | undefined;
  const unsubscribe = () => {
    hasUnsubscribed = true;
    persistQueryClientUnsubscribe?.();
  };
  // Additional logic would go here
}
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:22:54.118Z
Question Type: true-false
Function: persistQueryClientSubscribe
Function Size: 700 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: persistQueryClientSubscribe (TypeScript)\n// Subscribes to QueryCache and MutationCache updates for persisting.\n\nexport function persistQueryClientSubscribe(\n  props: PersistedQueryClientSaveOptions,\n) {\n  const unsubscribeQueryCache = props.queryClient\n    .getQueryCache()\n    .subscrib
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:22:55.707Z
Question Type: multiple-choice
Function: persistQueryClientRestore
Function Size: 1168 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: persistQueryClientRestore (TypeScript)\n// Restores persisted data to the QueryCache and handles expiration and errors.\n\nexport async function persistQueryClientRestore({\n  queryClient,\n  persister,\n  maxAge = 1000 * 60 * 60 * 24,\n  buster = '',\n  hydrateOptions,\n}: PersistedQueryClientR
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:22:56.136Z
Question Type: multiple-choice
Function: partialMatchKey
Function Size: 478 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: partialMatchKey (TypeScript)\n// Checks if key `b` partially matches with key `a`.\n\nexport function partialMatchKey(a: QueryKey, b: QueryKey): boolean\nexport function partialMatchKey(a: any, b: any): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  if (typeof a !== typeof b) {\n    retu
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:22:59.177Z
Question Type: order-sequence
Function: partialMatchKey
Function Size: 478 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: partialMatchKey (TypeScript)\n// Checks if key `b` partially matches with key `a`.\n\nexport function partialMatchKey(a: QueryKey, b: QueryKey): boolean\nexport function partialMatchKey(a: any, b: any): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  if (typeof a !== typeof b) {\n    retu
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:23:05.511Z
Question Type: multiple-choice
Function: Component
Function Size: 223 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: Component (TypeScript)\n// Creates a React component that initializes a QueryClient with default options.\n\nfunction Component() {\n  const queryClient = new QueryClient({ defaultOptions: { /* */ } });\n  return;\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:23:09.710Z
Question Type: multiple-choice
Function: matchMutation
Function Size: 738 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: matchMutation (TypeScript)\n// Checks if a mutation matches the specified filters.\n\nexport function matchMutation(\n  filters: MutationFilters,\n  mutation: Mutation<any, any>,\n): boolean {\n  const { exact, status, predicate, mutationKey } = filters;\n  if (mutationKey) {\n    if (!mutation.
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:23:24.378Z
Question Type: select-all
Function: matchMutation
Function Size: 738 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: matchMutation (TypeScript)\n// Checks if a mutation matches the specified filters.\n\nexport function matchMutation(\n  filters: MutationFilters,\n  mutation: Mutation<any, any>,\n): boolean {\n  const { exact, status, predicate, mutationKey } = filters;\n  if (mutationKey) {\n    if (!mutation.
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:23:26.434Z
Question Type: multiple-choice
Function: shallowEqualObjects
Function Size: 389 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: shallowEqualObjects (TypeScript)\n// Compares two objects for shallow equality.\n\nexport function shallowEqualObjects<T extends Record<string, any>>(\n  a: T,\n  b: T | undefined,\n): boolean {\n  if (!b || Object.keys(a).length !== Object.keys(b).length) {\n    return false;\n  }\n\n  for (const
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:23:32.471Z
Question Type: function-variant
Function: persistQueryClientRestore
Function Size: 1168 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: persistQueryClientRestore (TypeScript)\n// Restores persisted data to the QueryCache and handles expiration and errors.\n\nexport async function persistQueryClientRestore({\n  queryClient,\n  persister,\n  maxAge = 1000 * 60 * 60 * 24,\n  buster = '',\n  hydrateOptions,\n}: PersistedQueryClientR
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:23:35.306Z
Question Type: multiple-choice
Function: TanstackLogo
Function Size: 9025 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: TanstackLogo (TypeScript)\n// Renders the Tanstack logo SVG with gradients and shapes.\n\nexport function TanstackLogo() {\n  const id = createUniqueId();\n  return (\n    <svg version="1.0" viewBox="0 0 633 633">\n      <linearGradient\n        id={`a-${id}`}\n        x1="-666.45"\n        x2="-
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:23:37.411Z
Question Type: order-sequence
Function: persistQueryClient
Function Size: 455 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: persistQueryClient (TypeScript)\n// Restores persisted data to QueryCache and persists further changes.\n\nexport function persistQueryClient(\n  props: PersistQueryClientOptions,\n): [() => void, Promise<void>] {\n  let hasUnsubscribed = false;\n  let persistQueryClientUnsubscribe: (() => voi
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:23:40.283Z
Question Type: multiple-choice
Function: persistQueryClientSave
Function Size: 461 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: persistQueryClientSave (TypeScript)\n// Persists data from the QueryCache using the provided persister.\n\nexport async function persistQueryClientSave({\n  queryClient,\n  persister,\n  buster = '',\n  dehydrateOptions,\n}: PersistedQueryClientSaveOptions) {\n  const persistClient: PersistedCli
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:23:43.569Z
Question Type: select-all
Function: Component
Function Size: 223 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: Component (TypeScript)\n// Creates a React component that initializes a QueryClient with default options.\n\nfunction Component() {\n  const queryClient = new QueryClient({ defaultOptions: { /* */ } });\n  return;\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:23:48.930Z
Question Type: multiple-choice
Function: matchQuery
Function Size: 1000 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: matchQuery (TypeScript)\n// Determines if a query matches the given filters.\n\nexport function matchQuery(\n  filters: QueryFilters,\n  query: Query<any, any, any, any>,\n): boolean {\n  const {\n    type = 'all',\n    exact,\n    fetchStatus,\n    predicate,\n    queryKey,\n    stale,\n  } = filter
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:23:54.802Z
Question Type: multiple-choice
Function: functionalUpdate
Function Size: 347 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: functionalUpdate (TypeScript)\n// Applies an updater function to an input value or returns the updater directly.\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput,\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:23:54.807Z
Question Type: multiple-choice
Function: hashKey
Function Size: 414 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: hashKey (TypeScript)\n// Generates a stable hash for a query or mutation key.\n\nexport function hashKey(queryKey: QueryKey | MutationKey): string {\n  return JSON.stringify(queryKey, (_, val) =>\n    isPlainObject(val)\n      ? Object.keys(val)\n          .sort()\n          .reduce((result, ke
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:24:05.928Z
Question Type: true-false
Function: replaceEqualDeep
Function Size: 1221 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: replaceEqualDeep (TypeScript)\n// Replaces deeply equal children of `b` with those of `a`.\n\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a;\n  }\n\n  const array = isPlainArray(a) && isPlainArray
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:24:19.302Z
Question Type: function-variant
Function: matchQuery
Function Size: 1000 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: matchQuery (TypeScript)\n// Determines if a query matches the given filters.\n\nexport function matchQuery(\n  filters: QueryFilters,\n  query: Query<any, any, any, any>,\n): boolean {\n  const {\n    type = 'all',\n    exact,\n    fetchStatus,\n    predicate,\n    queryKey,\n    stale,\n  } = filter
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760070101142
Repository: Unknown
Total Questions Generated: 33
Total Chunks Processed: 13
Ended: 2025-10-10T04:24:19.304Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T04:33:52.201Z
File: default named classes
Functions Extracted: 2


Function 1: readFixture
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function readFixture(filename: string) {
    const url = new URL(
      `./fixtures/bundled-with-sourcemaps/${filename}`,
      import.meta.url,
    );

    return readFileSync(fileURLToPath(url), 'utf8');
  }
--------------------------------------------------------------------------------


Function 2: readFixture
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function readFixture(filename: string) {
    const url = new URL(
      `./fixtures/multi-source-sourcemaps/${filename}`,
      import.meta.url,
    );

    return readFileSync(fileURLToPath(url), 'utf8');
  }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T04:34:05.285Z
File: vitejs-vite-3a92bc7/packages/vite/src/node/ssr/__tests__/ssrTransform.spec.ts
Functions Extracted: 3


Function 1: dynamic import
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
const result = await ssrTransformSimple(
    `export const i = () => import('./foo')`,
  )
  expect(result?.code).toMatchInlineSnapshot(
    `
    "__vite_ssr_exportName__("i", () => { try { return i } catch {} });
    const i = () => __vite_ssr_dynamic_import__('./foo')"
  )
  expect(result?.deps).toEqual([])
  expect(result?.dynamicDeps).toEqual(['./foo'])
--------------------------------------------------------------------------------


Function 2: do not rewrite method definition
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
const result = await ssrTransformSimple(
    `import { fn } from 'vue';class A { fn() { fn() } }`,
  )
  expect(result?.code).toMatchInlineSnapshot(
    `
    "const __vite_ssr_import_0__ = await __vite_ssr_import__("vue", {"importedNames":["fn"]});
    class A { fn() { (0,__vite_ssr_import_0__.fn)() } }"
  )
  expect(result?.deps).toEqual(['vue'])
--------------------------------------------------------------------------------


Function 3: do not rewrite when variable is in scope
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
const result = await ssrTransformSimple(
    `import { fn } from 'vue';function A(){ const fn = () => {}; return { fn }; }`,
  )
  expect(result?.code).toMatchInlineSnapshot(
    `
    "const __vite_ssr_import_0__ = await __vite_ssr_import__("vue", {"importedNames":["fn"]});
    function A(){ const fn = () => {}; return { fn }; }"
  )
  expect(result?.deps).toEqual(['vue'])
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T04:34:10.818Z
File: #9585
Functions Extracted: 2


Function 1: a
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function a() {
  const {
    o: { remove },
    a: { b: { c: [ add ] }},
    d: [{ get }, set, ...rest],
    ...objRest
  } = foo;

  remove();
  add();
  get();
  set();
  rest();
  objRest();
}
--------------------------------------------------------------------------------


Function 2: foobar
Language: JavaScript
Lines: 13
Full Code:
--------------------------------------------------------------------------------
function foobar() {
  ddd();

  const aaa = () => {
    bbb(ccc);
    ddd();
  };
  const bbb = () => {
    console.log('hi');
  };
  const ccc = 1;
  function ddd() {}

  aaa();
  bbb();
  ccc();
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T04:34:23.726Z
File: of browsers we support in dev all support this header.
Functions Extracted: 3


Function 1: asyncReplace
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export async function asyncReplace(
  input: string,
  re: RegExp,
  replacer: (match: RegExpExecArray) => string | Promise<string>,
): Promise<string> {
  let match: RegExpExecArray | null;
  let remaining = input;
  let rewritten = '';
  while ((match = re.exec(remaining))) {
    rewritten += remaining.slice(0, match.index);
    rewritten += await replacer(match);
    remaining = remaining.slice(match.index + match[0].length);
  }
  rewritten += remaining;
  return rewritten;
}
--------------------------------------------------------------------------------


Function 2: timeFrom
Language: TypeScript
Lines: 11
Full Code:
--------------------------------------------------------------------------------
export function timeFrom(start: number, subtract = 0): string {
  const time: number | string = performance.now() - start - subtract;
  const timeString = (time.toFixed(2) + `ms`).padEnd(5, ' ');
  if (time < 10) {
    return colors.green(timeString);
  } else if (time < 50) {
    return colors.yellow(timeString);
  } else {
    return colors.red(timeString);
  }
}
--------------------------------------------------------------------------------


Function 3: prettifyUrl
Language: TypeScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
export function prettifyUrl(url: string, root: string): string {
  url = removeTimestampQuery(url);
  const isAbsoluteFile = url.startsWith(root);
  if (isAbsoluteFile || url.startsWith(FS_PREFIX)) {
    const file = path.posix.relative(
      root,
      isAbsoluteFile ? url : fsPathFromId(url),
    );
    return colors.dim(file);
  } else {
    return colors.dim(url);
  }
}
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:35:02.029Z
Question Type: true-false
Function: do not rewrite method definition
Function Size: 481 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: do not rewrite method definition (TypeScript)\n// Ensures method definitions are not rewritten during transformation.\n\nconst result = await ssrTransformSimple(\n    `import { fn } from 'vue';class A { fn() { fn() } }`,\n  )\n  expect(result?.code).toMatchInlineSnapshot(\n    `\n    "const __v
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:35:02.829Z
Question Type: multiple-choice
Function: do not rewrite method definition
Function Size: 481 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: do not rewrite method definition (TypeScript)\n// Ensures method definitions are not rewritten during transformation.\n\nconst result = await ssrTransformSimple(\n    `import { fn } from 'vue';class A { fn() { fn() } }`,\n  )\n  expect(result?.code).toMatchInlineSnapshot(\n    `\n    "const __v
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:35:03.184Z
Question Type: multiple-choice
Function: readFixture
Function Size: 297 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: readFixture (TypeScript)\n// Reads a fixture file from the specified path.\n\nfunction readFixture(filename: string) {\n    const url = new URL(\n      `./fixtures/bundled-with-sourcemaps/${filename}`,\n      import.meta.url,\n    );\n\n    return readFileSync(fileURLToPath(url), 'utf8');\n  }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:35:04.688Z
Question Type: select-all
Function: dynamic import
Function Size: 463 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: dynamic import (TypeScript)\n// Tests dynamic import functionality in SSR transformation.\n\nconst result = await ssrTransformSimple(\n    `export const i = () => import('./foo')`,\n  )\n  expect(result?.code).toMatchInlineSnapshot(\n    `\n    "__vite_ssr_exportName__("i", () => { try { return
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:35:12.529Z
Question Type: multiple-choice
Function: prettifyUrl
Function Size: 487 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: prettifyUrl (TypeScript)\n// Formats a URL for logging, making it relative to a specified root.\n\nexport function prettifyUrl(url: string, root: string): string {\n  url = removeTimestampQuery(url);\n  const isAbsoluteFile = url.startsWith(root);\n  if (isAbsoluteFile || url.startsWith(FS_PR
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:35:14.697Z
Question Type: true-false
Function: do not rewrite when variable is in scope
Function Size: 524 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: do not rewrite when variable is in scope (TypeScript)\n// Verifies that local variables do not trigger rewrites in SSR transformation.\n\nconst result = await ssrTransformSimple(\n    `import { fn } from 'vue';function A(){ const fn = () => {}; return { fn }; }`,\n  )\n  expect(result?.code).
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:35:21.068Z
Question Type: order-sequence
Function: foobar
Function Size: 320 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: foobar (JavaScript)\n// Defines nested functions and calls them, demonstrating scope and function execution.\n\nfunction foobar() {\n  ddd();\n\n  const aaa = () => {\n    bbb(ccc);\n    ddd();\n  };\n  const bbb = () => {\n    console.log('hi');\n  };\n  const ccc = 1;\n  function ddd() {}\n\n  aaa();
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:35:23.714Z
Question Type: function-variant
Function: readFixture
Function Size: 297 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: readFixture (TypeScript)\n// Reads a fixture file from the specified path.\n\nfunction readFixture(filename: string) {\n    const url = new URL(\n      `./fixtures/multi-source-sourcemaps/${filename}`,\n      import.meta.url,\n    );\n\n    return readFileSync(fileURLToPath(url), 'utf8');\n  }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:35:27.037Z
Question Type: multiple-choice
Function: timeFrom
Function Size: 472 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: timeFrom (TypeScript)\n// Calculates and formats the elapsed time since a given start time.\n\nexport function timeFrom(start: number, subtract = 0): string {\n  const time: number | string = performance.now() - start - subtract;\n  const timeString = (time.toFixed(2) + `ms`).padEnd(5, ' ');
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T04:35:28.821Z
Question Type: multiple-choice
Function: asyncReplace
Function Size: 611 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: asyncReplace (TypeScript)\n// Asynchronously replaces parts of a string based on a regex and a replacer function.\n\nexport async function asyncReplace(\n  input: string,\n  re: RegExp,\n  replacer: (match: RegExpExecArray) => string | Promise<string>,\n): Promise<string> {\n  let match: RegExp
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760070101142
Repository: Unknown
Total Questions Generated: 16
Total Chunks Processed: 10
Ended: 2025-10-10T04:35:32.108Z
================================================================================

