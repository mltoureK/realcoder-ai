=== FUNCTION EXTRACTION & QUESTION GENERATION LOG ===
Session ID: session-1760320988135
Started: 2025-10-13T02:03:08.135Z


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-13T02:03:08.139Z
File: [2 files: db.py, exceptions.py]
Functions Extracted: 8


Function 1: create
Language: Python
Lines: 10
Full Code:
--------------------------------------------------------------------------------
def create(self):
        """Create a database."""
        with sqlite3.connect(self.path) as conn:
            params = ", ".join(
                f"{key} {' '.join(map(str.upper, props))} NOT NULL"
                for key, props in self.structure.items()
            )
            command = f"CREATE TABLE {self.name} ({params})"

            logger.debug("executing %s", command)

            conn.execute(command)
--------------------------------------------------------------------------------


Function 2: contains
Language: Python
Lines: 15
Full Code:
--------------------------------------------------------------------------------
def contains(self, **items) -> bool:
        """Check whether items matches an entry in the table.

        :param items: a dict of column-name + expected value
        :rtype: bool
        """
        allowed_keys = set(self.structure.keys())
        assert all(
            key in allowed_keys for key in items.keys()
        ), f"Invalid key. Valid keys: {allowed_keys}"

        items = {k: str(v) for k, v in items.items()}

        with sqlite3.connect(self.path) as conn:
            conditions = " AND ".join(f"{key}=?" for key in items.keys())
            command = f"SELECT EXISTS(SELECT 1 FROM {self.name} WHERE {conditions})"

            logger.debug("Executing %s", command)

            return bool(conn.execute(command, tuple(items.values())).fetchone()[0])
--------------------------------------------------------------------------------


Function 3: add
Language: Python
Lines: 15
Full Code:
--------------------------------------------------------------------------------
def add(self, items: tuple[str]):
        """Add a row to the table.

        :param items: Column-name + value. Values must be provided for all cols.
        :type items: Tuple[str]
        """
        assert len(items) == len(self.structure)

        params = ", ".join(self.structure.keys())
        question_marks = ", ".join("?" for _ in items)
        command = f"INSERT INTO {self.name} ({params}) VALUES ({question_marks})"

        logger.debug("Executing %s", command)
        logger.debug("Items to add: %s", items)

        with sqlite3.connect(self.path) as conn:
            try:
                conn.execute(command, tuple(items))
            except sqlite3.IntegrityError as e:
                # tried to insert an item that was already there
                logger.debug(e)
--------------------------------------------------------------------------------


Function 4: remove
Language: Python
Lines: 12
Full Code:
--------------------------------------------------------------------------------
def remove(self, **items):
        """Remove items from a table.

        Warning: NOT TESTED!

        :param items:
        """
        conditions = " AND ".join(f"{key}=?" for key in items.keys())
        command = f"DELETE FROM {self.name} WHERE {conditions}"

        with sqlite3.connect(self.path) as conn:
            logger.debug(command)
            conn.execute(command, tuple(items.values()))
--------------------------------------------------------------------------------


Function 5: all
Language: Python
Lines: 8
Full Code:
--------------------------------------------------------------------------------
def all(self):
        """Iterate through the rows of the table."""
        with sqlite3.connect(self.path) as conn:
            return list(conn.execute(f"SELECT * FROM {self.name}"))
--------------------------------------------------------------------------------


Function 6: __init__
Language: Python
Lines: 7
Full Code:
--------------------------------------------------------------------------------
def __init__(self, message=None):
        """Create a NonStreamable exception.

        :param message:
        """
        self.message = message
        super().__init__(self.message)
--------------------------------------------------------------------------------


Function 7: print
Language: Python
Lines: 7
Full Code:
--------------------------------------------------------------------------------
def print(self, item):
        """Print a readable version of the exception.

        :param item:
        """
        echo(self.print_msg(item))
--------------------------------------------------------------------------------


Function 8: print_msg
Language: Python
Lines: 15
Full Code:
--------------------------------------------------------------------------------
def print_msg(self, item) -> str:
        """Return a generic readable message.

        :param item:
        :type item: Media
        :rtype: str
        """
        base_msg = [style(f"Unable to stream {item!s}.", fg="yellow")]
        if self.message:
            base_msg.extend(
                (
                    style("Message:", fg="yellow"),
                    style(self.message, fg="red"),
                ),
            )

        return " ".join(base_msg)
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:03:14.643Z
Question Type: true-false
Function: remove
Function Size: 486 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: remove (Python)\n// Removes specified items from the database table.\n\ndef remove(self, **items):\n        """Remove items from a table.\n\n        Warning: NOT TESTED!\n\n        :param items:\n        """\n        conditions = " AND ".join(f"{key}=?" for key in items.keys())\n        command = 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:03:20.219Z
Question Type: order-sequence
Function: contains
Function Size: 867 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: contains (Python)\n// Checks if the specified items exist in the database table.\n\ndef contains(self, **items) -> bool:\n        """Check whether items matches an entry in the table.\n\n        :param items: a dict of column-name + expected value\n        :rtype: bool\n        """\n        allo
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:03:20.785Z
Question Type: order-sequence
Function: print
Function Size: 241 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: print (Python)\n// Prints a user-friendly message for the NonStreamable exception.\n\ndef print(self, item):\n        """Print a readable version of the exception.\n\n        :param item:\n        """\n        echo(self.print_msg(item))
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:03:21.890Z
Question Type: function-variant
Function: __init__
Function Size: 284 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: __init__ (Python)\n// Initializes a NonStreamable exception with an optional message.\n\ndef __init__(self, message=None):\n        """Create a NonStreamable exception.\n\n        :param message:\n        """\n        self.message = message\n        super().__init__(self.message)
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:03:24.364Z
Question Type: select-all
Function: print
Function Size: 241 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: print (Python)\n// Prints a user-friendly message for the NonStreamable exception.\n\ndef print(self, item):\n        """Print a readable version of the exception.\n\n        :param item:\n        """\n        echo(self.print_msg(item))
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:03:34.847Z
Question Type: function-variant
Function: create
Function Size: 518 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: create (Python)\n// Creates a new SQLite database table based on the defined structure.\n\ndef create(self):\n        """Create a database."""\n        with sqlite3.connect(self.path) as conn:\n            params = ", ".join(\n                f"{key} {' '.join(map(str.upper, props))} NOT NULL"
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:03:35.404Z
Question Type: multiple-choice
Function: __init__
Function Size: 284 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: __init__ (Python)\n// Initializes a NonStreamable exception with an optional message.\n\ndef __init__(self, message=None):\n        """Create a NonStreamable exception.\n\n        :param message:\n        """\n        self.message = message\n        super().__init__(self.message)
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:03:38.058Z
Question Type: function-variant
Function: remove
Function Size: 486 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: remove (Python)\n// Removes specified items from the database table.\n\ndef remove(self, **items):\n        """Remove items from a table.\n\n        Warning: NOT TESTED!\n\n        :param items:\n        """\n        conditions = " AND ".join(f"{key}=?" for key in items.keys())\n        command = 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:03:43.011Z
Question Type: select-all
Function: create
Function Size: 518 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: create (Python)\n// Creates a new SQLite database table based on the defined structure.\n\ndef create(self):\n        """Create a database."""\n        with sqlite3.connect(self.path) as conn:\n            params = ", ".join(\n                f"{key} {' '.join(map(str.upper, props))} NOT NULL"
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:03:46.726Z
Question Type: select-all
Function: all
Function Size: 258 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: all (Python)\n// Retrieves all rows from the database table.\n\ndef all(self):\n        """Iterate through the rows of the table."""\n        with sqlite3.connect(self.path) as conn:\n            return list(conn.execute(f"SELECT * FROM {self.name}"))
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:03:51.946Z
Question Type: function-variant
Function: add
Function Size: 882 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: add (Python)\n// Adds a new row to the database table with the provided items.\n\ndef add(self, items: tuple[str]):\n        """Add a row to the table.\n\n        :param items: Column-name + value. Values must be provided for all cols.\n        :type items: Tuple[str]\n        """\n        asser
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:03:53.052Z
Question Type: select-all
Function: contains
Function Size: 867 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: contains (Python)\n// Checks if the specified items exist in the database table.\n\ndef contains(self, **items) -> bool:\n        """Check whether items matches an entry in the table.\n\n        :param items: a dict of column-name + expected value\n        :rtype: bool\n        """\n        allo
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:03:57.111Z
Question Type: true-false
Function: all
Function Size: 258 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: all (Python)\n// Retrieves all rows from the database table.\n\ndef all(self):\n        """Iterate through the rows of the table."""\n        with sqlite3.connect(self.path) as conn:\n            return list(conn.execute(f"SELECT * FROM {self.name}"))
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:03:57.307Z
Question Type: select-all
Function: print_msg
Function Size: 571 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: print_msg (Python)\n// Generates a readable message for the NonStreamable exception.\n\ndef print_msg(self, item) -> str:\n        """Return a generic readable message.\n\n        :param item:\n        :type item: Media\n        :rtype: str\n        """\n        base_msg = [style(f"Unable to stre
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:03:57.563Z
Question Type: function-variant
Function: print_msg
Function Size: 571 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: print_msg (Python)\n// Generates a readable message for the NonStreamable exception.\n\ndef print_msg(self, item) -> str:\n        """Return a generic readable message.\n\n        :param item:\n        :type item: Media\n        :rtype: str\n        """\n        base_msg = [style(f"Unable to stre
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760320988135
Repository: Unknown
Total Questions Generated: 14
Total Chunks Processed: 8
Ended: 2025-10-13T02:03:57.565Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-13T02:04:32.624Z
File: [2 files: search_results.py, progress.py]
Functions Extracted: 10


Function 1: from_item
Language: Python
Lines: 12
Full Code:
--------------------------------------------------------------------------------
    @classmethod
    def from_item(cls, item: dict):
        id = str(item["id"])
        name = (
            item.get("name")
            or item.get("performer", {}).get("name")
            or item.get("artist")
            or item.get("artist", {}).get("name")
            or (
                item.get("publisher_metadata")
                and item["publisher_metadata"].get("artist")
            )
            or "Unknown"
        )
        num_albums = item.get("albums_count") or "Unknown"
        return cls(id, name, num_albums)
--------------------------------------------------------------------------------


Function 2: from_item
Language: Python
Lines: 17
Full Code:
--------------------------------------------------------------------------------
    @classmethod
    def from_item(cls, item: dict):
        id = str(item["id"])
        name = item.get("title") or item.get("name") or "Unknown"
        artist = (
            item.get("performer", {}).get("name")
            or item.get("artist")
            or item.get("artist", {}).get("name")
            or (
                item.get("publisher_metadata")
                and item["publisher_metadata"].get("artist")
            )
            or "Unknown"
        )
        if isinstance(artist, dict) and "name" in artist:
            artist = artist["name"]

        date_released = (
            item.get("release_date")
            or item.get("streamStartDate")
            or item.get("album", {}).get("release_date_original")
            or item.get("display_date")
            or item.get("date")
            or item.get("year")
            or "Unknown"
        )
        return cls(id, name.strip(), artist, date_released)  # type: ignore
--------------------------------------------------------------------------------


Function 3: from_item
Language: Python
Lines: 20
Full Code:
--------------------------------------------------------------------------------
    @classmethod
    def from_item(cls, item: dict):
        id = str(item["id"])
        title = (item.get("title") or "").strip()
        version = (item.get("version") or "").strip()
        name = title + (" (" + version + ")" if version else "")
        artist = (
            item.get("performer", {}).get("name")
            or item.get("artist", {}).get("name")
            or item.get("artist")
            or (
                item.get("publisher_metadata")
                and item["publisher_metadata"].get("artist")
            )
            or "Unknown"
        )
        num_tracks = (
            item.get("tracks_count", 0)
            or item.get("numberOfTracks", 0)
            or len(
                item.get("tracks", []) or item.get("items", []),
            )
        )

        date_released = (
            item.get("release_date_original")
            or item.get("release_date")
            or item.get("releaseDate")
            or item.get("display_date")
            or item.get("date")
            or item.get("year")
            or "Unknown"
        )
        return cls(id, name, artist, str(num_tracks), date_released)
--------------------------------------------------------------------------------


Function 4: from_item
Language: Python
Lines: 6
Full Code:
--------------------------------------------------------------------------------
    @classmethod
    def from_item(cls, item: dict):
        id = str(item["id"])
        name = item["name"]
        return cls(id, name)
--------------------------------------------------------------------------------


Function 5: from_item
Language: Python
Lines: 20
Full Code:
--------------------------------------------------------------------------------
    @classmethod
    def from_item(cls, item: dict):
        id = item.get("id") or item.get("uuid") or "Unknown"
        name = item.get("name") or item.get("title") or "Unknown"
        creator = (
            (item.get("publisher_metadata") and item["publisher_metadata"]["artist"])
            or item.get("owner", {}).get("name")
            or item.get("user", {}).get("username")
            or item.get("user", {}).get("name")
            or "Unknown"
        )
        num_tracks = (
            item.get("tracks_count")
            or item.get("nb_tracks")
            or item.get("numberOfTracks")
            or len(item.get("tracks", []))
            or -1
        )
        description = item.get("description") or "No description"
        return cls(id, name, creator, num_tracks, description)
--------------------------------------------------------------------------------


Function 6: from_pages
Language: Python
Lines: 31
Full Code:
--------------------------------------------------------------------------------
    @classmethod
    def from_pages(cls, source: str, media_type: str, pages: list[dict]):
        if media_type == "track":
            summary_type = TrackSummary
        elif media_type == "album":
            summary_type = AlbumSummary
        elif media_type == "label":
            summary_type = LabelSummary
        elif media_type == "artist":
            summary_type = ArtistSummary
        elif media_type == "playlist":
            summary_type = PlaylistSummary
        else:
            raise Exception(f"invalid media type {media_type}")

        results = []
        for page in pages:
            if source == "soundcloud":
                items = page["collection"]
                for item in items:
                    results.append(summary_type.from_item(item))
            elif source == "qobuz":
                key = media_type + "s"
                for item in page[key]["items"]:
                    results.append(summary_type.from_item(item))
            elif source == "deezer":
                for item in page["data"]:
                    results.append(summary_type.from_item(item))
            elif source == "tidal":
                for item in page["items"]:
                    results.append(summary_type.from_item(item))
            else:
                raise NotImplementedError

        return cls(results)
--------------------------------------------------------------------------------


Function 7: get_choices
Language: Python
Lines: 7
Full Code:
--------------------------------------------------------------------------------
    def get_choices(self, inds: tuple[int, ...] | int):
        if isinstance(inds, int):
            inds = (inds,)
        return [self.results[i] for i in inds]
--------------------------------------------------------------------------------


Function 8: preview
Language: Python
Lines: 7
Full Code:
--------------------------------------------------------------------------------
    def preview(self, s: str) -> str:
        ind = re.match(r"^\d+", s)
        assert ind is not None
        i = int(ind.group(0))
        return self.results[i - 1].preview()
--------------------------------------------------------------------------------


Function 9: as_list
Language: Python
Lines: 10
Full Code:
--------------------------------------------------------------------------------
    def as_list(self, source: str) -> list[dict[str, str]]:
        return [
            {
                "source": source,
                "media_type": i.media_type(),
                "id": i.id,
                "desc": i.summarize(),
            }
            for i in self.results
        ]
--------------------------------------------------------------------------------


Function 10: get_callback
Language: Python
Lines: 7
Full Code:
--------------------------------------------------------------------------------
def get_progress_callback(enabled: bool, total: int, desc: str) -> Handle:
    global _p
    if not enabled:
        return Handle(lambda _: None, lambda: None)
    return _p.get_callback(total, desc)
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:04:39.242Z
Question Type: true-false
Function: get_choices
Function Size: 254 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: get_choices (Python)\n// Returns a list of choices based on provided indices.\n\n    def get_choices(self, inds: tuple[int, ...] | int):\n        if isinstance(inds, int):\n            inds = (inds,)\n        return [self.results[i] for i in inds]
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:04:46.523Z
Question Type: select-all
Function: as_list
Function Size: 382 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: as_list (Python)\n// Returns a list of results formatted as dictionaries.\n\n    def as_list(self, source: str) -> list[dict[str, str]]:\n        return [\n            {\n                "source": source,\n                "media_type": i.media_type(),\n                "id": i.id,\n              
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:04:48.134Z
Question Type: function-variant
Function: get_callback
Function Size: 287 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: get_callback (Python)\n// Returns a callback handle for progress updates.\n\ndef get_progress_callback(enabled: bool, total: int, desc: str) -> Handle:\n    global _p\n    if not enabled:\n        return Handle(lambda _: None, lambda: None)\n    return _p.get_callback(total, desc)
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760320988135
Repository: Unknown
Total Questions Generated: 3
Total Chunks Processed: 10
Ended: 2025-10-13T02:04:48.164Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-13T02:31:29.469Z
File: nodejs-node-1cd16e5/test/fixtures/wpt/html/webappapis/structured-clone/structured-clone-battery-of-tests.js
Functions Extracted: 7


Function 1: check
Language: JavaScript
Lines: 13
Full Code:
--------------------------------------------------------------------------------
function check(description, input, callback, requiresDocument = false) {
  testObjMock = {
    done() {},
    step_func(f) {return _ => f()},
  };

  structuredCloneBatteryOfTests.push({
    description,
    async f(runner) {
      let newInput = input;
      if (typeof input === 'function') {
        newInput = input();
      }
      const copy = await runner.structuredClone(newInput);
      await callback(copy, newInput, testObjMock);
    },
    requiresDocument
  });
}
--------------------------------------------------------------------------------


Function 2: compare_primitive
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function compare_primitive(actual, input, test_obj) {
  assert_equals(actual, input);
  if (test_obj)
    test_obj.done();
}
--------------------------------------------------------------------------------


Function 3: compare_Array
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function compare_Array(callback, callback_is_async) {
  return function(actual, input, test_obj) {
    if (typeof actual === 'string')
      assert_unreached(actual);
    assert_true(actual instanceof Array, 'instanceof Array');
    assert_not_equals(actual, input);
    assert_equals(actual.length, input.length, 'length');
    callback(actual, input);
    if (test_obj && !callback_is_async)
      test_obj.done();
  }
}
--------------------------------------------------------------------------------


Function 4: compare_Object
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function compare_Object(callback, callback_is_async) {
  return function(actual, input, test_obj) {
    if (typeof actual === 'string')
      assert_unreached(actual);
    assert_true(actual instanceof Object, 'instanceof Object');
    assert_false(actual instanceof Array, 'instanceof Array');
    assert_not_equals(actual, input);
    callback(actual, input);
    if (test_obj && !callback_is_async)
      test_obj.done();
  }
}
--------------------------------------------------------------------------------


Function 5: enumerate_props
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function enumerate_props(compare_func, test_obj) {
  return function(actual, input) {
    for (const x in input) {
      compare_func(actual[x], input[x], test_obj);
    }
  };
}
--------------------------------------------------------------------------------


Function 6: compare_Boolean
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function compare_Boolean(actual, input, test_obj) {
  if (typeof actual === 'string')
    assert_unreached(actual);
  assert_true(actual instanceof Boolean, 'instanceof Boolean');
  assert_equals(String(actual), String(input), 'converted to primitive');
  assert_not_equals(actual, input);
  if (test_obj)
    test_obj.done();
}
--------------------------------------------------------------------------------


Function 7: compare_obj
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function compare_obj(what) {
  const Type = self[what];
  return function(actual, input, test_obj) {
    if (typeof actual === 'string')
      assert_unreached(actual);
    assert_true(actual instanceof Type, 'instanceof '+what);
    assert_equals(Type(actual), Type(input), 'converted to primitive');
    assert_not_equals(actual, input);
    if (test_obj)
      test_obj.done();
  };
}
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:31:43.877Z
Question Type: order-sequence
Function: compare_Array
Function Size: 518 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: compare_Array (JavaScript)\n// Compares two arrays and validates their properties.\n\nfunction compare_Array(callback, callback_is_async) {\n  return function(actual, input, test_obj) {\n    if (typeof actual === 'string')\n      assert_unreached(actual);\n    assert_true(actual instanceof Arr
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:31:50.298Z
Question Type: order-sequence
Function: compare_Boolean
Function Size: 429 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: compare_Boolean (JavaScript)\n// Compares Boolean objects and asserts their properties.\n\nfunction compare_Boolean(actual, input, test_obj) {\n  if (typeof actual === 'string')\n    assert_unreached(actual);\n  assert_true(actual instanceof Boolean, 'instanceof Boolean');\n  assert_equals(Str
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:31:54.963Z
Question Type: function-variant
Function: compare_Object
Function Size: 528 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: compare_Object (JavaScript)\n// Compares two objects and validates their properties.\n\nfunction compare_Object(callback, callback_is_async) {\n  return function(actual, input, test_obj) {\n    if (typeof actual === 'string')\n      assert_unreached(actual);\n    assert_true(actual instanceof 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:31:59.523Z
Question Type: function-variant
Function: check
Function Size: 598 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: check (JavaScript)\n// Registers a test case for structured cloning with a description, input, and callback.\n\nfunction check(description, input, callback, requiresDocument = false) {\n  testObjMock = {\n    done() {},\n    step_func(f) {return _ => f()},\n  };\n\n  structuredCloneBatteryOfTest
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:32:00.187Z
Question Type: select-all
Function: compare_Object
Function Size: 528 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: compare_Object (JavaScript)\n// Compares two objects and validates their properties.\n\nfunction compare_Object(callback, callback_is_async) {\n  return function(actual, input, test_obj) {\n    if (typeof actual === 'string')\n      assert_unreached(actual);\n    assert_true(actual instanceof 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:32:02.034Z
Question Type: select-all
Function: compare_obj
Function Size: 489 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: compare_obj (JavaScript)\n// Generates a comparison function for a specific object type.\n\nfunction compare_obj(what) {\n  const Type = self[what];\n  return function(actual, input, test_obj) {\n    if (typeof actual === 'string')\n      assert_unreached(actual);\n    assert_true(actual instan
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:32:08.046Z
Question Type: true-false
Function: enumerate_props
Function Size: 294 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: enumerate_props (JavaScript)\n// Enumerates properties of an object and applies a comparison function.\n\nfunction enumerate_props(compare_func, test_obj) {\n  return function(actual, input) {\n    for (const x in input) {\n      compare_func(actual[x], input[x], test_obj);\n    }\n  };\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:32:08.511Z
Question Type: select-all
Function: compare_Array
Function Size: 518 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: compare_Array (JavaScript)\n// Compares two arrays and validates their properties.\n\nfunction compare_Array(callback, callback_is_async) {\n  return function(actual, input, test_obj) {\n    if (typeof actual === 'string')\n      assert_unreached(actual);\n    assert_true(actual instanceof Arr
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:32:08.775Z
Question Type: true-false
Function: check
Function Size: 598 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: check (JavaScript)\n// Registers a test case for structured cloning with a description, input, and callback.\n\nfunction check(description, input, callback, requiresDocument = false) {\n  testObjMock = {\n    done() {},\n    step_func(f) {return _ => f()},\n  };\n\n  structuredCloneBatteryOfTest
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:32:15.884Z
Question Type: multiple-choice
Function: compare_Object
Function Size: 528 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: compare_Object (JavaScript)\n// Compares two objects and validates their properties.\n\nfunction compare_Object(callback, callback_is_async) {\n  return function(actual, input, test_obj) {\n    if (typeof actual === 'string')\n      assert_unreached(actual);\n    assert_true(actual instanceof 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:32:17.908Z
Question Type: select-all
Function: compare_Boolean
Function Size: 429 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: compare_Boolean (JavaScript)\n// Compares Boolean objects and asserts their properties.\n\nfunction compare_Boolean(actual, input, test_obj) {\n  if (typeof actual === 'string')\n    assert_unreached(actual);\n  assert_true(actual instanceof Boolean, 'instanceof Boolean');\n  assert_equals(Str
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:35:20.971Z
Question Type: function-variant
Function: compare_obj
Function Size: 489 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: compare_obj (JavaScript)\n// Generates a comparison function for a specific object type.\n\nfunction compare_obj(what) {\n  const Type = self[what];\n  return function(actual, input, test_obj) {\n    if (typeof actual === 'string')\n      assert_unreached(actual);\n    assert_true(actual instan
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:35:21.087Z
Question Type: function-variant
Function: enumerate_props
Function Size: 294 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: enumerate_props (JavaScript)\n// Enumerates properties of an object and applies a comparison function.\n\nfunction enumerate_props(compare_func, test_obj) {\n  return function(actual, input) {\n    for (const x in input) {\n      compare_func(actual[x], input[x], test_obj);\n    }\n  };\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:35:21.098Z
Question Type: function-variant
Function: compare_primitive
Function Size: 220 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: compare_primitive (JavaScript)\n// Compares primitive values and asserts equality.\n\nfunction compare_primitive(actual, input, test_obj) {\n  assert_equals(actual, input);\n  if (test_obj)\n    test_obj.done();\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:35:21.194Z
Question Type: select-all
Function: compare_primitive
Function Size: 220 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: compare_primitive (JavaScript)\n// Compares primitive values and asserts equality.\n\nfunction compare_primitive(actual, input, test_obj) {\n  assert_equals(actual, input);\n  if (test_obj)\n    test_obj.done();\n}
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760320988135
Repository: Unknown
Total Questions Generated: 11
Total Chunks Processed: 7
Ended: 2025-10-13T02:35:21.201Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-13T02:35:59.742Z
File: [2 files: index.js, Flags: --stack-size=864]
Functions Extracted: 5


Function 1: expand
Language: JavaScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
function expand(str) {
      if (!str) {
        return [];
      }
      if (str.slice(0, 2) === "{}") {
        str = "\\{\\}" + str.slice(2);
      }
      return expand_(escapeBraces(str), true).map(unescapeBraces);
    }
--------------------------------------------------------------------------------


Function 2: expand_
Language: JavaScript
Lines: 55
Full Code:
--------------------------------------------------------------------------------
function expand_(str, isTop) {
      const expansions = [];
      const m = (0, balanced_match_1.balanced)("{", "}", str);
      if (!m)
        return [str];
      const pre = m.pre;
      const post = m.post.length ? expand_(m.post, false) : [""];
      if (/\$$/.test(m.pre)) {
        for (let k = 0; k < post.length; k++) {
          const expansion = pre + "{" + m.body + "}" + post[k];
          expansions.push(expansion);
        }
      } else {
        const isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
        const isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
        const isSequence = isNumericSequence || isAlphaSequence;
        const isOptions = m.body.indexOf(",") >= 0;
        if (!isSequence && !isOptions) {
          if (m.post.match(/,(?!,).*\}/)) {
            str = m.pre + "{" + m.body + escClose + m.post;
            return expand_(str);
          }
          return [str];
        }
        let n;
        if (isSequence) {
          n = m.body.split(/\.\./);
        } else {
          n = parseCommaParts(m.body);
          if (n.length === 1 && n[0] !== void 0) {
            n = expand_(n[0], false).map(embrace);
            if (n.length === 1) {
              return post.map((p) => m.pre + n[0] + p);
            }
          }
        }
        let N;
        if (isSequence && n[0] !== void 0 && n[1] !== void 0) {
          const x = numeric(n[0]);
          const y = numeric(n[1]);
          const width = Math.max(n[0].length, n[1].length);
          let incr = n.length === 3 && n[2] !== void 0 ? Math.abs(numeric(n[2])) : 1;
          let test = lte;
          const reverse = y < x;
          if (reverse) {
            incr *= -1;
            test = gte;
          }
          const pad = n.some(isPadded);
          N = [];
          for (let i = x; test(i, y); i += incr) {
            let c;
            if (isAlphaSequence) {
              c = String.fromCharCode(i);
              if (c === "\\") {
                c = "";
              }
            } else {
              c = String(i);
              if (pad) {
                const need = width - c.length;
                if (need > 0) {
                  const z = new Array(need + 1).join("0");
                  if (i < 0) {
                    c = "-" + z + c.slice(1);
                  } else {
                    c = z + c;
                  }
                }
              }
            }
            N.push(c);
          }
        } else {
          N = [];
          for (let j = 0; j < n.length; j++) {
            N.push.apply(N, expand_(n[j], false));
          }
        }
        for (let j = 0; j < N.length; j++) {
          for (let k = 0; k < post.length; k++) {
            const expansion = pre + N[j] + post[k];
            if (!isTop || isSequence || expansion) {
              expansions.push(expansion);
            }
          }
        }
      }
      return expansions;
    }
--------------------------------------------------------------------------------


Function 3: argumentsApplyExcessArguments
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function argumentsApplyExcessArguments(a, b, c) {
    function t(a, b, c) {
        return arguments.length;
    }
    return t.apply(null, arguments, executedAdditionalArgument = true);
}
--------------------------------------------------------------------------------


Function 4: argumentsApplyChangeLength1
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function argumentsApplyChangeLength1() {
    function f() {
        return arguments.length;
    };
    arguments.length = 2;
    return f.apply(null, arguments);
}
--------------------------------------------------------------------------------


Function 5: arrayApplyChangeLength1
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function arrayApplyChangeLength1() {
    function f() {
        return arguments.length;
    };
    var array = [];
    array.length = 2;
    return f.apply(null, array);
}
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:36:10.923Z
Question Type: multiple-choice
Function: expand
Function Size: 320 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: expand (JavaScript)\n// Expands a brace-enclosed string into an array of strings.\n\nfunction expand(str) {\n      if (!str) {\n        return [];\n      }\n      if (str.slice(0, 2) === "{}") {\n        str = "\\{\\}" + str.slice(2);\n      }\n      return expand_(escapeBraces(str), true).map(un
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:36:14.050Z
Question Type: function-variant
Function: arrayApplyChangeLength1
Function Size: 298 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: arrayApplyChangeLength1 (JavaScript)\n// Tests changing the length of an array and returns the arguments length.\n\nfunction arrayApplyChangeLength1() {\n    function f() {\n        return arguments.length;\n    };\n    var array = [];\n    array.length = 2;\n    return f.apply(null, array);\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:36:14.502Z
Question Type: order-sequence
Function: expand_
Function Size: 3069 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: expand_ (JavaScript)\n// Recursively expands brace-enclosed strings into an array of strings.\n\nfunction expand_(str, isTop) {\n      const expansions = [];\n      const m = (0, balanced_match_1.balanced)("{", "}", str);\n      if (!m)\n        return [str];\n      const pre = m.pre;\n      con
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:36:19.313Z
Question Type: true-false
Function: argumentsApplyChangeLength1
Function Size: 291 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: argumentsApplyChangeLength1 (JavaScript)\n// Tests changing the arguments length property and returns the length.\n\nfunction argumentsApplyChangeLength1() {\n    function f() {\n        return arguments.length;\n    };\n    arguments.length = 2;\n    return f.apply(null, arguments);\n}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T02:36:22.280Z
Question Type: order-sequence
Function: arrayApplyChangeLength1
Function Size: 298 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: arrayApplyChangeLength1 (JavaScript)\n// Tests changing the length of an array and returns the arguments length.\n\nfunction arrayApplyChangeLength1() {\n    function f() {\n        return arguments.length;\n    };\n    var array = [];\n    array.length = 2;\n    return f.apply(null, array);\n}
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760320988135
Repository: Unknown
Total Questions Generated: 4
Total Chunks Processed: 5
Ended: 2025-10-13T02:36:22.306Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-13T04:02:16.811Z
File: ably-ably-js-4967374/test/common/modules/testapp_manager.js
Functions Extracted: 6


Function 1: httpReqFunction
Language: JavaScript
Lines: 47
Full Code:
--------------------------------------------------------------------------------
function httpReqFunction() {
    if (isNativescript) {
        return function (options, callback) {
            var http = require('http');
            var uri = options.scheme + '://' + options.host + ':' + options.port + options.path;

            http
                .request({
                    url: uri,
                    method: options.method || 'GET',
                    timeout: 10000,
                    headers: options.headers,
                    content: options.body,
                })
                .then(function (results) {
                    callback(null, results.content.toString());
                })
                ['catch'](function (err) {
                    callback(err);
                });
        };
    } else if (isBrowser) {
        return function (options, callback) {
            var xhr = new XMLHttpRequest();
            var uri;

            uri = options.scheme + '://' + options.host + ':' + options.port + options.path;

            xhr.open(options.method, uri);
            if (options.headers && !xhr.isXDR) {
                for (var h in options.headers) if (h !== 'Content-Length') xhr.setRequestHeader(h, options.headers[h]);
            }
            xhr.onerror = function (err) {
                callback(err);
            };
            if ('onreadystatechange' in xhr) {
                /* XHR */
                xhr.onreadystatechange = function () {
                    if (xhr.readyState == 4) {
                        if (xhr.status >= 300) {
                            callback('HTTP request failed ' + xhr.status);
                            return;
                        }
                        callback(null, xhr.responseText);
                    }
                };
            } else {
                /* XDR */
                xhr.onload = function () {
                    if (xhr.status >= 300) {
                        callback('HTTP request failed ' + xhr.status);
                        return;
                    }
                    callback(null, xhr.responseText);
                };
            }
            xhr.send(options.body);
        };
    } else {
        var http = require('http'),
            https = require('https');

        return function (options, callback) {
            var body = options.body;
            delete options.body;
            var response = '';
            var request = (options.scheme == 'http' ? http : https).request(options, function (res) {
                res.setEncoding('utf8');
                res.on('data', function (chunk) {
                    response += chunk;
                });
                res.on('end', function () {
                    if (res.statusCode >= 300) {
                        callback('Invalid HTTP request: ' + response + '; statusCode = ' + res.statusCode);
                    } else {
                        callback(null, response);
                    }
                });
            });
            request.on('error', function (err) {
                callback(err);
            });
            request.end(body);
        };
    }
}
--------------------------------------------------------------------------------


Function 2: createNewApp
Language: JavaScript
Lines: 24
Full Code:
--------------------------------------------------------------------------------
function createNewApp(callback) {
    loadJsonData(testResourcesPath + 'test-app-setup.json', function (err, testData) {
        if (err) {
            callback(err);
            return;
        }
        var postData = JSON.stringify(testData.post_apps);
        var postOptions = {
            host: restHost,
            port,
            path: '/apps',
            method: 'POST',
            scheme,
            headers: { Accept: 'application/json', 'Content-Type': 'application/json', 'Content-Length': postData.length },
            body: postData,
        };

        httpReq(postOptions, function (err, res) {
            if (err) {
                callback(err);
            } else {
                if (typeof res === 'string') res = JSON.parse(res);
                if (res.keys.length != testData.post_apps.keys.length) {
                    callback('Failed to create correct number of keys for app');
                } else if (res.namespaces.length != testData.post_apps.namespaces.length) {
                    callback('Failed to create correct number of namespaces for app');
                } else {
                    var testApp = {
                        accountId: res.accountId,
                        appId: res.appId,
                        keys: res.keys,
                        cipherConfig: testData.cipher,
                    };
                    callback(null, testApp);
                }
            }
        });
    });
}
--------------------------------------------------------------------------------


Function 3: createStatsFixtureData
Language: JavaScript
Lines: 18
Full Code:
--------------------------------------------------------------------------------
function createStatsFixtureData(helper, app, statsData, callback) {
    helper = helper.addingHelperFunction('createStatsFixtureData');
    var postData = JSON.stringify(statsData);

    var authKey = app.keys[0].keyStr;
    var authHeader = toBase64(helper, authKey);

    var postOptions = {
        host: restHost,
        port,
        path: '/stats',
        method: 'POST',
        scheme,
        headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
            'Content-Length': postData.length,
            Authorization: 'Basic ' + authHeader,
        },
        body: postData,
        paramsIfNoHeaders: { key: authKey },
    };

    httpReq(postOptions, function (err) {
        if (err) {
            callback(err);
        } else {
            callback(null);
        }
    });
}
--------------------------------------------------------------------------------


Function 4: deleteApp
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function deleteApp(helper, app, callback) {
    helper = helper.addingHelperFunction('deleteApp');
    var authKey = app.keys[0].keyStr,
        authHeader = toBase64(helper, authKey);

    var delOptions = {
        host: restHost,
        port,
        method: 'DELETE',
        path: '/apps/' + app.appId,
        scheme,
        headers: { Authorization: 'Basic ' + authHeader },
    };

    httpReq(delOptions, function (err) {
        callback(err);
    });
}
--------------------------------------------------------------------------------


Function 5: loadJsonDataBrowser
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function loadJsonDataBrowser(dataPath, callback) {
    var getOptions = {
        host: window.location.hostname,
        port: window.location.port,
        path: '/' + dataPath,
        method: 'GET',
        scheme: window.location.protocol.slice(0, -1),
        headers: { 'Content-Type': 'application/json' },
    };

    httpReq(getOptions, function (err, data) {
        if (err) {
            callback(err);
            return;
        }
        try {
            data = JSON.parse(data);
        } catch (e) {
            callback(e);
            return;
        }
        callback(null, data);
    });
}
--------------------------------------------------------------------------------


Function 6: loadJsonDataNode
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function loadJsonDataNode(dataPath, callback) {
    var fs = require('fs'),
        path = require('path'),
        resolvedPath = path.resolve(__dirname, '../../..', dataPath);

    fs.readFile(resolvedPath, function (err, data) {
        if (err) {
            callback(err);
            return;
        }
        try {
            data = JSON.parse(data);
        } catch (e) {
            callback(e);
            return;
        }
        callback(null, data);
    });
}
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T04:02:24.947Z
Question Type: select-all
Function: loadJsonDataBrowser
Function Size: 720 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: loadJsonDataBrowser (JavaScript)\n// Loads JSON data from the server in a browser environment\n\nfunction loadJsonDataBrowser(dataPath, callback) {\n    var getOptions = {\n        host: window.location.hostname,\n        port: window.location.port,\n        path: '/' + dataPath,\n        metho
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T04:02:29.574Z
Question Type: select-all
Function: deleteApp
Function Size: 562 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: deleteApp (JavaScript)\n// Deletes an app by sending a DELETE request to the server\n\nfunction deleteApp(helper, app, callback) {\n    helper = helper.addingHelperFunction('deleteApp');\n    var authKey = app.keys[0].keyStr,\n        authHeader = toBase64(helper, authKey);\n\n    var delOption
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T04:02:38.090Z
Question Type: select-all
Function: createNewApp
Function Size: 1572 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: createNewApp (JavaScript)\n// Creates a new app by sending a POST request with app setup data\n\nfunction createNewApp(callback) {\n    loadJsonData(testResourcesPath + 'test-app-setup.json', function (err, testData) {\n        if (err) {\n            callback(err);\n            return;\n      
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T04:02:46.750Z
Question Type: true-false
Function: deleteApp
Function Size: 562 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: deleteApp (JavaScript)\n// Deletes an app by sending a DELETE request to the server\n\nfunction deleteApp(helper, app, callback) {\n    helper = helper.addingHelperFunction('deleteApp');\n    var authKey = app.keys[0].keyStr,\n        authHeader = toBase64(helper, authKey);\n\n    var delOption
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T04:02:46.902Z
Question Type: function-variant
Function: httpReqFunction
Function Size: 3244 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: httpReqFunction (JavaScript)\n// Handles HTTP requests based on the environment (Nativescript, Browser, Node.js)\n\nfunction httpReqFunction() {\n    if (isNativescript) {\n        return function (options, callback) {\n            var http = require('http');\n            var uri = options.sch
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T04:02:50.809Z
Question Type: order-sequence
Function: httpReqFunction
Function Size: 3244 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: httpReqFunction (JavaScript)\n// Handles HTTP requests based on the environment (Nativescript, Browser, Node.js)\n\nfunction httpReqFunction() {\n    if (isNativescript) {\n        return function (options, callback) {\n            var http = require('http');\n            var uri = options.sch
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T04:02:53.976Z
Question Type: function-variant
Function: deleteApp
Function Size: 562 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: deleteApp (JavaScript)\n// Deletes an app by sending a DELETE request to the server\n\nfunction deleteApp(helper, app, callback) {\n    helper = helper.addingHelperFunction('deleteApp');\n    var authKey = app.keys[0].keyStr,\n        authHeader = toBase64(helper, authKey);\n\n    var delOption
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T04:03:01.452Z
Question Type: select-all
Function: createStatsFixtureData
Function Size: 942 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: createStatsFixtureData (JavaScript)\n// Sends stats data to the server for the given app\n\nfunction createStatsFixtureData(helper, app, statsData, callback) {\n    helper = helper.addingHelperFunction('createStatsFixtureData');\n    var postData = JSON.stringify(statsData);\n\n    var authKey
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T04:03:06.387Z
Question Type: select-all
Function: loadJsonDataNode
Function Size: 584 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: loadJsonDataNode (JavaScript)\n// Loads JSON data from the file system in a Node.js environment\n\nfunction loadJsonDataNode(dataPath, callback) {\n    var fs = require('fs'),\n        path = require('path'),\n        resolvedPath = path.resolve(__dirname, '../../..', dataPath);\n\n    fs.readF
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T04:03:07.957Z
Question Type: order-sequence
Function: createNewApp
Function Size: 1572 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: createNewApp (JavaScript)\n// Creates a new app by sending a POST request with app setup data\n\nfunction createNewApp(callback) {\n    loadJsonData(testResourcesPath + 'test-app-setup.json', function (err, testData) {\n        if (err) {\n            callback(err);\n            return;\n      
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T04:03:15.582Z
Question Type: true-false
Function: loadJsonDataNode
Function Size: 584 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: loadJsonDataNode (JavaScript)\n// Loads JSON data from the file system in a Node.js environment\n\nfunction loadJsonDataNode(dataPath, callback) {\n    var fs = require('fs'),\n        path = require('path'),\n        resolvedPath = path.resolve(__dirname, '../../..', dataPath);\n\n    fs.readF
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T04:03:16.246Z
Question Type: multiple-choice
Function: loadJsonDataBrowser
Function Size: 720 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: loadJsonDataBrowser (JavaScript)\n// Loads JSON data from the server in a browser environment\n\nfunction loadJsonDataBrowser(dataPath, callback) {\n    var getOptions = {\n        host: window.location.hostname,\n        port: window.location.port,\n        path: '/' + dataPath,\n        metho
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760320988135
Repository: Unknown
Total Questions Generated: 12
Total Chunks Processed: 6
Ended: 2025-10-13T04:03:16.271Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-13T04:04:07.154Z
File: ably-ably-js-4967374/test/realtime/resume.test.js
Functions Extracted: 4


Function 1: sendAndAwait
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function sendAndAwait(message, sendingChannel, receivingChannel, callback) {
  var event = String(Math.random());
  receivingChannel.subscribe(event, function (msg) {
    receivingChannel.unsubscribe(event);
    callback();
  });
  Helper.whenPromiseSettles(sendingChannel.publish(event, message), function (err) {
    if (err) callback(err);
  });
}
--------------------------------------------------------------------------------


Function 2: resume_inactive
Language: JavaScript
Lines: 56
Full Code:
--------------------------------------------------------------------------------
function resume_inactive(done, helper, channelName, txOpts, rxOpts) {
  var count = 5;

  var txRest = helper.AblyRest(mixin(txOpts));
  var rxRealtime = helper.AblyRealtime(mixin(rxOpts));

  var rxChannel = rxRealtime.channels.get(channelName);
  var txChannel = txRest.channels.get(channelName);
  var rxCount = 0;

  function phase0(callback) {
    Helper.whenPromiseSettles(rxChannel.attach(), callback);
  }

  function phase1(callback) {
    function ph1TxOnce() {
      sendAndAwait('phase 1, message ' + rxCount, txChannel, rxChannel, function (err) {
        if (err) callback(err);
        if (++rxCount == count) {
          callback(null);
          return;
        }
        setTimeout(ph1TxOnce, 800);
      });
    }
    ph1TxOnce();
  }

  function phase2(callback) {
    helper.simulateDroppedConnection(rxRealtime);
    setTimeout(callback, 5000);
  }

  function phase3(callback) {
    rxRealtime.connection.connect();
    var connectionManager = rxRealtime.connection.connectionManager;
    helper.recordPrivateApi('listen.connectionManager.transport.active');
    connectionManager.once('transport.active', function (transport) {
      try {
        helper.recordPrivateApi('read.transport.params.mode');
        expect(transport.params.mode).to.equal('resume', 'Verify reconnect is resume mode');
      } catch (err) {
        callback(err);
        return;
      }
      callback(null);
    });
  }

  function phase4(callback) {
    rxCount = 0;
    function ph4TxOnce() {
      sendAndAwait('phase 4, message ' + rxCount, txChannel, rxChannel, function (err) {
        if (err) callback(err);
        if (++rxCount == count) {
          callback(null);
          return;
        }
        setTimeout(ph4TxOnce, 800);
      });
    }
    ph4TxOnce();
  }

  phase0(function (err) {
    if (err) {
      helper.closeAndFinish(done, rxRealtime, err);
      return;
    }
    phase1(function (err) {
      if (err) {
        helper.closeAndFinish(done, rxRealtime, err);
        return;
      }
      phase2(function (err) {
        if (err) {
          helper.closeAndFinish(done, rxRealtime, err);
          return;
        }
        phase3(function (err) {
          if (err) {
            helper.closeAndFinish(done, rxRealtime, err);
            return;
          }
          phase4(function (err) {
            if (err) {
              helper.closeAndFinish(done, rxRealtime, err);
              return;
            }
            helper.closeAndFinish(done, rxRealtime);
          });
        });
      });
    });
  });
}
--------------------------------------------------------------------------------


Function 3: resume_active
Language: JavaScript
Lines: 56
Full Code:
--------------------------------------------------------------------------------
function resume_active(done, helper, channelName, txOpts, rxOpts) {
  var count = 5;

  var txRest = helper.AblyRest(mixin(txOpts));
  var rxRealtime = helper.AblyRealtime(mixin(rxOpts));

  var rxChannel = rxRealtime.channels.get(channelName);
  var txChannel = txRest.channels.get(channelName);
  var rxCount = 0;

  function phase0(callback) {
    Helper.whenPromiseSettles(rxChannel.attach(), callback);
  }

  function phase1(callback) {
    function ph1TxOnce() {
      sendAndAwait('phase 1, message ' + rxCount, txChannel, rxChannel, function (err) {
        if (err) callback(err);
        if (++rxCount == count) {
          callback(null);
          return;
        }
        setTimeout(ph1TxOnce, 800);
      });
    }
    ph1TxOnce();
  }

  function phase2(callback) {
    helper.simulateDroppedConnection(rxRealtime);
    var txCount = 0;

    function ph2TxOnce() {
      Helper.whenPromiseSettles(
        txChannel.publish('sentWhileDisconnected', 'phase 2, message ' + txCount),
        function (err) {
          if (err) callback(err);
        },
      );
      if (++txCount == count) {
        setTimeout(function () {
          callback(null);
        }, 1000);
        return;
      }
      setTimeout(ph2TxOnce, 1000);
    }

    setTimeout(ph2TxOnce, 800);
  }

  function phase3(callback) {
    rxChannel.subscribe('sentWhileDisconnected', function (msg) {
      ++rxCount;
    });
    rxCount = 0;
    rxRealtime.connection.connect();
    var connectionManager = rxRealtime.connection.connectionManager;
    helper.recordPrivateApi('listen.connectionManager.transport.active');
    connectionManager.on('transport.active', function (transport) {
      try {
        helper.recordPrivateApi('read.transport.params.mode');
        expect(transport.params.mode).to.equal('resume', 'Verify reconnect is resume mode');
      } catch (err) {
        callback(err);
        return;
      }
      setTimeout(function () {
        try {
          expect(rxCount).to.equal(count, 'Verify Phase 3 messages all received');
        } catch (err) {
          callback(err);
          return;
        }
        callback(null);
      }, 2000);
    });
  }

  phase0(function (err) {
    if (err) {
      helper.closeAndFinish(done, rxRealtime, err);
      return;
    }
    phase1(function (err) {
      if (err) {
        helper.closeAndFinish(done, rxRealtime, err);
        return;
      }
      phase2(function (err) {
        if (err) {
          helper.closeAndFinish(done, rxRealtime, err);
          return;
        }
        phase3(function (err) {
          if (err) {
            helper.closeAndFinish(done, rxRealtime, err);
            return;
          }
          helper.closeAndFinish(done, rxRealtime);
        });
      });
    });
  });
}
--------------------------------------------------------------------------------


Function 4: subscribeRecoveredMessages
Language: JavaScript
Lines: 14
Full Code:
--------------------------------------------------------------------------------
function subscribeRecoveredMessages(callback) {
  async.each(
    rxRecoverChannels,
    (channel, cb) => {
      let recoveredCount = 0;
      channel.subscribe((msg) => {
        expect(msg.name).to.equal('sentWhileDisconnected');

        recoveredCount++;

        if (recoveredCount === NUM_MSGS) {
          cb();
        }
      });
    },
    callback,
  );
}
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T04:04:22.308Z
Question Type: order-sequence
Function: resume_inactive
Function Size: 2660 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: resume_inactive (JavaScript)\n// Tests the resume functionality when the connection is inactive.\n\nfunction resume_inactive(done, helper, channelName, txOpts, rxOpts) {\n  var count = 5;\n\n  var txRest = helper.AblyRest(mixin(txOpts));\n  var rxRealtime = helper.AblyRealtime(mixin(rxOpts));\n
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T04:04:24.279Z
Question Type: order-sequence
Function: subscribeRecoveredMessages
Function Size: 481 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: subscribeRecoveredMessages (JavaScript)\n// Subscribes to recovered messages from multiple channels.\n\nfunction subscribeRecoveredMessages(callback) {\n  async.each(\n    rxRecoverChannels,\n    (channel, cb) => {\n      let recoveredCount = 0;\n      channel.subscribe((msg) => {\n        expec
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T04:04:30.441Z
Question Type: multiple-choice
Function: subscribeRecoveredMessages
Function Size: 481 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: subscribeRecoveredMessages (JavaScript)\n// Subscribes to recovered messages from multiple channels.\n\nfunction subscribeRecoveredMessages(callback) {\n  async.each(\n    rxRecoverChannels,\n    (channel, cb) => {\n      let recoveredCount = 0;\n      channel.subscribe((msg) => {\n        expec
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T04:04:32.181Z
Question Type: true-false
Function: resume_active
Function Size: 2876 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: resume_active (JavaScript)\n// Tests the resume functionality when the connection is active.\n\nfunction resume_active(done, helper, channelName, txOpts, rxOpts) {\n  var count = 5;\n\n  var txRest = helper.AblyRest(mixin(txOpts));\n  var rxRealtime = helper.AblyRealtime(mixin(rxOpts));\n\n  var
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T04:04:36.907Z
Question Type: true-false
Function: sendAndAwait
Function Size: 460 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: sendAndAwait (JavaScript)\n// Sends a message and waits for a response on the receiving channel.\n\nfunction sendAndAwait(message, sendingChannel, receivingChannel, callback) {\n  var event = String(Math.random());\n  receivingChannel.subscribe(event, function (msg) {\n    receivingChannel.un
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T04:04:37.177Z
Question Type: function-variant
Function: resume_inactive
Function Size: 2660 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: resume_inactive (JavaScript)\n// Tests the resume functionality when the connection is inactive.\n\nfunction resume_inactive(done, helper, channelName, txOpts, rxOpts) {\n  var count = 5;\n\n  var txRest = helper.AblyRest(mixin(txOpts));\n  var rxRealtime = helper.AblyRealtime(mixin(rxOpts));\n
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T04:04:43.235Z
Question Type: function-variant
Function: sendAndAwait
Function Size: 460 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: sendAndAwait (JavaScript)\n// Sends a message and waits for a response on the receiving channel.\n\nfunction sendAndAwait(message, sendingChannel, receivingChannel, callback) {\n  var event = String(Math.random());\n  receivingChannel.subscribe(event, function (msg) {\n    receivingChannel.un
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760320988135
Repository: Unknown
Total Questions Generated: 7
Total Chunks Processed: 4
Ended: 2025-10-13T04:04:43.265Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-13T04:43:20.301Z
File: [8 files: epic.ts, createEpicMiddleware-spec.ts, combineEpics-spec.ts, @ts-expect-error type doesn't match on purpose, @ts-expect-error type doesn't match on purpose, initAction.ts, createEpicMiddleware.ts, console.ts]
Functions Extracted: 2


Function 1: combineEpics
Language: TypeScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
export const combineEpics = <Input = unknown, Output extends Input = Input, State = void>(...epics: Array<Epic<Input, Output, State>>): Epic<Input, Output, State> => {
  const combinedEpic: Epic<Input, Output, State> = (action$, state$, dependencies) => {
    const epic$ = merge(...epics.map(epic => epic(action$, state$, dependencies)));
    return epic$;
  };
  return combinedEpic;
};
--------------------------------------------------------------------------------


Function 2: createEpicMiddleware
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
export const createEpicMiddleware = <Input = unknown, Output extends Input = Input, State = void, Dependencies = any>(options: Options<Dependencies> = {}): EpicMiddleware<Input, Output, State, Dependencies> => {
  const { dependencies } = options;
  const epic$ = new Subject<Epic<Input, Output, State>>();
  const middleware: Middleware<unknown, void> = ({ dispatch, getState }: MiddlewareAPI) => next => action => {
    const result = next(action);
    epic$.next(action);
    return result;
  };
  return { middleware, run: epic$.subscribe.bind(epic$) };
};
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T04:43:31.178Z
Question Type: select-all
Function: combineEpics
Function Size: 475 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: combineEpics (TypeScript)\n// Combines multiple epics into a single epic.\n\nexport const combineEpics = <Input = unknown, Output extends Input = Input, State = void>(...epics: Array<Epic<Input, Output, State>>): Epic<Input, Output, State> => {\n  const combinedEpic: Epic<Input, Output, Sta
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T04:43:31.298Z
Question Type: multiple-choice
Function: combineEpics
Function Size: 475 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: combineEpics (TypeScript)\n// Combines multiple epics into a single epic.\n\nexport const combineEpics = <Input = unknown, Output extends Input = Input, State = void>(...epics: Array<Epic<Input, Output, State>>): Epic<Input, Output, State> => {\n  const combinedEpic: Epic<Input, Output, Sta
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T04:43:35.337Z
Question Type: function-variant
Function: combineEpics
Function Size: 475 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: combineEpics (TypeScript)\n// Combines multiple epics into a single epic.\n\nexport const combineEpics = <Input = unknown, Output extends Input = Input, State = void>(...epics: Array<Epic<Input, Output, State>>): Epic<Input, Output, State> => {\n  const combinedEpic: Epic<Input, Output, Sta
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T04:43:40.819Z
Question Type: true-false
Function: combineEpics
Function Size: 475 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: combineEpics (TypeScript)\n// Combines multiple epics into a single epic.\n\nexport const combineEpics = <Input = unknown, Output extends Input = Input, State = void>(...epics: Array<Epic<Input, Output, State>>): Epic<Input, Output, State> => {\n  const combinedEpic: Epic<Input, Output, Sta
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760320988135
Repository: Unknown
Total Questions Generated: 6
Total Chunks Processed: 2
Ended: 2025-10-13T04:43:40.868Z
================================================================================


--- QUESTION GENERATION ---
Timestamp: 2025-10-13T04:43:49.880Z
Question Type: select-all
Function: combineEpics
Function Size: 475 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: combineEpics (TypeScript)\n// Combines multiple epics into a single epic.\n\nexport const combineEpics = <Input = unknown, Output extends Input = Input, State = void>(...epics: Array<Epic<Input, Output, State>>): Epic<Input, Output, State> => {\n  const combinedEpic: Epic<Input, Output, Sta
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T04:43:54.881Z
Question Type: select-all
Function: createEpicMiddleware
Function Size: 649 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: createEpicMiddleware (TypeScript)\n// Creates an epic middleware for Redux.\n\nexport const createEpicMiddleware = <Input = unknown, Output extends Input = Input, State = void, Dependencies = any>(options: Options<Dependencies> = {}): EpicMiddleware<Input, Output, State, Dependencies> => {
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T04:43:55.606Z
Question Type: function-variant
Function: createEpicMiddleware
Function Size: 649 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: createEpicMiddleware (TypeScript)\n// Creates an epic middleware for Redux.\n\nexport const createEpicMiddleware = <Input = unknown, Output extends Input = Input, State = void, Dependencies = any>(options: Options<Dependencies> = {}): EpicMiddleware<Input, Output, State, Dependencies> => {
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T04:43:56.740Z
Question Type: function-variant
Function: createEpicMiddleware
Function Size: 649 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: createEpicMiddleware (TypeScript)\n// Creates an epic middleware for Redux.\n\nexport const createEpicMiddleware = <Input = unknown, Output extends Input = Input, State = void, Dependencies = any>(options: Options<Dependencies> = {}): EpicMiddleware<Input, Output, State, Dependencies> => {
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T04:43:58.979Z
Question Type: select-all
Function: combineEpics
Function Size: 475 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: combineEpics (TypeScript)\n// Combines multiple epics into a single epic.\n\nexport const combineEpics = <Input = unknown, Output extends Input = Input, State = void>(...epics: Array<Epic<Input, Output, State>>): Epic<Input, Output, State> => {\n  const combinedEpic: Epic<Input, Output, Sta
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T04:44:07.287Z
Question Type: true-false
Function: combineEpics
Function Size: 475 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: combineEpics (TypeScript)\n// Combines multiple epics into a single epic.\n\nexport const combineEpics = <Input = unknown, Output extends Input = Input, State = void>(...epics: Array<Epic<Input, Output, State>>): Epic<Input, Output, State> => {\n  const combinedEpic: Epic<Input, Output, Sta
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T04:44:09.955Z
Question Type: multiple-choice
Function: combineEpics
Function Size: 475 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: combineEpics (TypeScript)\n// Combines multiple epics into a single epic.\n\nexport const combineEpics = <Input = unknown, Output extends Input = Input, State = void>(...epics: Array<Epic<Input, Output, State>>): Epic<Input, Output, State> => {\n  const combinedEpic: Epic<Input, Output, Sta
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-13T04:44:10.415Z
Question Type: function-variant
Function: combineEpics
Function Size: 475 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: combineEpics (TypeScript)\n// Combines multiple epics into a single epic.\n\nexport const combineEpics = <Input = unknown, Output extends Input = Input, State = void>(...epics: Array<Epic<Input, Output, State>>): Epic<Input, Output, State> => {\n  const combinedEpic: Epic<Input, Output, Sta
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760320988135
Repository: Unknown
Total Questions Generated: 9
Total Chunks Processed: 2
Ended: 2025-10-13T04:44:10.441Z
================================================================================

