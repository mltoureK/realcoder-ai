=== FUNCTION EXTRACTION & QUESTION GENERATION LOG ===
Session ID: session-1759992009909
Started: 2025-10-09T06:40:09.909Z


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-09T06:40:09.909Z
File: + 3 = 14
Functions Extracted: 7


Function 1: test
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
test("dragEnd returns transformed pointer", async () => {
        const onDragEnd = deferred<Point>()
        const p: Point = { x: 0, y: 0 }

        const Component = () => (
            <MockDrag>
                <motion.div
                    data-testid="draggable"
                    drag
                    onDrag={(_e, { point }) => {
                        p.x = point.x
                        p.y = point.y
                    }}
                    onDragEnd={(_e, { point }) => {
                        onDragEnd.resolve(point)
                    }}
                    style={{ x: 100, y: 100 }}
                />
            </MockDrag>
        )

        const { getByTestId, rerender } = render(<Component />)
        rerender(<Component />)

        const pointer = await drag(getByTestId("draggable")).to(50, 50)
        pointer.end()

        await expect(onDragEnd.promise).resolves.toEqual(p)
    })
--------------------------------------------------------------------------------


Function 2: test
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
test("panSessionStart fires", async () => {
        const onDragStart = jest.fn()
        const Component = () => (
            <MockDrag>
                <motion.div drag onPanSessionStart={onDragStart} />
            </MockDrag>
        )

        const { container, rerender } = render(<Component />)
        rerender(<Component />)

        const pointer = await drag(container.firstChild).to(100, 100)
        pointer.end()

        await nextFrame()

        expect(onDragStart).toBeCalledTimes(1)
    })
--------------------------------------------------------------------------------


Function 3: test
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
test("dragTransitionEnd fires", async () => {
        const onDragTransitionEnd = deferred<boolean>()
        const Component = () => (
            <MockDrag>
                <motion.div
                    drag
                    onDragTransitionEnd={() =>
                        onDragTransitionEnd.resolve(true)
                    }
                    dragConstraints={{
                        top: 0,
                        left: 0,
                        right: 0,
                        bottom: 0,
                    }}
                    dragTransition={{
                        bounceStiffness: 100000,
                        bounceDamping: 100000,
                    }}
                />
            </MockDrag>
        )

        const { container, rerender } = render(<Component />)
        rerender(<Component />)

        const pointer = await drag(container.firstChild).to(1, 1)
        await pointer.to(50, 50)
        pointer.end()

        expect(onDragTransitionEnd.promise).resolves.toBe(true)
    })
--------------------------------------------------------------------------------


Function 4: test
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
test("drag momentum is applied", async () => {
        const x = motionValue(0)
        const Component = () => (
            <MockDrag>
                <motion.div drag="x" style={{ x }} />
            </MockDrag>
        )

        const { container, rerender } = render(<Component />)
        rerender(<Component />)

        const pointer = await drag(container.firstChild).to(1, 1)
        await pointer.to(50, 50)
        pointer.end()

        const endValue = await new Promise<number>((resolve) => {
            setTimeout(() => {
                resolve(x.get())
            }, 40)
        })

        return expect(endValue).toBeGreaterThan(50)
    })
--------------------------------------------------------------------------------


Function 5: test
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
test("limit to initial direction: x", async () => {
        const x = motionValue(0)
        const y = motionValue(0)
        const Component = () => (
            <MockDrag>
                <motion.div drag dragDirectionLock style={{ x, y }} />
            </MockDrag>
        )

        const { container, rerender } = render(<Component />)
        rerender(<Component />)

        const pointer = await drag(container.firstChild).to(100, 0)
        await pointer.to(50, 4)
        await pointer.to(200, 10)
        pointer.end()

        expect({
            x: x.get(),
            y: y.get(),
        }).toEqual({
            x: 200,
            y: 0,
        })
    })
--------------------------------------------------------------------------------


Function 6: test
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
test("block drag propagation", async () => {
        const childX = motionValue(0)
        const parentX = motionValue(0)
        const Component = () => (
            <MockDrag>
                <motion.div drag="x" style={{ x: parentX }}>
                    <motion.div
                        data-testid="child"
                        drag
                        style={{ x: childX }}
                    />
                </motion.div>
            </MockDrag>
        )

        const { getByTestId, rerender } = render(<Component />)
        rerender(<Component />)

        const pointer = await drag(getByTestId("child")).to(10, 0)
        await pointer.to(20, 0)
        pointer.end()

        expect({
            parentX: parentX.get(),
            childX: childX.get(),
        }).toEqual({
            parentX: 0,
            childX: 20,
        })
    })
--------------------------------------------------------------------------------


Function 7: test
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
test("whileDrag applies animation state", async () => {
        const opacity = motionValue(0)
        const Component = () => (
            <MockDrag>
                <motion.div
                    drag
                    whileDrag={{ opacity: 0.5 }}
                    transition={{ type: false }}
                    style={{ opacity }}
                />
            </MockDrag>
        )

        const { container, rerender } = render(<Component />)
        rerender(<Component />)

        const pointer = await drag(container.firstChild).to(0, 100)
        await pointer.to(4, 50)
        expect(opacity.get()).toBe(0.5)
        await pointer.to(10, 200)
        pointer.end()

        await nextFrame()
        expect(opacity.get()).toBe(0)
    })
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-09T06:40:43.319Z
File: motiondivision-motion-4069086/packages/framer-motion/src/value/use-transform.ts
Functions Extracted: 2


Function 1: useTransform
Language: TypeScript
Lines: 21
Full Code:
--------------------------------------------------------------------------------
export function useTransform<I, O>(
    input:
        | MotionValue<I>
        | MotionValue<string>[]
        | MotionValue<number>[]
        | MotionValue<AnyResolvedKeyframe>[]
        | (() => O),
    inputRangeOrTransformer?: InputRange | Transformer<I, O>,
    outputRange?: O[],
    options?: TransformOptions<O>
): MotionValue<O> {
    if (typeof input === "function") {
        return useComputed(input)
    }

    const transformer =
        typeof inputRangeOrTransformer === "function"
            ? inputRangeOrTransformer
            : transform(inputRangeOrTransformer!, outputRange!, options)

    return Array.isArray(input)
        ? useListTransform(
              input,
              transformer as MultiTransformer<AnyResolvedKeyframe, O>
          )
        : useListTransform([input], ([latest]) =>
              (transformer as SingleTransformer<I, O>)(latest)
          )
}
--------------------------------------------------------------------------------


Function 2: useListTransform
Language: TypeScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function useListTransform<I, O>(
    values: MotionValue<I>[],
    transformer: MultiTransformer<I, O>
): MotionValue<O> {
    const latest = useConstant<I[]>(() => [])

    return useCombineMotionValues(values, () => {
        latest.length = 0
        const numValues = values.length
        for (let i = 0; i < numValues; i++) {
            latest[i] = values[i].get()
        }

        return transformer(latest)
    })
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-09T06:40:49.493Z
File: motiondivision-motion-4069086/packages/framer-motion/src/motion/__tests__/static-prop.test.tsx
Functions Extracted: 2


Function 1: Component
Language: TypeScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function Component() {
            const x = useMotionValue(10);

            useEffect(() => x.set(20), [x]);

            return <motion.div data-testid="child" style={{ x }} />;
        }
--------------------------------------------------------------------------------


Function 2: Component
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function Component({ x }: { x: number }) {
            return (
                <MotionConfig isStatic>
                    <motion.div data-testid="a" style={{ x }} />
                </MotionConfig>
            );
        }
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T06:40:58.963Z
Question Type: multiple-choice
Function: useListTransform
Function Size: 540 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: useListTransform (TypeScript)\n// Combines multiple MotionValues and applies a transformer function.\n\nfunction useListTransform<I, O>(\n    values: MotionValue<I>[],\n    transformer: MultiTransformer<I, O>\n): MotionValue<O> {\n    const latest = useConstant<I[]>(() => [])\n\n    return useCo
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T06:41:01.478Z
Question Type: select-all
Function: test
Function Size: 598 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: test (JavaScript)\n// Tests if the pan session start event fires correctly\n\ntest("panSessionStart fires", async () => {\n        const onDragStart = jest.fn()\n        const Component = () => (\n            <MockDrag>\n                <motion.div drag onPanSessionStart={onDragStart} />\n     
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T06:41:05.908Z
Question Type: select-all
Function: test
Function Size: 851 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: test (JavaScript)\n// Tests if whileDrag applies the animation state correctly\n\ntest("whileDrag applies animation state", async () => {\n        const opacity = motionValue(0)\n        const Component = () => (\n            <MockDrag>\n                <motion.div\n                    drag\n   
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T06:41:08.830Z
Question Type: true-false
Function: test
Function Size: 777 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: test (JavaScript)\n// Tests if dragging is limited to the initial direction on the x-axis\n\ntest("limit to initial direction: x", async () => {\n        const x = motionValue(0)\n        const y = motionValue(0)\n        const Component = () => (\n            <MockDrag>\n                <motio
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T06:41:12.328Z
Question Type: multiple-choice
Function: Component
Function Size: 295 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: Component (TypeScript)\n// Updates a motion value and renders a motion div with that value.\n\nfunction Component() {\n            const x = useMotionValue(10);\n\n            useEffect(() => x.set(20), [x]);\n\n            return <motion.div data-testid="child" style={{ x }} />;\n        }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T06:41:15.907Z
Question Type: function-variant
Function: Component
Function Size: 338 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: Component (TypeScript)\n// Renders a motion div with a given x style inside a static motion config.\n\nfunction Component({ x }: { x: number }) {\n            return (\n                <MotionConfig isStatic>\n                    <motion.div data-testid="a" style={{ x }} />\n                </
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T06:41:23.588Z
Question Type: select-all
Function: test
Function Size: 953 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: test (JavaScript)\n// Tests if drag propagation is blocked correctly\n\ntest("block drag propagation", async () => {\n        const childX = motionValue(0)\n        const parentX = motionValue(0)\n        const Component = () => (\n            <MockDrag>\n                <motion.div drag="x" st
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T06:41:28.990Z
Question Type: order-sequence
Function: test
Function Size: 1123 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: test (JavaScript)\n// Tests if the drag transition end event fires correctly\n\ntest("dragTransitionEnd fires", async () => {\n        const onDragTransitionEnd = deferred<boolean>()\n        const Component = () => (\n            <MockDrag>\n                <motion.div\n                    dra
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T06:41:45.830Z
Question Type: function-variant
Function: test
Function Size: 741 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: test (JavaScript)\n// Tests if drag momentum is applied correctly\n\ntest("drag momentum is applied", async () => {\n        const x = motionValue(0)\n        const Component = () => (\n            <MockDrag>\n                <motion.div drag="x" style={{ x }} />\n            </MockDrag>\n      
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-09T06:41:50.454Z
Question Type: function-variant
Function: useTransform
Function Size: 1014 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: useTransform (TypeScript)\n// Transforms a MotionValue based on input range or transformer function.\n\nexport function useTransform<I, O>(\n    input:\n        | MotionValue<I>\n        | MotionValue<string>[]\n        | MotionValue<number>[]\n        | MotionValue<AnyResolvedKeyframe>[]\n     
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1759992009909
Repository: Unknown
Total Questions Generated: 8
Total Chunks Processed: 11
Ended: 2025-10-09T06:41:50.455Z
================================================================================

