=== FUNCTION EXTRACTION & QUESTION GENERATION LOG ===
Session ID: session-1760124196390
Started: 2025-10-10T19:23:16.390Z


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T19:23:16.391Z
File: nothing yielded for bad markup
Functions Extracted: 6


Function 1: Counter
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function Counter(props) {
        const renderCount = useCallback(increment => {
          return 'Count: ' + (props.count + increment);
        });
        return <Text text={renderCount(3)} />;
      }
--------------------------------------------------------------------------------


Function 2: CapitalizedText
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function CapitalizedText(props) {
          const [text, setText] = useState(props.text);
          const [count, setCount] = useState(0);
          const capitalizeText = useCallback(() => text.toUpperCase(), [text]);
          yieldValue(capitalizeText);
          if (count < 3) {
            setCount(count + 1);
          }
          if (text === 'hello' && count === 2) {
            setText('hello, world.');
          }
          return <Text text={capitalizeText()} />;
        }
--------------------------------------------------------------------------------


Function 3: Counter
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function Counter(props, ref) {
        useImperativeHandle(ref, () => {
          throw new Error('should not be invoked');
        });
        return <Text text={props.label + ': ' + ref.current} />;
      }
--------------------------------------------------------------------------------


Function 4: App
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function App(props) {
        return (
          <div>
            <Provider foo={props.foo} bar={props.bar} baz={props.baz}>
              <Indirection>
                <Indirection>
                  <FooAndBar />
                </Indirection>
                <Indirection>
                  <Baz />
                </Indirection>
              </Indirection>
            </Provider>
          </div>
        );
      }
--------------------------------------------------------------------------------


Function 5: ReadInMemo
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function ReadInMemo(props) {
        const count = React.useMemo(() => readContext(Context), []);
        return <Text text={count} />;
      }
--------------------------------------------------------------------------------


Function 6: ReadInReducer
Language: JavaScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
function ReadInReducer(props) {
        const [count, dispatch] = React.useReducer(() => readContext(Context));
        if (count !== 42) {
          dispatch();
        }
        return <Text text={count} />;
      }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T19:23:55.377Z
File: }
Functions Extracted: 5


Function 1: POST
Language: JavaScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
async function POST(formData) {
    const boundAction = await ReactServerDOMServer.decodeAction(
      formData,
      webpackServerMap,
    );
    const returnValue = boundAction();
    const formState = await ReactServerDOMServer.decodeFormState(
      await returnValue,
      formData,
      webpackServerMap,
    );
    return {returnValue, formState};
  }
--------------------------------------------------------------------------------


Function 2: submit
Language: JavaScript
Lines: 34
Full Code:
--------------------------------------------------------------------------------
function submit(submitter) {
    const form = submitter.form || submitter;
    if (!submitter.form) {
      submitter = undefined;
    }
    const submitEvent = new Event('submit', {bubbles: true, cancelable: true});
    submitEvent.submitter = submitter;
    const returnValue = form.dispatchEvent(submitEvent);
    if (!returnValue) {
      return;
    }
    const action =
      (submitter && submitter.getAttribute('formaction')) || form.action;
    if (!/\s*javascript:/i.test(action)) {
      const method = (submitter && submitter.formMethod) || form.method;
      const encType = (submitter && submitter.formEnctype) || form.enctype;
      if (method === 'post' && encType === 'multipart/form-data') {
        let formData;
        if (submitter) {
          const temp = document.createElement('input');
          temp.name = submitter.name;
          temp.value = submitter.value;
          submitter.parentNode.insertBefore(temp, submitter);
          formData = new FormData(form);
          temp.parentNode.removeChild(temp);
        } else {
          formData = new FormData(form);
        }
        return POST(formData);
      }
      throw new Error('Navigate to: ' + action);
    }
  }
--------------------------------------------------------------------------------


Function 3: readIntoContainer
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
async function readIntoContainer(stream) {
    const reader = stream.getReader();
    let result = '';
    while (true) {
      const {done, value} = await reader.read();
      if (done) {
        break;
      }
      result += Buffer.from(value).toString('utf8');
    }
    const temp = document.createElement('div');
    temp.innerHTML = result;
    insertNodesAndExecuteScripts(temp, container, null);
  }
--------------------------------------------------------------------------------


Function 4: useActionState
Language: JavaScript
Lines: 43
Full Code:
--------------------------------------------------------------------------------
it("useActionState's dispatch binds the initial state to the provided action", async () => {
    const serverAction = serverExports(
      async function action(prevState, formData) {
        return {
          count:
            prevState.count + parseInt(formData.get('incrementAmount'), 10),
        };
      },
    );

    const initialState = {count: 1};
    function Client({action}) {
      const [state, dispatch, isPending] = useActionState(action, initialState);
      return (
        <form action={dispatch}>
          <span>{isPending ? 'Pending...' : ''}</span>
          <span>Count: {state.count}</span>
          <input type="text" name="incrementAmount" defaultValue="5" />
        </form>
      );
    }

    const ClientRef = await clientExports(Client);

    const rscStream = ReactServerDOMServer.renderToReadableStream(
      <ClientRef action={serverAction} />, webpackMap,
    );
    const response = ReactServerDOMClient.createFromReadableStream(rscStream, {
      serverConsumerManifest: {
        moduleMap: null,
        moduleLoading: null,
      },
    });
    const ssrStream = await ReactDOMServer.renderToReadableStream(response);
    await readIntoContainer(ssrStream);

    const form = container.getElementsByTagName('form')[0];
    const pendingSpan = container.getElementsByTagName('span')[0];
    const stateSpan = container.getElementsByTagName('span')[1];
    expect(pendingSpan.textContent).toBe('');
    expect(stateSpan.textContent).toBe('Count: 1');

    const {returnValue} = await submit(form);
    expect(await returnValue).toEqual({count: 6});
  });
--------------------------------------------------------------------------------


Function 5: useActionStateReuse
Language: JavaScript
Lines: 43
Full Code:
--------------------------------------------------------------------------------
it('useActionState can reuse state during MPA form submission', async () => {
    const serverAction = serverExports(
      async function action(prevState, formData) {
        return prevState + 1;
      },
    );

    function Form({action}) {
      const [count, dispatch, isPending] = useActionState(action, 1);
      return (
        <form action={dispatch}>
          {isPending ? 'Pending...' : ''}
          {count}
        </form>
      );
    }

    function Client({action}) {
      return (
        <div>
          <Form action={action} />
          <Form action={action} />
          <Form action={action} />
        </div>
      );
    }

    const ClientRef = await clientExports(Client);

    const rscStream = ReactServerDOMServer.renderToReadableStream(
      <ClientRef action={serverAction} />, webpackMap,
    );
    const response = ReactServerDOMClient.createFromReadableStream(rscStream, {
      serverConsumerManifest: {
        moduleMap: null,
        moduleLoading: null,
      },
    });
    const ssrStream = await ReactDOMServer.renderToReadableStream(response);
    await readIntoContainer(ssrStream);

    expect(container.textContent).toBe('111');
  });
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T19:24:06.285Z
File: Make them available to the helpers.
Functions Extracted: 3


Function 1: Counter
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function Counter(props) {
        const [count, setCount] = useState(0);
        if (count < 12) {
          setCount(c => c + 1);
          setCount(c => c + 1);
          setCount(c => c + 1);
        }
        return <Text text={'Count: ' + count} />;
      }
--------------------------------------------------------------------------------


Function 2: Counter
Language: JavaScript
Lines: 9
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        const [count, setCount] = useState(0);
        if (count < 3) {
          setCount(count + 1);
        }
        return <span>Count: {count}</span>;
      }
--------------------------------------------------------------------------------


Function 3: Counter
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        const [count, dispatch] = useReducer(reducer, 0);
        if (count < 3) {
          dispatch('increment');
        }
        yieldValue('Render: ' + count);
        return <Text text={count} />;
      }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T19:24:22.287Z
File: invariant for a missing parent, which is super confusing.
Functions Extracted: 4


Function 1: getEventListenerSet
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
export function getEventListenerSet(node: EventTarget): Set<string> {
  let elementListenerSet = (node: any)[internalEventHandlersKey];
  if (elementListenerSet === undefined) {
    elementListenerSet = (node: any)[internalEventHandlersKey] = new Set();
  }
  return elementListenerSet;
}
--------------------------------------------------------------------------------


Function 2: getResourcesFromRoot
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
export function getResourcesFromRoot(root: HoistableRoot): RootResources {
  let resources = (root: any)[internalRootNodeResourcesKey];
  if (!resources) {
    resources = (root: any)[internalRootNodeResourcesKey] = {
      hoistableStyles: new Map(),
      hoistableScripts: new Map(),
    };
  }
  return resources;
}
--------------------------------------------------------------------------------


Function 3: addEventHandleToTarget
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
export function addEventHandleToTarget(
  target: EventTarget | ReactScopeInstance,
  eventHandle: ReactDOMEventHandle,
): void {
  let eventHandles = (target: any)[internalEventHandlesSetKey];
  if (eventHandles === undefined) {
    eventHandles = (target: any)[internalEventHandlesSetKey] = new Set();
  }
  eventHandles.add(eventHandle);
}
--------------------------------------------------------------------------------


Function 4: doesTargetHaveEventHandle
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
export function doesTargetHaveEventHandle(
  target: EventTarget | ReactScopeInstance,
  eventHandle: ReactDOMEventHandle,
): boolean {
  const eventHandles = (target: any)[internalEventHandlesSetKey];
  if (eventHandles === undefined) {
    return false;
  }
  return eventHandles.has(eventHandle);
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T19:24:29.130Z
File: Make them available to the helpers.
Functions Extracted: 2


Function 1: readContext
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function readContext(Ctx) {
        const dispatcher =
          React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE
            .H;
        return dispatcher.readContext(Ctx);
      }
--------------------------------------------------------------------------------


Function 2: App
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
const App = () => (
        <div>
          <Theme.Provider value="light">
            <Language.Provider value="english">
              <Theme.Provider value="dark">
                <Theme.Consumer>
                  {theme => <div id="theme1">{theme}</div>}
                </Theme.Consumer>
              </Theme.Provider>
              <Language.Consumer>
                {language => <div id="language2">{language}</div>}
              </Language.Consumer>
            </Language.Provider>
          </Theme.Provider>
          <Language.Consumer>
            {language => <div id="language3">{language}</div>}
          </Language.Consumer>
        </div>
      );
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:24:36.734Z
Question Type: multiple-choice
Function: App
Function Size: 527 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: App (JavaScript)\n// Renders a component tree with context providers and nested components.\n\nfunction App(props) {\n        return (\n          <div>\n            <Provider foo={props.foo} bar={props.bar} baz={props.baz}>\n              <Indirection>\n                <Indirection>\n           
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:24:39.492Z
Question Type: multiple-choice
Function: useActionStateReuse
Function Size: 1288 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: useActionStateReuse (JavaScript)\n// Tests reuse of state in multiple form submissions.\n\nit('useActionState can reuse state during MPA form submission', async () => {\n    const serverAction = serverExports(\n      async function action(prevState, formData) {\n        return prevState + 1;\n
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:24:42.290Z
Question Type: multiple-choice
Function: useActionState
Function Size: 1701 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: useActionState (JavaScript)\n// Tests the dispatch of useActionState with initial state.\n\nit("useActionState's dispatch binds the initial state to the provided action", async () => {\n    const serverAction = serverExports(\n      async function action(prevState, formData) {\n        return
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:24:44.152Z
Question Type: order-sequence
Function: App
Function Size: 778 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: App (JavaScript)\n// Renders a component with nested context providers for theme and language.\n\nconst App = () => (\n        <div>\n          <Theme.Provider value="light">\n            <Language.Provider value="english">\n              <Theme.Provider value="dark">\n                <Theme.Co
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:24:50.966Z
Question Type: multiple-choice
Function: Counter
Function Size: 314 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// Renders a count based on props and an increment value using useCallback.\n\nfunction Counter(props) {\n        const renderCount = useCallback(increment => {\n          return 'Count: ' + (props.count + increment);\n        });\n        return <Text text={renderCount(3
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:24:53.450Z
Question Type: multiple-choice
Function: Counter
Function Size: 310 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// Uses useImperativeHandle to manage ref and render a text label.\n\nfunction Counter(props, ref) {\n        useImperativeHandle(ref, () => {\n          throw new Error('should not be invoked');\n        });\n        return <Text text={props.label + ': ' + ref.current} /
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:24:55.475Z
Question Type: select-all
Function: getEventListenerSet
Function Size: 406 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getEventListenerSet (TypeScript)\n// Retrieves or initializes a set of event listeners for a given node.\n\nexport function getEventListenerSet(node: EventTarget): Set<string> {\n  let elementListenerSet = (node: any)[internalEventHandlersKey];\n  if (elementListenerSet === undefined) {\n    
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:24:55.788Z
Question Type: multiple-choice
Function: doesTargetHaveEventHandle
Function Size: 407 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: doesTargetHaveEventHandle (TypeScript)\n// Checks if the target has a specific event handle.\n\nexport function doesTargetHaveEventHandle(\n  target: EventTarget | ReactScopeInstance,\n  eventHandle: ReactDOMEventHandle,\n): boolean {\n  const eventHandles = (target: any)[internalEventHandlesS
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:25:02.429Z
Question Type: multiple-choice
Function: CapitalizedText
Function Size: 604 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: CapitalizedText (JavaScript)\n// Manages state and capitalizes text based on props and internal logic.\n\nfunction CapitalizedText(props) {\n          const [text, setText] = useState(props.text);\n          const [count, setCount] = useState(0);\n          const capitalizeText = useCallback(
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:25:05.217Z
Question Type: true-false
Function: readIntoContainer
Function Size: 513 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: readIntoContainer (JavaScript)\n// Reads a stream and inserts its content into a container.\n\nasync function readIntoContainer(stream) {\n    const reader = stream.getReader();\n    let result = '';\n    while (true) {\n      const {done, value} = await reader.read();\n      if (done) {\n      
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:25:08.624Z
Question Type: multiple-choice
Function: getResourcesFromRoot
Function Size: 431 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: getResourcesFromRoot (TypeScript)\n// Retrieves or initializes resources associated with the root.\n\nexport function getResourcesFromRoot(root: HoistableRoot): RootResources {\n  let resources = (root: any)[internalRootNodeResourcesKey];\n  if (!resources) {\n    resources = (root: any)[inte
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:25:14.089Z
Question Type: select-all
Function: ReadInMemo
Function Size: 242 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: ReadInMemo (JavaScript)\n// Reads context value using useMemo and renders it as text.\n\nfunction ReadInMemo(props) {\n        const count = React.useMemo(() => readContext(Context), []);\n        return <Text text={count} />;\n      }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:25:19.201Z
Question Type: true-false
Function: submit
Function Size: 1290 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: submit (JavaScript)\n// Submits a form and handles the submission logic.\n\nfunction submit(submitter) {\n    const form = submitter.form || submitter;\n    if (!submitter.form) {\n      submitter = undefined;\n    }\n    const submitEvent = new Event('submit', {bubbles: true, cancelable: true}
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:25:26.212Z
Question Type: multiple-choice
Function: ReadInReducer
Function Size: 329 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: ReadInReducer (JavaScript)\n// Uses useReducer to read context and conditionally dispatch updates.\n\nfunction ReadInReducer(props) {\n        const [count, dispatch] = React.useReducer(() => readContext(Context));\n        if (count !== 42) {\n          dispatch();\n        }\n        return <
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:25:28.075Z
Question Type: multiple-choice
Function: Counter
Function Size: 366 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// Increments the count state multiple times and displays the count.\n\nfunction Counter(props) {\n        const [count, setCount] = useState(0);\n        if (count < 12) {\n          setCount(c => c + 1);\n          setCount(c => c + 1);\n          setCount(c => c + 1);\n 
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:25:33.178Z
Question Type: order-sequence
Function: addEventHandleToTarget
Function Size: 454 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: addEventHandleToTarget (TypeScript)\n// Adds an event handle to the target's set of event handles.\n\nexport function addEventHandleToTarget(\n  target: EventTarget | ReactScopeInstance,\n  eventHandle: ReactDOMEventHandle,\n): void {\n  let eventHandles = (target: any)[internalEventHandlesSet
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:25:33.232Z
Question Type: function-variant
Function: Counter
Function Size: 341 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// Uses a reducer to increment the count state and logs the render value.\n\nfunction Counter() {\n        const [count, dispatch] = useReducer(reducer, 0);\n        if (count < 3) {\n          dispatch('increment');\n        }\n        yieldValue('Render: ' + count);\n    
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760124196390
Repository: Unknown
Total Questions Generated: 31
Total Chunks Processed: 20
Ended: 2025-10-10T19:25:38.587Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T19:32:01.850Z
File: nothing yielded for bad markup
Functions Extracted: 4


Function 1: Counter
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function Counter(props) {
        const renderCount = useCallback(increment => {
          return 'Count: ' + (props.count + increment);
        });
        return <Text text={renderCount(3)} />;
      }
--------------------------------------------------------------------------------


Function 2: CapitalizedText
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function CapitalizedText(props) {
          const [text, setText] = useState(props.text);
          const [count, setCount] = useState(0);
          const capitalizeText = useCallback(() => text.toUpperCase(), [text]);
          yieldValue(capitalizeText);
          if (count < 3) {
            setCount(count + 1);
          }
          if (text === 'hello' && count === 2) {
            setText('hello, world.');
          }
          return <Text text={capitalizeText()} />;
        }
--------------------------------------------------------------------------------


Function 3: Counter
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function Counter(props, ref) {
        useImperativeHandle(ref, () => {
          throw new Error('should not be invoked');
        });
        return <Text text={props.label + ': ' + ref.current} />;
      }
--------------------------------------------------------------------------------


Function 4: App
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function App(props) {
        return (
          <div>
            <Provider foo={props.foo} bar={props.bar} baz={props.baz}>
              <Indirection>
                <Indirection>
                  <FooAndBar />
                </Indirection>
                <Indirection>
                  <Baz />
                </Indirection>
              </Indirection>
            </Provider>
          </div>
        );
      }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T19:32:34.434Z
File: }
Functions Extracted: 5


Function 1: POST
Language: JavaScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
async function POST(formData) {
    const boundAction = await ReactServerDOMServer.decodeAction(
      formData,
      webpackServerMap,
    );
    const returnValue = boundAction();
    const formState = await ReactServerDOMServer.decodeFormState(
      await returnValue,
      formData,
      webpackServerMap,
    );
    return {returnValue, formState};
  }
--------------------------------------------------------------------------------


Function 2: submit
Language: JavaScript
Lines: 28
Full Code:
--------------------------------------------------------------------------------
function submit(submitter) {
    const form = submitter.form || submitter;
    if (!submitter.form) {
      submitter = undefined;
    }
    const submitEvent = new Event('submit', {bubbles: true, cancelable: true});
    submitEvent.submitter = submitter;
    const returnValue = form.dispatchEvent(submitEvent);
    if (!returnValue) {
      return;
    }
    const action =
      (submitter && submitter.getAttribute('formaction')) || form.action;
    if (!/\s*javascript:/i.test(action)) {
      const method = (submitter && submitter.formMethod) || form.method;
      const encType = (submitter && submitter.formEnctype) || form.enctype;
      if (method === 'post' && encType === 'multipart/form-data') {
        let formData;
        if (submitter) {
          const temp = document.createElement('input');
          temp.name = submitter.name;
          temp.value = submitter.value;
          submitter.parentNode.insertBefore(temp, submitter);
          formData = new FormData(form);
          temp.parentNode.removeChild(temp);
        } else {
          formData = new FormData(form);
        }
        return POST(formData);
      }
      throw new Error('Navigate to: ' + action);
    }
  }
--------------------------------------------------------------------------------


Function 3: readIntoContainer
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
async function readIntoContainer(stream) {
    const reader = stream.getReader();
    let result = '';
    while (true) {
      const {done, value} = await reader.read();
      if (done) {
        break;
      }
      result += Buffer.from(value).toString('utf8');
    }
    const temp = document.createElement('div');
    temp.innerHTML = result;
    insertNodesAndExecuteScripts(temp, container, null);
  }
--------------------------------------------------------------------------------


Function 4: useActionState
Language: JavaScript
Lines: 37
Full Code:
--------------------------------------------------------------------------------
it("useActionState's dispatch binds the initial state to the provided action", async () => {
    const serverAction = serverExports(
      async function action(prevState, formData) {
        return {
          count:
            prevState.count + parseInt(formData.get('incrementAmount'), 10),
        };
      },
    );

    const initialState = {count: 1};
    function Client({action}) {
      const [state, dispatch, isPending] = useActionState(action, initialState);
      return (
        <form action={dispatch}>
          <span>{isPending ? 'Pending...' : ''}</span>
          <span>Count: {state.count}</span>
          <input type="text" name="incrementAmount" defaultValue="5" />
        </form>
      );
    }

    const ClientRef = await clientExports(Client);

    const rscStream = ReactServerDOMServer.renderToReadableStream(
      <ClientRef action={serverAction} />, webpackMap,
    );
    const response = ReactServerDOMClient.createFromReadableStream(rscStream, {
      serverConsumerManifest: {
        moduleMap: null,
        moduleLoading: null,
      },
    });
    const ssrStream = await ReactDOMServer.renderToReadableStream(response);
    await readIntoContainer(ssrStream);

    const form = container.getElementsByTagName('form')[0];
    const pendingSpan = container.getElementsByTagName('span')[0];
    const stateSpan = container.getElementsByTagName('span')[1];
    expect(pendingSpan.textContent).toBe('');
    expect(stateSpan.textContent).toBe('Count: 1');

    const {returnValue} = await submit(form);
    expect(await returnValue).toEqual({count: 6});
  });
--------------------------------------------------------------------------------


Function 5: useActionStateReuse
Language: JavaScript
Lines: 37
Full Code:
--------------------------------------------------------------------------------
it('useActionState can reuse state during MPA form submission', async () => {
    const serverAction = serverExports(
      async function action(prevState, formData) {
        return prevState + 1;
      },
    );

    function Form({action}) {
      const [count, dispatch, isPending] = useActionState(action, 1);
      return (
        <form action={dispatch}>
          {isPending ? 'Pending...' : ''}
          {count}
        </form>
      );
    }

    function Client({action}) {
      return (
        <div>
          <Form action={action} />
          <Form action={action} />
          <Form action={action} />
        </div>
      );
    }

    const ClientRef = await clientExports(Client);

    const rscStream = ReactServerDOMServer.renderToReadableStream(
      <ClientRef action={serverAction} />, webpackMap,
    );
    const response = ReactServerDOMClient.createFromReadableStream(rscStream, {
      serverConsumerManifest: {
        moduleMap: null,
        moduleLoading: null,
      },
    });
    const ssrStream = await ReactDOMServer.renderToReadableStream(response);
    await readIntoContainer(ssrStream);

    expect(container.textContent).toBe('111');
  });
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T19:32:52.094Z
File: Make them available to the helpers.
Functions Extracted: 6


Function 1: Counter
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function Counter(props) {
        const [count] = useState(0);
        return <span>Count: {count}</span>;
      }
--------------------------------------------------------------------------------


Function 2: UpdateCount
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function UpdateCount({setCount, count, children}) {
        if (count < 3) {
          setCount(c => c + 1);
        }
        return <span>{children}</span>;
      }
--------------------------------------------------------------------------------


Function 3: Counter
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        const [count, setCount] = useState(0);
        if (count < 12) {
          setCount(c => c + 1);
          setCount(c => c + 1);
          setCount(c => c + 1);
        }
        return <Text text={'Count: ' + count} />;
      }
--------------------------------------------------------------------------------


Function 4: Counter
Language: JavaScript
Lines: 9
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        const [count, setCount] = useState(0);
        if (count < 3) {
          setCount(count + 1);
        }
        return <span>Count: {count}</span>;
      }
--------------------------------------------------------------------------------


Function 5: Counter
Language: JavaScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        const [count] = useReducer(reducer, 0);
        yieldValue('Render: ' + count);
        return <Text text={count} />;
      }
--------------------------------------------------------------------------------


Function 6: Counter
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        const [count, dispatch] = useReducer(reducer, 0);
        if (count < 3) {
          dispatch('increment');
        }
        yieldValue('Render: ' + count);
        return <Text text={count} />;
      }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T19:33:02.667Z
File: invariant for a missing parent, which is super confusing.
Functions Extracted: 3


Function 1: getEventListenerSet
Language: TypeScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
export function getEventListenerSet(node: EventTarget): Set<string> {
  let elementListenerSet = (node: any)[internalEventHandlersKey];
  if (elementListenerSet === undefined) {
    elementListenerSet = (node: any)[internalEventHandlersKey] = new Set();
  }
  return elementListenerSet;
}
--------------------------------------------------------------------------------


Function 2: addEventHandleToTarget
Language: TypeScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
export function addEventHandleToTarget(
  target: EventTarget | ReactScopeInstance,
  eventHandle: ReactDOMEventHandle,
): void {
  let eventHandles = (target: any)[internalEventHandlesSetKey];
  if (eventHandles === undefined) {
    eventHandles = (target: any)[internalEventHandlesSetKey] = new Set();
  }
  eventHandles.add(eventHandle);
}
--------------------------------------------------------------------------------


Function 3: getResourcesFromRoot
Language: TypeScript
Lines: 9
Full Code:
--------------------------------------------------------------------------------
export function getResourcesFromRoot(root: HoistableRoot): RootResources {
  let resources = (root: any)[internalRootNodeResourcesKey];
  if (!resources) {
    resources = (root: any)[internalRootNodeResourcesKey] = {
      hoistableStyles: new Map(),
      hoistableScripts: new Map(),
    };
  }
  return resources;
}
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T19:33:09.366Z
File: Make them available to the helpers.
Functions Extracted: 2


Function 1: readContext
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function readContext(Ctx) {
        const dispatcher =
          React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE
            .H;
        return dispatcher.readContext(Ctx);
      }
--------------------------------------------------------------------------------


Function 2: App
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
const App = () => (
        <div>
          <Theme.Provider value="light">
            <Language.Provider value="english">
              <Theme.Provider value="dark">
                <Theme.Consumer>
                  {theme => <div id="theme1">{theme}</div>}
                </Theme.Consumer>
              </Theme.Provider>
              <Language.Consumer>
                {language => <div id="language2">{language}</div>}
              </Language.Consumer>
            </Language.Provider>
          </Theme.Provider>
          <Language.Consumer>
            {language => <div id="language3">{language}</div>}
          </Language.Consumer>
        </div>
      );
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:33:16.429Z
Question Type: multiple-choice
Function: Counter
Function Size: 336 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// A counter that dispatches an increment action until it reaches 3.\n\nfunction Counter() {\n        const [count, dispatch] = useReducer(reducer, 0);\n        if (count < 3) {\n          dispatch('increment');\n        }\n        yieldValue('Render: ' + count);\n        r
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:33:16.729Z
Question Type: multiple-choice
Function: POST
Function Size: 452 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: POST (JavaScript)\n// Handles POST requests by decoding action and form state\n\nasync function POST(formData) {\n    const boundAction = await ReactServerDOMServer.decodeAction(\n      formData,\n      webpackServerMap,\n    );\n    const returnValue = boundAction();\n    const formState = awai
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:33:20.985Z
Question Type: order-sequence
Function: Counter
Function Size: 212 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// A simple counter component that displays the current count.\n\nfunction Counter(props) {\n        const [count] = useState(0);\n        return <span>Count: {count}</span>;\n      }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:33:21.210Z
Question Type: function-variant
Function: Counter
Function Size: 249 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// A counter component that uses a reducer to manage state.\n\nfunction Counter() {\n        const [count] = useReducer(reducer, 0);\n        yieldValue('Render: ' + count);\n        return <Text text={count} />;\n      }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:33:29.799Z
Question Type: multiple-choice
Function: useActionState
Function Size: 1703 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: useActionState (JavaScript)\n// Tests the dispatch of useActionState with an initial state\n\nit("useActionState's dispatch binds the initial state to the provided action", async () => {\n    const serverAction = serverExports(\n      async function action(prevState, formData) {\n        retu
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:33:31.665Z
Question Type: multiple-choice
Function: App
Function Size: 774 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: App (JavaScript)\n// Renders a nested context structure with Theme and Language providers.\n\nconst App = () => (\n        <div>\n          <Theme.Provider value="light">\n            <Language.Provider value="english">\n              <Theme.Provider value="dark">\n                <Theme.Consum
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:33:33.728Z
Question Type: select-all
Function: readIntoContainer
Function Size: 516 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: readIntoContainer (JavaScript)\n// Reads from a stream and inserts the result into a container\n\nasync function readIntoContainer(stream) {\n    const reader = stream.getReader();\n    let result = '';\n    while (true) {\n      const {done, value} = await reader.read();\n      if (done) {\n   
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:33:35.566Z
Question Type: multiple-choice
Function: Counter
Function Size: 347 characters
Questions Generated: 2
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// A counter that increments by 3 until it reaches 12.\n\nfunction Counter() {\n        const [count, setCount] = useState(0);\n        if (count < 12) {\n          setCount(c => c + 1);\n          setCount(c => c + 1);\n          setCount(c => c + 1);\n        }\n        re
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:33:35.938Z
Question Type: multiple-choice
Function: readContext
Function Size: 295 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: readContext (JavaScript)\n// Reads the context value from the provided context.\n\nfunction readContext(Ctx) {\n        const dispatcher =\n          React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE\n            .H;\n        return dispatcher.readContext(Ctx);\n      }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:33:36.257Z
Question Type: true-false
Function: UpdateCount
Function Size: 268 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: UpdateCount (JavaScript)\n// Updates the count if it's less than 3 and renders children.\n\nfunction UpdateCount({setCount, count, children}) {\n        if (count < 3) {\n          setCount(c => c + 1);\n        }\n        return <span>{children}</span>;\n      }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:33:44.679Z
Question Type: multiple-choice
Function: Counter
Function Size: 303 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// Uses imperative handle to manage ref and throw an error.\n\nfunction Counter(props, ref) {\n        useImperativeHandle(ref, () => {\n          throw new Error('should not be invoked');\n        });\n        return <Text text={props.label + ': ' + ref.current} />;\n    
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:33:48.135Z
Question Type: multiple-choice
Function: Counter
Function Size: 269 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// A counter that increments until it reaches 3.\n\nfunction Counter() {\n        const [count, setCount] = useState(0);\n        if (count < 3) {\n          setCount(count + 1);\n        }\n        return <span>Count: {count}</span>;\n      }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:33:52.047Z
Question Type: function-variant
Function: addEventHandleToTarget
Function Size: 454 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: addEventHandleToTarget (TypeScript)\n// Adds an event handle to the target's set of event handles.\n\nexport function addEventHandleToTarget(\n  target: EventTarget | ReactScopeInstance,\n  eventHandle: ReactDOMEventHandle,\n): void {\n  let eventHandles = (target: any)[internalEventHandlesSet
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:33:53.175Z
Question Type: select-all
Function: submit
Function Size: 1299 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: submit (JavaScript)\n// Submits a form and handles different submission scenarios\n\nfunction submit(submitter) {\n    const form = submitter.form || submitter;\n    if (!submitter.form) {\n      submitter = undefined;\n    }\n    const submitEvent = new Event('submit', {bubbles: true, cancelab
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:33:53.634Z
Question Type: true-false
Function: getResourcesFromRoot
Function Size: 431 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: getResourcesFromRoot (TypeScript)\n// Retrieves or initializes resources associated with the root.\n\nexport function getResourcesFromRoot(root: HoistableRoot): RootResources {\n  let resources = (root: any)[internalRootNodeResourcesKey];\n  if (!resources) {\n    resources = (root: any)[inte
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760124196390
Repository: Unknown
Total Questions Generated: 15
Total Chunks Processed: 20
Ended: 2025-10-10T19:33:55.932Z
================================================================================


--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T19:42:18.154Z
File: nothing yielded for bad markup
Functions Extracted: 9


Function 1: Counter
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function Counter(props) {
        const renderCount = useCallback(increment => {
          return 'Count: ' + (props.count + increment);
        });
        return <Text text={renderCount(3)} />;
      }
--------------------------------------------------------------------------------


Function 2: CapitalizedText
Language: JavaScript
Lines: 14
Full Code:
--------------------------------------------------------------------------------
function CapitalizedText(props) {
          const [text, setText] = useState(props.text);
          const [count, setCount] = useState(0);
          const capitalizeText = useCallback(() => text.toUpperCase(), [text]);
          yieldValue(capitalizeText);
          if (count < 3) {
            setCount(count + 1);
          }
          if (text === 'hello' && count === 2) {
            setText('hello, world.');
          }
          return <Text text={capitalizeText()} />;
        }
--------------------------------------------------------------------------------


Function 3: Counter
Language: JavaScript
Lines: 7
Full Code:
--------------------------------------------------------------------------------
function Counter(props, ref) {
        useImperativeHandle(ref, () => {
          throw new Error('should not be invoked');
        });
        return <Text text={props.label + ': ' + ref.current} />;
      }
--------------------------------------------------------------------------------


Function 4: Counter
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        useInsertionEffect(() => {
          throw new Error('should not be invoked');
        });

        return <Text text='Count: 0' />;
      }
--------------------------------------------------------------------------------


Function 5: Counter
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        useLayoutEffect(() => {
          throw new Error('should not be invoked');
        });

        return <Text text='Count: 0' />;
      }
--------------------------------------------------------------------------------


Function 6: App
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
function App(props) {
        return (
          <div>
            <Provider foo={props.foo} bar={props.bar} baz={props.baz}>
              <Indirection>
                <Indirection>
                  <FooAndBar />
                </Indirection>
                <Indirection>
                  <Baz />
                </Indirection>
              </Indirection>
            </Provider>
          </div>
        );
      }
--------------------------------------------------------------------------------


Function 7: Provider
Language: JavaScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
function Provider(props) {
          return (
            <Context.Provider
              value={{foo: props.foo, bar: props.bar, baz: props.baz}}>
              {props.children}
            </Context.Provider>
          );
        }
--------------------------------------------------------------------------------


Function 8: FooAndBar
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function FooAndBar() {
          const {foo} = useContext(Context);
          const {bar} = useContext(Context);
          return <Text text={`Foo: ${foo}, Bar: ${bar}`} />;
        }
--------------------------------------------------------------------------------


Function 9: Baz
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function Baz() {
          const {baz} = useContext(Context);
          return <Text text={'Baz: ' + baz} />;
        }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T19:42:47.263Z
File: }
Functions Extracted: 4


Function 1: POST
Language: JavaScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
async function POST(formData) {
    const boundAction = await ReactServerDOMServer.decodeAction(
      formData,
      webpackServerMap,
    );
    const returnValue = boundAction();
    const formState = await ReactServerDOMServer.decodeFormState(
      await returnValue,
      formData,
      webpackServerMap,
    );
    return {returnValue, formState};
  }
--------------------------------------------------------------------------------


Function 2: submit
Language: JavaScript
Lines: 27
Full Code:
--------------------------------------------------------------------------------
function submit(submitter) {
    const form = submitter.form || submitter;
    if (!submitter.form) {
      submitter = undefined;
    }
    const submitEvent = new Event('submit', {bubbles: true, cancelable: true});
    submitEvent.submitter = submitter;
    const returnValue = form.dispatchEvent(submitEvent);
    if (!returnValue) {
      return;
    }
    const action =
      (submitter && submitter.getAttribute('formaction')) || form.action;
    if (!/\s*javascript:/i.test(action)) {
      const method = (submitter && submitter.formMethod) || form.method;
      const encType = (submitter && submitter.formEnctype) || form.enctype;
      if (method === 'post' && encType === 'multipart/form-data') {
        let formData;
        if (submitter) {
          const temp = document.createElement('input');
          temp.name = submitter.name;
          temp.value = submitter.value;
          submitter.parentNode.insertBefore(temp, submitter);
          formData = new FormData(form);
          temp.parentNode.removeChild(temp);
        } else {
          formData = new FormData(form);
        }
        return POST(formData);
      }
      throw new Error('Navigate to: ' + action);
    }
  }
--------------------------------------------------------------------------------


Function 3: readIntoContainer
Language: JavaScript
Lines: 12
Full Code:
--------------------------------------------------------------------------------
async function readIntoContainer(stream) {
    const reader = stream.getReader();
    let result = '';
    while (true) {
      const {done, value} = await reader.read();
      if (done) {
        break;
      }
      result += Buffer.from(value).toString('utf8');
    }
    const temp = document.createElement('div');
    temp.innerHTML = result;
    insertNodesAndExecuteScripts(temp, container, null);
  }
--------------------------------------------------------------------------------


Function 4: useActionState
Language: JavaScript
Lines: 30
Full Code:
--------------------------------------------------------------------------------
it("useActionState's dispatch binds the initial state to the provided action", async () => {
    const serverAction = serverExports(
      async function action(prevState, formData) {
        return {
          count:
            prevState.count + parseInt(formData.get('incrementAmount'), 10),
        };
      },
    );

    const initialState = {count: 1};
    function Client({action}) {
      const [state, dispatch, isPending] = useActionState(action, initialState);
      return (
        <form action={dispatch}>
          <span>{isPending ? 'Pending...' : ''}</span>
          <span>Count: {state.count}</span>
          <input type="text" name="incrementAmount" defaultValue="5" />
        </form>
      );
    }

    const ClientRef = await clientExports(Client);

    const rscStream = ReactServerDOMServer.renderToReadableStream(
      <ClientRef action={serverAction} />, webpackMap,
    );
    const response = ReactServerDOMClient.createFromReadableStream(rscStream, {
      serverConsumerManifest: {
        moduleMap: null,
        moduleLoading: null,
      },
    });
    const ssrStream = await ReactDOMServer.renderToReadableStream(response);
    await readIntoContainer(ssrStream);

    const form = container.getElementsByTagName('form')[0];
    const pendingSpan = container.getElementsByTagName('span')[0];
    const stateSpan = container.getElementsByTagName('span')[1];
    expect(pendingSpan.textContent).toBe('');
    expect(stateSpan.textContent).toBe('Count: 1');

    const {returnValue} = await submit(form);
    expect(await returnValue).toEqual({count: 6});
  });
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T19:43:00.781Z
File: Make them available to the helpers.
Functions Extracted: 5


Function 1: Counter
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function Counter(props) {
        const [count] = useState(0);
        return <span>Count: {count}</span>;
      }
--------------------------------------------------------------------------------


Function 2: UpdateCount
Language: JavaScript
Lines: 6
Full Code:
--------------------------------------------------------------------------------
function UpdateCount({setCount, count, children}) {
        if (count < 3) {
          setCount(c => c + 1);
        }
        return <span>{children}</span>;
      }
--------------------------------------------------------------------------------


Function 3: Counter
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        const [count, setCount] = useState(0);
        if (count < 12) {
          setCount(c => c + 1);
          setCount(c => c + 1);
          setCount(c => c + 1);
        }
        return <Text text={'Count: ' + count} />;
      }
--------------------------------------------------------------------------------


Function 4: Counter
Language: JavaScript
Lines: 8
Full Code:
--------------------------------------------------------------------------------
function Counter() {
        const [count, setCount] = useState(0);
        if (count < 3) {
          setCount(count + 1);
        }
        return <span>Count: {count}</span>;
      }
--------------------------------------------------------------------------------


Function 5: Counter
Language: JavaScript
Lines: 10
Full Code:
--------------------------------------------------------------------------------
function Counter() {
          const [count, dispatch] = useReducer(reducer, 0);
          if (count < 3) {
            dispatch('increment');
          }
          yieldValue('Render: ' + count);
          return <Text text={count} />;
        }
--------------------------------------------------------------------------------

================================================================================

--- FUNCTION EXTRACTION ---
Timestamp: 2025-10-10T19:43:18.693Z
File: Make them available to the helpers.
Functions Extracted: 2


Function 1: readContext
Language: JavaScript
Lines: 5
Full Code:
--------------------------------------------------------------------------------
function readContext(Ctx) {
        const dispatcher =
          React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE
            .H;
        return dispatcher.readContext(Ctx);
      }
--------------------------------------------------------------------------------


Function 2: App
Language: JavaScript
Lines: 15
Full Code:
--------------------------------------------------------------------------------
const App = () => (
        <div>
          <Theme.Provider value="light">
            <Language.Provider value="english">
              <Theme.Provider value="dark">
                <Theme.Consumer>
                  {theme => <div id="theme1">{theme}</div>}
                </Theme.Consumer>
              </Theme.Provider>
              <Language.Consumer>
                {language => <div id="language2">{language}</div>}
              </Language.Consumer>
            </Language.Provider>
          </Theme.Provider>
          <Language.Consumer>
            {language => <div id="language3">{language}</div>}
          </Language.Consumer>
        </div>
      );
--------------------------------------------------------------------------------

================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:43:26.066Z
Question Type: select-all
Function: readContext
Function Size: 288 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: readContext (JavaScript)\n// Reads the context value using a dispatcher.\n\nfunction readContext(Ctx) {\n        const dispatcher =\n          React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE\n            .H;\n        return dispatcher.readContext(Ctx);\n      }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:43:26.560Z
Question Type: multiple-choice
Function: readIntoContainer
Function Size: 510 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: readIntoContainer (JavaScript)\n// Reads a stream into a container and executes scripts.\n\nasync function readIntoContainer(stream) {\n    const reader = stream.getReader();\n    let result = '';\n    while (true) {\n      const {done, value} = await reader.read();\n      if (done) {\n        b
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:43:26.851Z
Question Type: multiple-choice
Function: App
Function Size: 517 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: App (JavaScript)\n// Renders a provider with nested components FooAndBar and Baz.\n\nfunction App(props) {\n        return (\n          <div>\n            <Provider foo={props.foo} bar={props.bar} baz={props.baz}>\n              <Indirection>\n                <Indirection>\n                  <Fo
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:43:32.998Z
Question Type: order-sequence
Function: POST
Function Size: 455 characters
Questions Generated: 0
Repository: Unknown
Function Preview: // Function: POST (JavaScript)\n// Handles POST requests by decoding actions and form states.\n\nasync function POST(formData) {\n    const boundAction = await ReactServerDOMServer.decodeAction(\n      formData,\n      webpackServerMap,\n    );\n    const returnValue = boundAction();\n    const formState = a
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:43:35.691Z
Question Type: true-false
Function: Counter
Function Size: 357 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// A counter component that increments the count multiple times.\n\nfunction Counter() {\n        const [count, setCount] = useState(0);\n        if (count < 12) {\n          setCount(c => c + 1);\n          setCount(c => c + 1);\n          setCount(c => c + 1);\n        }\n
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:43:42.345Z
Question Type: multiple-choice
Function: Counter
Function Size: 289 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// A counter component that increments the count until it reaches 3.\n\nfunction Counter() {\n        const [count, setCount] = useState(0);\n        if (count < 3) {\n          setCount(count + 1);\n        }\n        return <span>Count: {count}</span>;\n      }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:43:47.674Z
Question Type: function-variant
Function: Baz
Function Size: 196 characters
Questions Generated: 1
Repository: Unknown
Function Preview: // Function: Baz (JavaScript)\n// Reads and displays baz value from context.\n\nfunction Baz() {\n          const {baz} = useContext(Context);\n          return <Text text={'Baz: ' + baz} />;\n        }
================================================================================

--- QUESTION GENERATION ---
Timestamp: 2025-10-10T19:43:47.681Z
Question Type: multiple-choice
Function: Counter
Function Size: 298 characters
Questions Generated: 3
Repository: Unknown
Function Preview: // Function: Counter (JavaScript)\n// Renders a count based on props and a callback increment.\n\nfunction Counter(props) {\n        const renderCount = useCallback(increment => {\n          return 'Count: ' + (props.count + increment);\n        });\n        return <Text text={renderCount(3)} />;\n      }
================================================================================


=== SESSION SUMMARY ===
Session ID: session-1760124196390
Repository: Unknown
Total Questions Generated: 15
Total Chunks Processed: 20
Ended: 2025-10-10T19:43:55.872Z
================================================================================

